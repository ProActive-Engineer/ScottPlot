trigger:
- master

strategy:
  matrix:
    MacOS:
      imageName: 'macOS-latest'
    Linux:
      imageName: 'ubuntu-latest'
    Windows:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)

steps:

### INSTALL NUGET AND RESTORE PACKAGES

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'

- task: NuGetCommand@2
  displayName: 'Full package restoration'
  inputs:
    restoreSolution: 'src/ScottPlotV4.sln'

### BUILD AND PACK PACKAGES THAT WORK ON EVERY OS

- task: DotNetCoreCLI@2
  displayName: 'Build ScottPlot'
  inputs:
    command: 'build'
    projects: 'src/ScottPlot/ScottPlot.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build ScottPlot.Demo'
  inputs:
    command: 'build'
    projects: 'src/ScottPlot.Demo/ScottPlot.Demo.csproj'

### BUILD AND RUN PRIMARY TESTS
- task: DotNetCoreCLI@2
  displayName: 'Build Tests'
  inputs:
    command: 'build'
    projects: 'tests/ScottPlotTests.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Run Tests'
  inputs:
    command: test
    projects: 'tests/ScottPlotTests.csproj'

### PUBLISH TEST OUTPUT AS AN ARTIFACT
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: tests/bin
    patterns: '**/*.png'
    artifactName: cookbookImages

### BUILD AND RUN EXPERIMENTAL TESTS
- task: DotNetCoreCLI@2
  displayName: 'Build Experimental Tests'
  inputs:
    command: 'build'
    projects: 'dev/tests2/ScottPlotTests2/ScottPlotTests2.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Run Experimental Tests'
  inputs:
    command: test
    projects: 'dev/tests2/ScottPlotTests2/ScottPlotTests2.csproj'

### BUILD FULL SOLUTION (Windows only)
    
- task: VSBuild@1
  displayName: 'Rebuild Solution (Windows)'
  condition: contains(variables['agent.os'], 'Windows')
  inputs:
    solution: 'src/ScottPlotV4.sln'
