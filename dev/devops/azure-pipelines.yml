trigger:
- master

strategy:
  matrix:
    MacOS:
      imageName: 'macOS-latest'
    Linux:
      imageName: 'ubuntu-latest'
    Windows:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)

steps:

### INSTALL NUGET AND RESTORE PACKAGES

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'

- task: NuGetCommand@2
  displayName: 'Full package restoration'
  inputs:
    restoreSolution: 'src/ScottPlotV4.sln'

### BUILD AND PACK PACKAGES THAT WORK ON EVERY OS

- task: DotNetCoreCLI@2
  displayName: 'Build ScottPlot'
  inputs:
    command: 'build'
    arguments: '--configuration Release'
    projects: 'src/ScottPlot/ScottPlot.csproj'

- task: NuGetCommand@2
  displayName: 'Push ScottPlot.nupkg'
  inputs:
    command: 'push'
    feedsToUse: 'select'
    packagesToPush: 'src/ScottPlot/bin/Release/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'TestFeed'
    versioningScheme: 'off'
    allowPackageConflicts: true

- task: DotNetCoreCLI@2
  displayName: 'Build ScottPlot.Demo'
  inputs:
    command: 'build'
    projects: 'src/ScottPlot.Demo/ScottPlot.Demo.csproj'

### BUILD AND RUN TESTS
- task: DotNetCoreCLI@2
  displayName: 'Build Tests'
  inputs:
    command: 'build'
    projects: 'tests/ScottPlotTests.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Run Tests'
  inputs:
    command: test
    projects: 'tests/ScottPlotTests.csproj'

### BUILD FULL SOLUTION (Windows only)
    
- task: VSBuild@1
  displayName: 'Rebuild Solution (Windows)'
  condition: contains(variables['agent.os'], 'Windows')
  inputs:
    solution: 'src/ScottPlotV4.sln'
