#nullable enable
override ScottPlot.MinMaxSearchStrategies.LinearFastDoubleMinMaxSearchStrategy<T>.MinMaxRangeQuery(int l, int r, out double lowestValue, out double highestValue) -> void
override ScottPlot.MinMaxSearchStrategies.LinearFastDoubleMinMaxSearchStrategy<T>.SourceElement(int index) -> double
override ScottPlot.Pixel.GetHashCode() -> int
override ScottPlot.Plot.GetHashCode() -> int
override ScottPlot.Plottable.ClevelandDotPlot.GetAxisLimits() -> ScottPlot.AxisLimits
override ScottPlot.Plottable.CoordinatedHeatmap.GetAxisLimits() -> ScottPlot.AxisLimits
override ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>.GetAxisLimits() -> ScottPlot.AxisLimits
override ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>.ValidateData(bool deep = false) -> void
override ScottPlot.Styles.Black.AxisLabelColor.get -> System.Drawing.Color
override ScottPlot.Styles.Black.DataBackgroundColor.get -> System.Drawing.Color
override ScottPlot.Styles.Black.FigureBackgroundColor.get -> System.Drawing.Color
override ScottPlot.Styles.Black.FrameColor.get -> System.Drawing.Color
override ScottPlot.Styles.Black.GridLineColor.get -> System.Drawing.Color
override ScottPlot.Styles.Black.TickLabelColor.get -> System.Drawing.Color
override ScottPlot.Styles.Black.TickMajorColor.get -> System.Drawing.Color
override ScottPlot.Styles.Black.TickMinorColor.get -> System.Drawing.Color
override ScottPlot.Styles.Black.TitleFontColor.get -> System.Drawing.Color
override ScottPlot.Styles.Blue1.AxisLabelColor.get -> System.Drawing.Color
override ScottPlot.Styles.Blue1.DataBackgroundColor.get -> System.Drawing.Color
override ScottPlot.Styles.Blue1.FigureBackgroundColor.get -> System.Drawing.Color
override ScottPlot.Styles.Blue1.FrameColor.get -> System.Drawing.Color
override ScottPlot.Styles.Blue1.GridLineColor.get -> System.Drawing.Color
override ScottPlot.Styles.Blue1.TickLabelColor.get -> System.Drawing.Color
override ScottPlot.Styles.Blue1.TickMajorColor.get -> System.Drawing.Color
override ScottPlot.Styles.Blue1.TickMinorColor.get -> System.Drawing.Color
override ScottPlot.Styles.Blue1.TitleFontColor.get -> System.Drawing.Color
override ScottPlot.Styles.Burgundy.AxisLabelColor.get -> System.Drawing.Color
override ScottPlot.Styles.Burgundy.DataBackgroundColor.get -> System.Drawing.Color
override ScottPlot.Styles.Burgundy.FigureBackgroundColor.get -> System.Drawing.Color
override ScottPlot.Styles.Burgundy.FrameColor.get -> System.Drawing.Color
override ScottPlot.Styles.Burgundy.GridLineColor.get -> System.Drawing.Color
override ScottPlot.Styles.Burgundy.TickLabelColor.get -> System.Drawing.Color
override ScottPlot.Styles.Burgundy.TickMajorColor.get -> System.Drawing.Color
override ScottPlot.Styles.Burgundy.TickMinorColor.get -> System.Drawing.Color
override ScottPlot.Styles.Burgundy.TitleFontColor.get -> System.Drawing.Color
override ScottPlot.Styles.Gray1.AxisLabelColor.get -> System.Drawing.Color
override ScottPlot.Styles.Gray1.DataBackgroundColor.get -> System.Drawing.Color
override ScottPlot.Styles.Gray1.FigureBackgroundColor.get -> System.Drawing.Color
override ScottPlot.Styles.Gray1.FrameColor.get -> System.Drawing.Color
override ScottPlot.Styles.Gray1.GridLineColor.get -> System.Drawing.Color
override ScottPlot.Styles.Gray1.TickLabelColor.get -> System.Drawing.Color
override ScottPlot.Styles.Gray1.TickMajorColor.get -> System.Drawing.Color
override ScottPlot.Styles.Gray1.TickMinorColor.get -> System.Drawing.Color
override ScottPlot.Styles.Gray1.TitleFontColor.get -> System.Drawing.Color
override ScottPlot.Styles.Hazel.AxisLabelColor.get -> System.Drawing.Color
override ScottPlot.Styles.Hazel.DataBackgroundColor.get -> System.Drawing.Color
override ScottPlot.Styles.Hazel.FigureBackgroundColor.get -> System.Drawing.Color
override ScottPlot.Styles.Hazel.FrameColor.get -> System.Drawing.Color
override ScottPlot.Styles.Hazel.GridLineColor.get -> System.Drawing.Color
override ScottPlot.Styles.Hazel.TickLabelColor.get -> System.Drawing.Color
override ScottPlot.Styles.Hazel.TickMajorColor.get -> System.Drawing.Color
override ScottPlot.Styles.Hazel.TickMinorColor.get -> System.Drawing.Color
override ScottPlot.Styles.Hazel.TitleFontColor.get -> System.Drawing.Color
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickCentisecond.Floor(System.DateTime value) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickCentisecond.Increment(System.DateTime value, int delta) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickDay.Floor(System.DateTime value) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickDay.Increment(System.DateTime value, int delta) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickHour.Floor(System.DateTime value) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickHour.Increment(System.DateTime value, int delta) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickHundredYear.Floor(System.DateTime value) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickHundredYear.Increment(System.DateTime value, int delta) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMillisecond.Floor(System.DateTime value) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMillisecond.Increment(System.DateTime value, int delta) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMinute.Floor(System.DateTime value) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMinute.Increment(System.DateTime value, int delta) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMonth.Floor(System.DateTime value) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMonth.Increment(System.DateTime value, int delta) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickTenYear.Floor(System.DateTime value) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickTenYear.Increment(System.DateTime value, int delta) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickThousandYear.Floor(System.DateTime value) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickThousandYear.Increment(System.DateTime value, int delta) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickYear.Floor(System.DateTime value) -> System.DateTime
override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickYear.Increment(System.DateTime value, int delta) -> System.DateTime
readonly ScottPlot.AxisLimits.XCenter -> double
readonly ScottPlot.AxisLimits.XMax -> double
readonly ScottPlot.AxisLimits.XMin -> double
readonly ScottPlot.AxisLimits.XSpan -> double
readonly ScottPlot.AxisLimits.YCenter -> double
readonly ScottPlot.AxisLimits.YMax -> double
readonly ScottPlot.AxisLimits.YMin -> double
readonly ScottPlot.AxisLimits.YSpan -> double
readonly ScottPlot.CoordinateRect.XMax -> double
readonly ScottPlot.CoordinateRect.XMin -> double
readonly ScottPlot.CoordinateRect.YMax -> double
readonly ScottPlot.CoordinateRect.YMin -> double
readonly ScottPlot.MultiPlot.cols -> int
readonly ScottPlot.MultiPlot.height -> int
readonly ScottPlot.MultiPlot.rows -> int
readonly ScottPlot.MultiPlot.width -> int
readonly ScottPlot.PlotDimensions.AxisLimits -> ScottPlot.AxisLimits
readonly ScottPlot.PlotDimensions.DataHeight -> float
readonly ScottPlot.PlotDimensions.DataOffsetX -> float
readonly ScottPlot.PlotDimensions.DataOffsetY -> float
readonly ScottPlot.PlotDimensions.DataWidth -> float
readonly ScottPlot.PlotDimensions.Height -> float
readonly ScottPlot.PlotDimensions.PxPerUnitX -> double
readonly ScottPlot.PlotDimensions.PxPerUnitY -> double
readonly ScottPlot.PlotDimensions.ScaleFactor -> double
readonly ScottPlot.PlotDimensions.UnitsPerPxX -> double
readonly ScottPlot.PlotDimensions.UnitsPerPxY -> double
readonly ScottPlot.PlotDimensions.Width -> float
readonly ScottPlot.PlotDimensions.XCenter -> double
readonly ScottPlot.PlotDimensions.XMax -> double
readonly ScottPlot.PlotDimensions.XMin -> double
readonly ScottPlot.PlotDimensions.XSpan -> double
readonly ScottPlot.PlotDimensions.YCenter -> double
readonly ScottPlot.PlotDimensions.YMax -> double
readonly ScottPlot.PlotDimensions.YMin -> double
readonly ScottPlot.PlotDimensions.YSpan -> double
readonly ScottPlot.Plottable.ArrowCoordinated.Base -> ScottPlot.Coordinate
readonly ScottPlot.Plottable.ArrowCoordinated.Tip -> ScottPlot.Coordinate
readonly ScottPlot.StarAxisTick.Location -> double
readonly ScottPlot.Statistics.BasicStats.Count -> int
readonly ScottPlot.Statistics.BasicStats.Max -> double
readonly ScottPlot.Statistics.BasicStats.Mean -> double
readonly ScottPlot.Statistics.BasicStats.Min -> double
readonly ScottPlot.Statistics.BasicStats.StdErr -> double
readonly ScottPlot.Statistics.BasicStats.StDev -> double
readonly ScottPlot.Statistics.BasicStats.Sum -> double
readonly ScottPlot.Statistics.Histogram.binSize -> double
readonly ScottPlot.Statistics.Histogram.mean -> double
readonly ScottPlot.Statistics.Histogram.stdev -> double
readonly ScottPlot.Statistics.Interpolation.MatrixSolver.maxOrder -> int
readonly ScottPlot.Statistics.Interpolation.SplineInterpolator.n -> int
readonly ScottPlot.Statistics.LinearRegressionLine.offset -> double
readonly ScottPlot.Statistics.LinearRegressionLine.rSquared -> double
readonly ScottPlot.Statistics.LinearRegressionLine.slope -> double
readonly ScottPlot.Ticks.Tick.IsDateTime -> bool
readonly ScottPlot.Ticks.Tick.IsMajor -> bool
readonly ScottPlot.Ticks.Tick.Position -> double
ScottPlot.Alignment
ScottPlot.Alignment.LowerCenter = 8 -> ScottPlot.Alignment
ScottPlot.Alignment.LowerLeft = 6 -> ScottPlot.Alignment
ScottPlot.Alignment.LowerRight = 7 -> ScottPlot.Alignment
ScottPlot.Alignment.MiddleCenter = 4 -> ScottPlot.Alignment
ScottPlot.Alignment.MiddleLeft = 3 -> ScottPlot.Alignment
ScottPlot.Alignment.MiddleRight = 5 -> ScottPlot.Alignment
ScottPlot.Alignment.UpperCenter = 2 -> ScottPlot.Alignment
ScottPlot.Alignment.UpperLeft = 0 -> ScottPlot.Alignment
ScottPlot.Alignment.UpperRight = 1 -> ScottPlot.Alignment
ScottPlot.ArrowAnchor
ScottPlot.ArrowAnchor.Base = 0 -> ScottPlot.ArrowAnchor
ScottPlot.ArrowAnchor.Center = 1 -> ScottPlot.ArrowAnchor
ScottPlot.ArrowAnchor.Tip = 2 -> ScottPlot.ArrowAnchor
ScottPlot.AxisLimits
ScottPlot.AxisLimits.AxisLimits() -> void
ScottPlot.AxisLimits.AxisLimits(double xMin, double xMax, double yMin, double yMax) -> void
ScottPlot.AxisLimits.Contains(ScottPlot.Coordinate coordinate) -> bool
ScottPlot.AxisLimits.Equals(ScottPlot.AxisLimits other) -> bool
ScottPlot.AxisLimits.Expand(ScottPlot.AxisLimits limits) -> ScottPlot.AxisLimits
ScottPlot.Control.Configuration
ScottPlot.Control.Configuration.AllowDroppedFramesWhileDragging -> bool
ScottPlot.Control.Configuration.AxesChangedEventEnabled -> bool
ScottPlot.Control.Configuration.Configuration() -> void
ScottPlot.Control.Configuration.DefaultCursor.get -> ScottPlot.Cursor
ScottPlot.Control.Configuration.DefaultCursor.set -> void
ScottPlot.Control.Configuration.DoubleClickBenchmark -> bool
ScottPlot.Control.Configuration.DpiMeasure() -> void
ScottPlot.Control.Configuration.DpiStretch.get -> bool
ScottPlot.Control.Configuration.DpiStretch.set -> void
ScottPlot.Control.Configuration.DpiStretchRatio.get -> float
ScottPlot.Control.Configuration.DpiStretchRatio.set -> void
ScottPlot.Control.Configuration.EnablePlotObjectEditor.get -> bool
ScottPlot.Control.Configuration.EnablePlotObjectEditor.set -> void
ScottPlot.Control.Configuration.IgnoreMouseDragDistance -> int
ScottPlot.Control.Configuration.LeftClickDragPan -> bool
ScottPlot.Control.Configuration.LockHorizontalAxis -> bool
ScottPlot.Control.Configuration.LockVerticalAxis -> bool
ScottPlot.Control.Configuration.MiddleClickAutoAxis -> bool
ScottPlot.Control.Configuration.MiddleClickAutoAxisMarginX -> double
ScottPlot.Control.Configuration.MiddleClickAutoAxisMarginY -> double
ScottPlot.Control.Configuration.MiddleClickDragZoom -> bool
ScottPlot.Control.Configuration.Pan.get -> bool
ScottPlot.Control.Configuration.Pan.set -> void
ScottPlot.Control.Configuration.Quality -> ScottPlot.Control.QualityMode
ScottPlot.Control.Configuration.RenderIfPlottableListChanges -> bool
ScottPlot.Control.Configuration.RightClickDragZoom -> bool
ScottPlot.Control.Configuration.ScaleChanged -> System.EventHandler
ScottPlot.Control.Configuration.ScrollWheelZoom -> bool
ScottPlot.Control.Configuration.ScrollWheelZoomFraction.get -> double
ScottPlot.Control.Configuration.ScrollWheelZoomFraction.set -> void
ScottPlot.Control.Configuration.ScrollWheelZoomHighQualityDelay -> double
ScottPlot.Control.Configuration.UseRenderQueue -> bool
ScottPlot.Control.Configuration.WarnIfRenderNotCalledManually.get -> bool
ScottPlot.Control.Configuration.WarnIfRenderNotCalledManually.set -> void
ScottPlot.Control.Configuration.Zoom.get -> bool
ScottPlot.Control.Configuration.Zoom.set -> void
ScottPlot.Control.ControlBackEnd
ScottPlot.Control.ControlBackEnd.AxesChanged -> System.EventHandler
ScottPlot.Control.ControlBackEnd.BitmapChanged -> System.EventHandler
ScottPlot.Control.ControlBackEnd.BitmapUpdated -> System.EventHandler
ScottPlot.Control.ControlBackEnd.Cursor.get -> ScottPlot.Cursor
ScottPlot.Control.ControlBackEnd.CursorChanged -> System.EventHandler
ScottPlot.Control.ControlBackEnd.DoubleClick() -> void
ScottPlot.Control.ControlBackEnd.GetMouseCoordinates(int xAxisIndex = 0, int yAxisIndex = 0) -> (double x, double y)
ScottPlot.Control.ControlBackEnd.GetMousePixel() -> (float x, float y)
ScottPlot.Control.ControlBackEnd.LeftClicked -> System.EventHandler
ScottPlot.Control.ControlBackEnd.LeftClickedPlottable -> System.EventHandler
ScottPlot.Control.ControlBackEnd.MouseDownDragged.get -> bool
ScottPlot.Control.ControlBackEnd.PlottableDragged -> System.EventHandler
ScottPlot.Control.ControlBackEnd.PlottableDropped -> System.EventHandler
ScottPlot.Control.ControlBackEnd.Render(bool lowQuality = false, bool skipIfCurrentlyRendering = false) -> void
ScottPlot.Control.ControlBackEnd.RenderCount.get -> int
ScottPlot.Control.ControlBackEnd.RenderIfPlottableListChanged() -> void
ScottPlot.Control.ControlBackEnd.RenderRequest(ScottPlot.RenderType renderType) -> void
ScottPlot.Control.ControlBackEnd.Reset(float width, float height) -> void
ScottPlot.Control.ControlBackEnd.Resize(float width, float height, bool useDelayedRendering) -> void
ScottPlot.Control.ControlBackEnd.RightClicked -> System.EventHandler
ScottPlot.Control.ControlBackEnd.StartProcessingEvents() -> void
ScottPlot.Control.ControlBackEnd.WasManuallyRendered -> bool
ScottPlot.Control.DisplayScale
ScottPlot.Control.DisplayScale.DisplayScale() -> void
ScottPlot.Control.DisplayScale.Enabled.get -> bool
ScottPlot.Control.DisplayScale.Enabled.set -> void
ScottPlot.Control.DisplayScale.ManualScaleRatio.get -> float
ScottPlot.Control.DisplayScale.Measure() -> void
ScottPlot.Control.DisplayScale.ScaleChanged -> System.EventHandler
ScottPlot.Control.DisplayScale.ScaleRatio.get -> float
ScottPlot.Control.DisplayScale.SystemScaleRatio.get -> float
ScottPlot.Control.EventProcess.Events.ApplyZoomRectangleEvent
ScottPlot.Control.EventProcess.Events.ApplyZoomRectangleEvent.ProcessEvent() -> void
ScottPlot.Control.EventProcess.Events.ApplyZoomRectangleEvent.RenderType.get -> ScottPlot.RenderType
ScottPlot.Control.EventProcess.Events.BenchmarkToggleEvent
ScottPlot.Control.EventProcess.Events.BenchmarkToggleEvent.ProcessEvent() -> void
ScottPlot.Control.EventProcess.Events.BenchmarkToggleEvent.RenderType.get -> ScottPlot.RenderType
ScottPlot.Control.EventProcess.Events.MouseAxisAutoEvent
ScottPlot.Control.EventProcess.Events.MouseAxisAutoEvent.ProcessEvent() -> void
ScottPlot.Control.EventProcess.Events.MouseAxisAutoEvent.RenderType.get -> ScottPlot.RenderType
ScottPlot.Control.EventProcess.Events.MouseMovedToZoomRectangle
ScottPlot.Control.EventProcess.Events.MouseMovedToZoomRectangle.ProcessEvent() -> void
ScottPlot.Control.EventProcess.Events.MouseMovedToZoomRectangle.RenderType.get -> ScottPlot.RenderType
ScottPlot.Control.EventProcess.Events.MousePanEvent
ScottPlot.Control.EventProcess.Events.MousePanEvent.ProcessEvent() -> void
ScottPlot.Control.EventProcess.Events.MousePanEvent.RenderType.get -> ScottPlot.RenderType
ScottPlot.Control.EventProcess.Events.MouseScrollEvent
ScottPlot.Control.EventProcess.Events.MouseScrollEvent.ProcessEvent() -> void
ScottPlot.Control.EventProcess.Events.MouseScrollEvent.RenderType.get -> ScottPlot.RenderType
ScottPlot.Control.EventProcess.Events.MouseUpClearRenderEvent
ScottPlot.Control.EventProcess.Events.MouseUpClearRenderEvent.ProcessEvent() -> void
ScottPlot.Control.EventProcess.Events.MouseUpClearRenderEvent.RenderType.get -> ScottPlot.RenderType
ScottPlot.Control.EventProcess.Events.MouseZoomEvent
ScottPlot.Control.EventProcess.Events.MouseZoomEvent.ProcessEvent() -> void
ScottPlot.Control.EventProcess.Events.MouseZoomEvent.RenderType.get -> ScottPlot.RenderType
ScottPlot.Control.EventProcess.Events.PlottableDragEvent
ScottPlot.Control.EventProcess.Events.PlottableDragEvent.ProcessEvent() -> void
ScottPlot.Control.EventProcess.Events.PlottableDragEvent.RenderType.get -> ScottPlot.RenderType
ScottPlot.Control.EventProcess.EventsProcessor
ScottPlot.Control.EventProcess.EventsProcessor.Enable -> bool
ScottPlot.Control.EventProcess.EventsProcessor.RenderDelayMilliseconds.get -> int
ScottPlot.Control.EventProcess.EventsProcessor.RenderDelayMilliseconds.set -> void
ScottPlot.Control.EventProcess.IUIEvent
ScottPlot.Control.EventProcess.IUIEvent.ProcessEvent() -> void
ScottPlot.Control.EventProcess.IUIEvent.RenderType.get -> ScottPlot.RenderType
ScottPlot.Control.EventProcess.UIEventFactory
ScottPlot.Control.InputState
ScottPlot.Control.InputState.AltDown.get -> bool
ScottPlot.Control.InputState.AltDown.set -> void
ScottPlot.Control.InputState.ButtonDown.get -> bool
ScottPlot.Control.InputState.CtrlDown.get -> bool
ScottPlot.Control.InputState.CtrlDown.set -> void
ScottPlot.Control.InputState.InputState() -> void
ScottPlot.Control.InputState.LeftWasJustPressed.get -> bool
ScottPlot.Control.InputState.LeftWasJustPressed.set -> void
ScottPlot.Control.InputState.MiddleWasJustPressed.get -> bool
ScottPlot.Control.InputState.MiddleWasJustPressed.set -> void
ScottPlot.Control.InputState.RightWasJustPressed.get -> bool
ScottPlot.Control.InputState.RightWasJustPressed.set -> void
ScottPlot.Control.InputState.ShiftDown.get -> bool
ScottPlot.Control.InputState.ShiftDown.set -> void
ScottPlot.Control.InputState.WheelScrolledDown.get -> bool
ScottPlot.Control.InputState.WheelScrolledDown.set -> void
ScottPlot.Control.InputState.WheelScrolledUp.get -> bool
ScottPlot.Control.InputState.WheelScrolledUp.set -> void
ScottPlot.Control.InputState.X.get -> float
ScottPlot.Control.InputState.X.set -> void
ScottPlot.Control.InputState.Y.get -> float
ScottPlot.Control.InputState.Y.set -> void
ScottPlot.Control.QualityConfiguration
ScottPlot.Control.QualityConfiguration.AutoAxis -> ScottPlot.RenderType
ScottPlot.Control.QualityConfiguration.BenchmarkToggle -> ScottPlot.RenderType
ScottPlot.Control.QualityConfiguration.MouseInteractiveDragged -> ScottPlot.RenderType
ScottPlot.Control.QualityConfiguration.MouseInteractiveDropped -> ScottPlot.RenderType
ScottPlot.Control.QualityConfiguration.MouseWheelScrolled -> ScottPlot.RenderType
ScottPlot.Control.QualityConfiguration.QualityConfiguration() -> void
ScottPlot.Control.QualityMode
ScottPlot.Control.QualityMode.High = 2 -> ScottPlot.Control.QualityMode
ScottPlot.Control.QualityMode.Low = 0 -> ScottPlot.Control.QualityMode
ScottPlot.Control.QualityMode.LowWhileDragging = 1 -> ScottPlot.Control.QualityMode
ScottPlot.Coordinate
ScottPlot.Coordinate.Coordinate() -> void
ScottPlot.Coordinate.Coordinate(double x, double y) -> void
ScottPlot.Coordinate.Distance(ScottPlot.Coordinate other) -> double
ScottPlot.Coordinate.IsFinite() -> bool
ScottPlot.Coordinate.X -> double
ScottPlot.Coordinate.Y -> double
ScottPlot.CoordinateRect
ScottPlot.CoordinateRect.Area.get -> double
ScottPlot.CoordinateRect.Contains(double x, double y) -> bool
ScottPlot.CoordinateRect.Contains(ScottPlot.Coordinate coord) -> bool
ScottPlot.CoordinateRect.CoordinateRect(double x1, double x2, double y1, double y2) -> void
ScottPlot.CoordinateRect.HasArea.get -> bool
ScottPlot.CoordinateRect.Height.get -> double
ScottPlot.CoordinateRect.Width.get -> double
ScottPlot.CoordinateVector
ScottPlot.CoordinateVector.CoordinateVector() -> void
ScottPlot.CoordinateVector.CoordinateVector(double x, double y) -> void
ScottPlot.CoordinateVector.Magnitude.get -> double
ScottPlot.CoordinateVector.X.get -> double
ScottPlot.CoordinateVector.X.set -> void
ScottPlot.CoordinateVector.Y.get -> double
ScottPlot.CoordinateVector.Y.set -> void
ScottPlot.Cursor
ScottPlot.Cursor.All = 5 -> ScottPlot.Cursor
ScottPlot.Cursor.Arrow = 0 -> ScottPlot.Cursor
ScottPlot.Cursor.Crosshair = 1 -> ScottPlot.Cursor
ScottPlot.Cursor.Hand = 2 -> ScottPlot.Cursor
ScottPlot.Cursor.NS = 4 -> ScottPlot.Cursor
ScottPlot.Cursor.Question = 6 -> ScottPlot.Cursor
ScottPlot.Cursor.WE = 3 -> ScottPlot.Cursor
ScottPlot.DataGen
ScottPlot.DataGen.Electrocardiogram
ScottPlot.DataGen.Electrocardiogram.Electrocardiogram(double heartRate = 72) -> void
ScottPlot.DataGen.Electrocardiogram.GetVoltage(double elapsedSeconds) -> double
ScottPlot.DataGen.Electrocardiogram.HeartRate.get -> double
ScottPlot.DataGen.Electrocardiogram.HeartRate.set -> void
ScottPlot.DataGen.Electrocardiogram.Period.get -> double
ScottPlot.DataGen.Electrocardiogram.Period.set -> void
ScottPlot.DataGen.Electrocardiogram.PWaveAmplitude.get -> double
ScottPlot.DataGen.Electrocardiogram.PWaveAmplitude.set -> void
ScottPlot.DataGen.Electrocardiogram.PWaveDuration.get -> double
ScottPlot.DataGen.Electrocardiogram.PWaveDuration.set -> void
ScottPlot.DataGen.Electrocardiogram.PWavePRInterval.get -> double
ScottPlot.DataGen.Electrocardiogram.PWavePRInterval.set -> void
ScottPlot.DataGen.Electrocardiogram.QRSWaveAmplitude.get -> double
ScottPlot.DataGen.Electrocardiogram.QRSWaveAmplitude.set -> void
ScottPlot.DataGen.Electrocardiogram.QRSwaveDuration.get -> double
ScottPlot.DataGen.Electrocardiogram.QRSwaveDuration.set -> void
ScottPlot.DataGen.Electrocardiogram.QWaveAmplitude.get -> double
ScottPlot.DataGen.Electrocardiogram.QWaveAmplitude.set -> void
ScottPlot.DataGen.Electrocardiogram.QwaveDuration.get -> double
ScottPlot.DataGen.Electrocardiogram.QwaveDuration.set -> void
ScottPlot.DataGen.Electrocardiogram.QWaveTime.get -> double
ScottPlot.DataGen.Electrocardiogram.QWaveTime.set -> void
ScottPlot.DataGen.Electrocardiogram.SWaveAmplitude.get -> double
ScottPlot.DataGen.Electrocardiogram.SWaveAmplitude.set -> void
ScottPlot.DataGen.Electrocardiogram.SWaveDuration.get -> double
ScottPlot.DataGen.Electrocardiogram.SWaveDuration.set -> void
ScottPlot.DataGen.Electrocardiogram.SWaveTime.get -> double
ScottPlot.DataGen.Electrocardiogram.SWaveTime.set -> void
ScottPlot.DataGen.Electrocardiogram.TWaveAmplitude.get -> double
ScottPlot.DataGen.Electrocardiogram.TWaveAmplitude.set -> void
ScottPlot.DataGen.Electrocardiogram.TWaveDuration.get -> double
ScottPlot.DataGen.Electrocardiogram.TWaveDuration.set -> void
ScottPlot.DataGen.Electrocardiogram.TWaveSTInterval.get -> double
ScottPlot.DataGen.Electrocardiogram.TWaveSTInterval.set -> void
ScottPlot.DataGen.Electrocardiogram.UWaveAmplitude.get -> double
ScottPlot.DataGen.Electrocardiogram.UWaveAmplitude.set -> void
ScottPlot.DataGen.Electrocardiogram.UWaveDuration.get -> double
ScottPlot.DataGen.Electrocardiogram.UWaveDuration.set -> void
ScottPlot.DataGen.Electrocardiogram.UWaveTime.get -> double
ScottPlot.DataGen.Electrocardiogram.UWaveTime.set -> void
ScottPlot.DataSet
ScottPlot.DataStructures.SegmentedTree<T>.MinMaxRangeQuery(int l, int r, out double lowestValue, out double highestValue) -> void
ScottPlot.DataStructures.SegmentedTree<T>.SegmentedTree() -> void
ScottPlot.DataStructures.SegmentedTree<T>.TreesReady -> bool
ScottPlot.DataStructures.SegmentedTree<T>.updateElement(int index, T newValue) -> void
ScottPlot.DataStructures.SegmentedTree<T>.UpdateTrees() -> void
ScottPlot.DataStructures.SegmentedTree<T>.UpdateTreesInBackground() -> void
ScottPlot.Drawing.Colormap
ScottPlot.Drawing.Colormap.GetColor(byte value, double alpha = 1) -> System.Drawing.Color
ScottPlot.Drawing.Colormap.GetColor(double fraction, double alpha = 1) -> System.Drawing.Color
ScottPlot.Drawing.Colormap.GetInt32(byte value, byte alpha = 255) -> int
ScottPlot.Drawing.Colormap.GetInt32(double fraction, byte alpha = 255) -> int
ScottPlot.Drawing.Colormap.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormap.GetRGB(double fraction) -> (byte r, byte g, byte b)
ScottPlot.Drawing.ColormapFactory
ScottPlot.Drawing.ColormapFactory.ColormapFactory() -> void
ScottPlot.Drawing.Colormaps.Algae
ScottPlot.Drawing.Colormaps.Algae.Algae() -> void
ScottPlot.Drawing.Colormaps.Algae.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Amp
ScottPlot.Drawing.Colormaps.Amp.Amp() -> void
ScottPlot.Drawing.Colormaps.Amp.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Balance
ScottPlot.Drawing.Colormaps.Balance.Balance() -> void
ScottPlot.Drawing.Colormaps.Balance.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Blues
ScottPlot.Drawing.Colormaps.Blues.Blues() -> void
ScottPlot.Drawing.Colormaps.Blues.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Curl
ScottPlot.Drawing.Colormaps.Curl.Curl() -> void
ScottPlot.Drawing.Colormaps.Curl.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Deep
ScottPlot.Drawing.Colormaps.Deep.Deep() -> void
ScottPlot.Drawing.Colormaps.Deep.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Delta
ScottPlot.Drawing.Colormaps.Delta.Delta() -> void
ScottPlot.Drawing.Colormaps.Delta.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Dense
ScottPlot.Drawing.Colormaps.Dense.Dense() -> void
ScottPlot.Drawing.Colormaps.Dense.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Diff
ScottPlot.Drawing.Colormaps.Diff.Diff() -> void
ScottPlot.Drawing.Colormaps.Diff.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Grayscale
ScottPlot.Drawing.Colormaps.Grayscale.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Grayscale.Grayscale() -> void
ScottPlot.Drawing.Colormaps.GrayscaleR
ScottPlot.Drawing.Colormaps.GrayscaleR.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.GrayscaleR.GrayscaleR() -> void
ScottPlot.Drawing.Colormaps.Greens
ScottPlot.Drawing.Colormaps.Greens.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Greens.Greens() -> void
ScottPlot.Drawing.Colormaps.Haline
ScottPlot.Drawing.Colormaps.Haline.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Haline.Haline() -> void
ScottPlot.Drawing.Colormaps.Ice
ScottPlot.Drawing.Colormaps.Ice.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Ice.Ice() -> void
ScottPlot.Drawing.Colormaps.Inferno
ScottPlot.Drawing.Colormaps.Inferno.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Inferno.Inferno() -> void
ScottPlot.Drawing.Colormaps.Jet
ScottPlot.Drawing.Colormaps.Jet.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Jet.Jet() -> void
ScottPlot.Drawing.Colormaps.Magma
ScottPlot.Drawing.Colormaps.Magma.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Magma.Magma() -> void
ScottPlot.Drawing.Colormaps.Matter
ScottPlot.Drawing.Colormaps.Matter.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Matter.Matter() -> void
ScottPlot.Drawing.Colormaps.Oxy
ScottPlot.Drawing.Colormaps.Oxy.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Oxy.Oxy() -> void
ScottPlot.Drawing.Colormaps.Phase
ScottPlot.Drawing.Colormaps.Phase.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Phase.Phase() -> void
ScottPlot.Drawing.Colormaps.Plasma
ScottPlot.Drawing.Colormaps.Plasma.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Plasma.Plasma() -> void
ScottPlot.Drawing.Colormaps.Rain
ScottPlot.Drawing.Colormaps.Rain.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Rain.Rain() -> void
ScottPlot.Drawing.Colormaps.Solar
ScottPlot.Drawing.Colormaps.Solar.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Solar.Solar() -> void
ScottPlot.Drawing.Colormaps.Speed
ScottPlot.Drawing.Colormaps.Speed.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Speed.Speed() -> void
ScottPlot.Drawing.Colormaps.Tarn
ScottPlot.Drawing.Colormaps.Tarn.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Tarn.Tarn() -> void
ScottPlot.Drawing.Colormaps.Tempo
ScottPlot.Drawing.Colormaps.Tempo.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Tempo.Tempo() -> void
ScottPlot.Drawing.Colormaps.Thermal
ScottPlot.Drawing.Colormaps.Thermal.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Thermal.Thermal() -> void
ScottPlot.Drawing.Colormaps.Topo
ScottPlot.Drawing.Colormaps.Topo.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Topo.Topo() -> void
ScottPlot.Drawing.Colormaps.Turbid
ScottPlot.Drawing.Colormaps.Turbid.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Turbid.Turbid() -> void
ScottPlot.Drawing.Colormaps.Turbo
ScottPlot.Drawing.Colormaps.Turbo.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Turbo.Turbo() -> void
ScottPlot.Drawing.Colormaps.Viridis
ScottPlot.Drawing.Colormaps.Viridis.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.Colormaps.Viridis.Viridis() -> void
ScottPlot.Drawing.Font
ScottPlot.Drawing.Font.Alignment -> ScottPlot.Alignment
ScottPlot.Drawing.Font.Bold -> bool
ScottPlot.Drawing.Font.Color -> System.Drawing.Color
ScottPlot.Drawing.Font.Font() -> void
ScottPlot.Drawing.Font.Rotation -> float
ScottPlot.Drawing.Font.Size -> float
ScottPlot.Drawing.GDI
ScottPlot.Drawing.HatchStyle
ScottPlot.Drawing.HatchStyle.DottedDiamond = 9 -> ScottPlot.Drawing.HatchStyle
ScottPlot.Drawing.HatchStyle.LargeCheckerBoard = 5 -> ScottPlot.Drawing.HatchStyle
ScottPlot.Drawing.HatchStyle.LargeGrid = 7 -> ScottPlot.Drawing.HatchStyle
ScottPlot.Drawing.HatchStyle.None = 0 -> ScottPlot.Drawing.HatchStyle
ScottPlot.Drawing.HatchStyle.SmallCheckerBoard = 6 -> ScottPlot.Drawing.HatchStyle
ScottPlot.Drawing.HatchStyle.SmallGrid = 8 -> ScottPlot.Drawing.HatchStyle
ScottPlot.Drawing.HatchStyle.StripedDownwardDiagonal = 2 -> ScottPlot.Drawing.HatchStyle
ScottPlot.Drawing.HatchStyle.StripedUpwardDiagonal = 1 -> ScottPlot.Drawing.HatchStyle
ScottPlot.Drawing.HatchStyle.StripedWideDownwardDiagonal = 4 -> ScottPlot.Drawing.HatchStyle
ScottPlot.Drawing.HatchStyle.StripedWideUpwardDiagonal = 3 -> ScottPlot.Drawing.HatchStyle
ScottPlot.Drawing.IColormap
ScottPlot.Drawing.IColormap.GetRGB(byte value) -> (byte r, byte g, byte b)
ScottPlot.Drawing.InstalledFont
ScottPlot.Drawing.Palette
ScottPlot.Drawing.Palette.Palette() -> void
ScottPlot.Drawing.Tools
ScottPlot.EqualScaleMode
ScottPlot.EqualScaleMode.Disabled = 0 -> ScottPlot.EqualScaleMode
ScottPlot.EqualScaleMode.PreserveLargest = 4 -> ScottPlot.EqualScaleMode
ScottPlot.EqualScaleMode.PreserveSmallest = 5 -> ScottPlot.EqualScaleMode
ScottPlot.EqualScaleMode.PreserveX = 2 -> ScottPlot.EqualScaleMode
ScottPlot.EqualScaleMode.PreserveY = 1 -> ScottPlot.EqualScaleMode
ScottPlot.EqualScaleMode.ZoomOut = 3 -> ScottPlot.EqualScaleMode
ScottPlot.FillType
ScottPlot.FillType.FillAbove = 1 -> ScottPlot.FillType
ScottPlot.FillType.FillAboveAndBelow = 3 -> ScottPlot.FillType
ScottPlot.FillType.FillBelow = 2 -> ScottPlot.FillType
ScottPlot.FillType.NoFill = 0 -> ScottPlot.FillType
ScottPlot.HatchOptions
ScottPlot.HatchOptions.Color.get -> System.Drawing.Color
ScottPlot.HatchOptions.Color.set -> void
ScottPlot.HatchOptions.HatchOptions() -> void
ScottPlot.HatchOptions.Pattern.get -> ScottPlot.Drawing.HatchStyle
ScottPlot.HatchOptions.Pattern.set -> void
ScottPlot.Histogram
ScottPlot.HorizontalAlignment
ScottPlot.HorizontalAlignment.Center = 2 -> ScottPlot.HorizontalAlignment
ScottPlot.HorizontalAlignment.Left = 0 -> ScottPlot.HorizontalAlignment
ScottPlot.HorizontalAlignment.Right = 1 -> ScottPlot.HorizontalAlignment
ScottPlot.ImageAlignment
ScottPlot.ImagePlacement
ScottPlot.ImagePlacement.Inside = 1 -> ScottPlot.ImagePlacement
ScottPlot.ImagePlacement.Outside = 0 -> ScottPlot.ImagePlacement
ScottPlot.IMarker
ScottPlot.IntensityMode
ScottPlot.IntensityMode.Density = 1 -> ScottPlot.IntensityMode
ScottPlot.IntensityMode.Gaussian = 0 -> ScottPlot.IntensityMode
ScottPlot.IPalette
ScottPlot.IPalette.Count() -> int
ScottPlot.IPalette.GetColor(int index) -> System.Drawing.Color
ScottPlot.IPalette.GetColor(int index, double alpha = 1) -> System.Drawing.Color
ScottPlot.IPalette.GetRGB(int index) -> (byte r, byte g, byte b)
ScottPlot.legendLocation
ScottPlot.LineStyle
ScottPlot.LineStyle.Dash = 2 -> ScottPlot.LineStyle
ScottPlot.LineStyle.DashDot = 3 -> ScottPlot.LineStyle
ScottPlot.LineStyle.DashDotDot = 4 -> ScottPlot.LineStyle
ScottPlot.LineStyle.Dot = 5 -> ScottPlot.LineStyle
ScottPlot.LineStyle.None = 0 -> ScottPlot.LineStyle
ScottPlot.LineStyle.Solid = 1 -> ScottPlot.LineStyle
ScottPlot.Marker
ScottPlot.MarkerShape
ScottPlot.MarkerShape.asterisk = 7 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.cross = 9 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.eks = 10 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.filledCircle = 1 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.filledDiamond = 5 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.filledSquare = 2 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.filledTriangleDown = 15 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.filledTriangleUp = 14 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.hashTag = 8 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.none = 0 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.openCircle = 3 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.openDiamond = 6 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.openSquare = 4 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.openTriangleDown = 17 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.openTriangleUp = 16 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.triDown = 13 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.triUp = 12 -> ScottPlot.MarkerShape
ScottPlot.MarkerShape.verticalBar = 11 -> ScottPlot.MarkerShape
ScottPlot.MarkerShapes.Asterisk
ScottPlot.MarkerShapes.Asterisk.Asterisk() -> void
ScottPlot.MarkerShapes.Cross
ScottPlot.MarkerShapes.Cross.Cross() -> void
ScottPlot.MarkerShapes.Eks
ScottPlot.MarkerShapes.Eks.Eks() -> void
ScottPlot.MarkerShapes.FilledCircle
ScottPlot.MarkerShapes.FilledCircle.FilledCircle() -> void
ScottPlot.MarkerShapes.FilledDiamond
ScottPlot.MarkerShapes.FilledDiamond.FilledDiamond() -> void
ScottPlot.MarkerShapes.FilledSquare
ScottPlot.MarkerShapes.FilledSquare.FilledSquare() -> void
ScottPlot.MarkerShapes.FilledTriangleDown
ScottPlot.MarkerShapes.FilledTriangleDown.FilledTriangleDown() -> void
ScottPlot.MarkerShapes.FilledTriangleUp
ScottPlot.MarkerShapes.FilledTriangleUp.FilledTriangleUp() -> void
ScottPlot.MarkerShapes.Hashtag
ScottPlot.MarkerShapes.Hashtag.Hashtag() -> void
ScottPlot.MarkerShapes.HorizontalBar
ScottPlot.MarkerShapes.HorizontalBar.HorizontalBar() -> void
ScottPlot.MarkerShapes.None
ScottPlot.MarkerShapes.None.None() -> void
ScottPlot.MarkerShapes.OpenCircle
ScottPlot.MarkerShapes.OpenCircle.OpenCircle() -> void
ScottPlot.MarkerShapes.OpenDiamond
ScottPlot.MarkerShapes.OpenDiamond.OpenDiamond() -> void
ScottPlot.MarkerShapes.OpenSquare
ScottPlot.MarkerShapes.OpenSquare.OpenSquare() -> void
ScottPlot.MarkerShapes.OpenTriangleDown
ScottPlot.MarkerShapes.OpenTriangleDown.OpenTriangleDown() -> void
ScottPlot.MarkerShapes.OpenTriangleUp
ScottPlot.MarkerShapes.OpenTriangleUp.OpenTriangleUp() -> void
ScottPlot.MarkerShapes.TriStarDown
ScottPlot.MarkerShapes.TriStarDown.TriStarDown() -> void
ScottPlot.MarkerShapes.TriStarUp
ScottPlot.MarkerShapes.TriStarUp.TriStarUp() -> void
ScottPlot.MarkerShapes.VerticalBar
ScottPlot.MarkerShapes.VerticalBar.VerticalBar() -> void
ScottPlot.MarkerTools
ScottPlot.MinMaxSearchStrategies.IMinMaxSearchStrategy<T>
ScottPlot.MinMaxSearchStrategies.IMinMaxSearchStrategy<T>.MinMaxRangeQuery(int l, int r, out double lowestValue, out double highestValue) -> void
ScottPlot.MinMaxSearchStrategies.IMinMaxSearchStrategy<T>.SourceElement(int index) -> double
ScottPlot.MinMaxSearchStrategies.IMinMaxSearchStrategy<T>.updateElement(int index, T newValue) -> void
ScottPlot.MinMaxSearchStrategies.LinearDoubleOnlyMinMaxStrategy
ScottPlot.MinMaxSearchStrategies.LinearDoubleOnlyMinMaxStrategy.LinearDoubleOnlyMinMaxStrategy() -> void
ScottPlot.MinMaxSearchStrategies.LinearDoubleOnlyMinMaxStrategy.MinMaxRangeQuery(int l, int r, out double lowestValue, out double highestValue) -> void
ScottPlot.MinMaxSearchStrategies.LinearDoubleOnlyMinMaxStrategy.SourceElement(int index) -> double
ScottPlot.MinMaxSearchStrategies.LinearDoubleOnlyMinMaxStrategy.updateElement(int index, double newValue) -> void
ScottPlot.MinMaxSearchStrategies.LinearFastDoubleMinMaxSearchStrategy<T>.LinearFastDoubleMinMaxSearchStrategy() -> void
ScottPlot.MinMaxSearchStrategies.LinearMinMaxSearchStrategy<T>.LinearMinMaxSearchStrategy() -> void
ScottPlot.MinMaxSearchStrategies.LinearMinMaxSearchStrategy<T>.updateElement(int index, T newValue) -> void
ScottPlot.MinMaxSearchStrategies.SegmentedTreeMinMaxSearchStrategy<T>.MinMaxRangeQuery(int l, int r, out double lowestValue, out double highestValue) -> void
ScottPlot.MinMaxSearchStrategies.SegmentedTreeMinMaxSearchStrategy<T>.SegmentedTreeMinMaxSearchStrategy() -> void
ScottPlot.MinMaxSearchStrategies.SegmentedTreeMinMaxSearchStrategy<T>.SourceElement(int index) -> double
ScottPlot.MinMaxSearchStrategies.SegmentedTreeMinMaxSearchStrategy<T>.TreesReady.get -> bool
ScottPlot.MinMaxSearchStrategies.SegmentedTreeMinMaxSearchStrategy<T>.updateElement(int index, T newValue) -> void
ScottPlot.MultiPlot
ScottPlot.MultiPlot.MultiPlot(int width = 800, int height = 600, int rows = 1, int cols = 1) -> void
ScottPlot.MultiPlot.subplotCount.get -> int
ScottPlot.MultiPlot.subplotHeight.get -> int
ScottPlot.MultiPlot.subplotWidth.get -> int
ScottPlot.NumericConversion
ScottPlot.OHLC
ScottPlot.OHLC.Close -> double
ScottPlot.OHLC.DateTime -> System.DateTime
ScottPlot.OHLC.High -> double
ScottPlot.OHLC.IsValid.get -> bool
ScottPlot.OHLC.Low -> double
ScottPlot.OHLC.OHLC(double open, double high, double low, double close, double timeStart, double timeSpan = 1, double volume = 0) -> void
ScottPlot.OHLC.OHLC(double open, double high, double low, double close, System.DateTime timeStart, System.TimeSpan timeSpan, double volume = 0) -> void
ScottPlot.OHLC.Open -> double
ScottPlot.OHLC.TimeSpan -> System.TimeSpan
ScottPlot.OHLC.Volume -> double
ScottPlot.Orientation
ScottPlot.Orientation.Horizontal = 0 -> ScottPlot.Orientation
ScottPlot.Orientation.Vertical = 1 -> ScottPlot.Orientation
ScottPlot.Palette
ScottPlot.Palettes.Amber
ScottPlot.Palettes.Amber.Amber() -> void
ScottPlot.Palettes.Aurora
ScottPlot.Palettes.Aurora.Aurora() -> void
ScottPlot.Palettes.Building
ScottPlot.Palettes.Building.Building() -> void
ScottPlot.Palettes.Category10
ScottPlot.Palettes.Category10.Category10() -> void
ScottPlot.Palettes.Category20
ScottPlot.Palettes.Category20.Category20() -> void
ScottPlot.Palettes.ColorblindFriendly
ScottPlot.Palettes.ColorblindFriendly.ColorblindFriendly() -> void
ScottPlot.Palettes.Custom
ScottPlot.Palettes.Dark
ScottPlot.Palettes.Dark.Dark() -> void
ScottPlot.Palettes.DarkPastel
ScottPlot.Palettes.DarkPastel.DarkPastel() -> void
ScottPlot.Palettes.Frost
ScottPlot.Palettes.Frost.Frost() -> void
ScottPlot.Palettes.HexPaletteBase
ScottPlot.Palettes.HexPaletteBase.HexPaletteBase() -> void
ScottPlot.Palettes.LightOcean
ScottPlot.Palettes.LightOcean.LightOcean() -> void
ScottPlot.Palettes.LightSpectrum
ScottPlot.Palettes.LightSpectrum.LightSpectrum() -> void
ScottPlot.Palettes.Microcharts
ScottPlot.Palettes.Microcharts.Microcharts() -> void
ScottPlot.Palettes.Nero
ScottPlot.Palettes.Nero.Nero() -> void
ScottPlot.Palettes.Nord
ScottPlot.Palettes.Nord.Nord() -> void
ScottPlot.Palettes.Normal
ScottPlot.Palettes.Normal.Normal() -> void
ScottPlot.Palettes.OneHalf
ScottPlot.Palettes.OneHalf.OneHalf() -> void
ScottPlot.Palettes.OneHalfDark
ScottPlot.Palettes.OneHalfDark.OneHalfDark() -> void
ScottPlot.Palettes.PaletteBase
ScottPlot.Palettes.PaletteBase.Count() -> int
ScottPlot.Palettes.PaletteBase.GetColor(int index) -> System.Drawing.Color
ScottPlot.Palettes.PaletteBase.GetColor(int index, double alpha = 1) -> System.Drawing.Color
ScottPlot.Palettes.PaletteBase.GetRGB(int index) -> (byte r, byte g, byte b)
ScottPlot.Palettes.PaletteBase.Length.get -> int
ScottPlot.Palettes.PaletteBase.PaletteBase() -> void
ScottPlot.Palettes.PastelWheel
ScottPlot.Palettes.PastelWheel.PastelWheel() -> void
ScottPlot.Palettes.Penumbra
ScottPlot.Palettes.Penumbra.Penumbra() -> void
ScottPlot.Palettes.PolarNight
ScottPlot.Palettes.PolarNight.PolarNight() -> void
ScottPlot.Palettes.Redness
ScottPlot.Palettes.Redness.Redness() -> void
ScottPlot.Palettes.SnowStorm
ScottPlot.Palettes.SnowStorm.SnowStorm() -> void
ScottPlot.Palettes.SummerSplash
ScottPlot.Palettes.SummerSplash.SummerSplash() -> void
ScottPlot.Palettes.Tsitsulin
ScottPlot.Palettes.Tsitsulin.Tsitsulin() -> void
ScottPlot.Pixel
ScottPlot.Pixel.Distance(ScottPlot.Pixel other) -> float
ScottPlot.Pixel.IsFinite() -> bool
ScottPlot.Pixel.Pixel() -> void
ScottPlot.Pixel.Pixel(float x, float y) -> void
ScottPlot.Pixel.ToPointF() -> System.Drawing.PointF
ScottPlot.Pixel.Translate(float deltaX, float deltaY) -> void
ScottPlot.Pixel.WithTranslation(float deltaX, float deltaY) -> ScottPlot.Pixel
ScottPlot.Pixel.X -> float
ScottPlot.Pixel.Y -> float
ScottPlot.PixelPadding
ScottPlot.PixelPadding.Bottom -> float
ScottPlot.PixelPadding.Left -> float
ScottPlot.PixelPadding.PixelPadding() -> void
ScottPlot.PixelPadding.PixelPadding(float left, float right, float bottom, float top) -> void
ScottPlot.PixelPadding.Right -> float
ScottPlot.PixelPadding.Top -> float
ScottPlot.PixelRect
ScottPlot.PixelRect.BottomLeft.get -> ScottPlot.Pixel
ScottPlot.PixelRect.BottomRight.get -> ScottPlot.Pixel
ScottPlot.PixelRect.Height -> float
ScottPlot.PixelRect.PixelRect(float x, float y, float width, float height) -> void
ScottPlot.PixelRect.TopLeft.get -> ScottPlot.Pixel
ScottPlot.PixelRect.TopRight.get -> ScottPlot.Pixel
ScottPlot.PixelRect.Width -> float
ScottPlot.PixelRect.X -> float
ScottPlot.PixelRect.Y -> float
ScottPlot.Plot
ScottPlot.Plot.Axis(double? x1 = null, double? x2 = null, double? y1 = null, double? y2 = null) -> ScottPlot.AxisLimits
ScottPlot.Plot.Axis(ScottPlot.AxisLimits limits, int xAxisIndex = 0, int yAxisIndex = 0) -> void
ScottPlot.Plot.AxisAuto(double? horizontalMargin = null, double? verticalMargin = null) -> void
ScottPlot.Plot.AxisAuto(double? horizontalMargin, double? verticalMargin, int xAxisIndex, int yAxisIndex) -> void
ScottPlot.Plot.AxisAutoX(double? margin = null, int xAxisIndex = 0) -> void
ScottPlot.Plot.AxisAutoY(double? margin = null, int yAxisIndex = 0) -> void
ScottPlot.Plot.AxisLimits(int xAxisIndex = 0, int yAxisIndex = 0) -> ScottPlot.AxisLimits
ScottPlot.Plot.AxisPan(double dx = 0, double dy = 0, int xAxisIndex = 0, int yAxisIndex = 0) -> void
ScottPlot.Plot.AxisPanCenter(double x = 0, double y = 0, int xAxisIndex = 0, int yAxisIndex = 0) -> void
ScottPlot.Plot.AxisScale(double? unitsPerPixelX = null, double? unitsPerPixelY = null) -> void
ScottPlot.Plot.AxisScaleLock(bool enable, ScottPlot.EqualScaleMode scaleMode = ScottPlot.EqualScaleMode.PreserveSmallest) -> void
ScottPlot.Plot.AxisZoom(double xFrac = 1, double yFrac = 1, double? zoomToX = null, double? zoomToY = null, int xAxisIndex = 0, int yAxisIndex = 0) -> void
ScottPlot.Plot.Benchmark(bool? enable = true) -> bool
ScottPlot.Plot.Clear() -> void
ScottPlot.Plot.CoordinateFromPixel(double pixelX, double pixelY) -> System.Drawing.PointF
ScottPlot.Plot.CoordinateFromPixel(float pixelX, float pixelY) -> System.Drawing.PointF
ScottPlot.Plot.CoordinateFromPixel(int pixelX, int pixelY) -> System.Drawing.PointF
ScottPlot.Plot.CoordinateFromPixel(System.Drawing.Point pixel) -> System.Drawing.PointF
ScottPlot.Plot.CoordinateFromPixel(System.Drawing.PointF pixel) -> System.Drawing.PointF
ScottPlot.Plot.CoordinateFromPixelX(double pixelX) -> double
ScottPlot.Plot.CoordinateFromPixelX(float pixelX) -> double
ScottPlot.Plot.CoordinateFromPixelY(double pixelY) -> double
ScottPlot.Plot.CoordinateFromPixelY(float pixelY) -> double
ScottPlot.Plot.CoordinateToPixel(double locationX, double locationY) -> System.Drawing.PointF
ScottPlot.Plot.CoordinateToPixel(System.Drawing.PointF location) -> System.Drawing.PointF
ScottPlot.Plot.CoordinateToPixelX(double locationX) -> float
ScottPlot.Plot.CoordinateToPixelY(double locationY) -> float
ScottPlot.Plot.EqualAxis -> bool
ScottPlot.Plot.Frame(bool enable) -> void
ScottPlot.Plot.Frame(bool? visible = null, System.Drawing.Color? color = null, bool? left = null, bool? right = null, bool? bottom = null, bool? top = null) -> void
ScottPlot.Plot.Frameless(bool hideAllAxes = true) -> void
ScottPlot.Plot.GetAxisLimits(int xAxisIndex = 0, int yAxisIndex = 0) -> ScottPlot.AxisLimits
ScottPlot.Plot.GetCoordinate(float xPixel, float yPixel, int xAxisIndex = 0, int yAxisIndex = 0) -> (double x, double y)
ScottPlot.Plot.GetCoordinateX(float xPixel, int xAxisIndex = 0) -> double
ScottPlot.Plot.GetCoordinateY(float yPixel, int yAxisIndex = 0) -> double
ScottPlot.Plot.GetDataLimits(int xAxisIndex = 0, int yAxisIndex = 0) -> ScottPlot.AxisLimits
ScottPlot.Plot.GetNextColor(double alpha = 1) -> System.Drawing.Color
ScottPlot.Plot.GetPixel(double x, double y, int xAxisIndex = 0, int yAxisIndex = 0) -> (float xPixel, float yPixel)
ScottPlot.Plot.GetPixelX(double x, int xAxisIndex = 0) -> float
ScottPlot.Plot.GetPixelY(double y, int yAxisIndex = 0) -> float
ScottPlot.Plot.Grid(bool? enable = null, System.Drawing.Color? color = null, ScottPlot.LineStyle? lineStyle = null, bool? onTop = null) -> void
ScottPlot.Plot.Height.get -> float
ScottPlot.Plot.Height.set -> void
ScottPlot.Plot.Layout(float? left = null, float? right = null, float? bottom = null, float? top = null, float? padding = 5) -> void
ScottPlot.Plot.ManualDataArea(ScottPlot.PixelPadding padding) -> void
ScottPlot.Plot.Margins(double? x = null, double? y = null) -> (double x, double y)
ScottPlot.Plot.Margins(double? x, double? y, int xAxisIndex, int yAxisIndex) -> (double x, double y)
ScottPlot.Plot.Move(int oldIndex, int newIndex) -> void
ScottPlot.Plot.Plot(int width = 800, int height = 600) -> void
ScottPlot.Plot.RemoveAt(int index) -> void
ScottPlot.Plot.RenderLock() -> void
ScottPlot.Plot.RenderUnlock() -> void
ScottPlot.Plot.ResetLayout() -> void
ScottPlot.Plot.Resize(float width, float height) -> void
ScottPlot.Plot.SetAxisLimits(double? xMin = null, double? xMax = null, double? yMin = null, double? yMax = null, int xAxisIndex = 0, int yAxisIndex = 0) -> void
ScottPlot.Plot.SetAxisLimits(ScottPlot.AxisLimits limits, int xAxisIndex = 0, int yAxisIndex = 0) -> void
ScottPlot.Plot.SetAxisLimitsX(double xMin, double xMax) -> void
ScottPlot.Plot.SetAxisLimitsY(double yMin, double yMax) -> void
ScottPlot.Plot.SetInnerViewLimits(double xMin = Infinity, double xMax = -Infinity, double yMin = Infinity, double yMax = -Infinity, int xAxisIndex = 0, int yAxisIndex = 0) -> void
ScottPlot.Plot.SetOuterViewLimits(double xMin = -Infinity, double xMax = Infinity, double yMin = -Infinity, double yMax = Infinity, int xAxisIndex = 0, int yAxisIndex = 0) -> void
ScottPlot.Plot.SetViewLimits(double xMin = -Infinity, double xMax = Infinity, double yMin = -Infinity, double yMax = Infinity) -> void
ScottPlot.Plot.Validate(bool deep = true) -> void
ScottPlot.Plot.Width.get -> float
ScottPlot.Plot.Width.set -> void
ScottPlot.PlotDimensions
ScottPlot.PlotDimensions.GetCoordinate(float xPixel, float yPixel) -> ScottPlot.Coordinate
ScottPlot.PlotDimensions.GetCoordinate(ScottPlot.Pixel pixel) -> ScottPlot.Coordinate
ScottPlot.PlotDimensions.GetCoordinateX(float pixel) -> double
ScottPlot.PlotDimensions.GetCoordinateY(float pixel) -> double
ScottPlot.PlotDimensions.GetPixel(ScottPlot.Coordinate coordinate) -> ScottPlot.Pixel
ScottPlot.PlotDimensions.GetPixelX(double position) -> float
ScottPlot.PlotDimensions.GetPixelY(double position) -> float
ScottPlot.PlotDimensions.PlotDimensions(System.Drawing.SizeF figureSize, System.Drawing.SizeF dataSize, System.Drawing.PointF dataOffset, ScottPlot.AxisLimits axisLimits, double scaleFactor) -> void
ScottPlot.Plottable.Annotation
ScottPlot.Plottable.Annotation.Annotation() -> void
ScottPlot.Plottable.Annotation.Background.get -> bool
ScottPlot.Plottable.Annotation.Background.set -> void
ScottPlot.Plottable.Annotation.BackgroundColor.get -> System.Drawing.Color
ScottPlot.Plottable.Annotation.BackgroundColor.set -> void
ScottPlot.Plottable.Annotation.Border.get -> bool
ScottPlot.Plottable.Annotation.Border.set -> void
ScottPlot.Plottable.Annotation.BorderColor.get -> System.Drawing.Color
ScottPlot.Plottable.Annotation.BorderColor.set -> void
ScottPlot.Plottable.Annotation.BorderWidth.get -> float
ScottPlot.Plottable.Annotation.BorderWidth.set -> void
ScottPlot.Plottable.Annotation.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.Annotation.IsVisible.get -> bool
ScottPlot.Plottable.Annotation.IsVisible.set -> void
ScottPlot.Plottable.Annotation.Shadow.get -> bool
ScottPlot.Plottable.Annotation.Shadow.set -> void
ScottPlot.Plottable.Annotation.ShadowColor.get -> System.Drawing.Color
ScottPlot.Plottable.Annotation.ShadowColor.set -> void
ScottPlot.Plottable.Annotation.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.Annotation.X.get -> double
ScottPlot.Plottable.Annotation.X.set -> void
ScottPlot.Plottable.Annotation.XAxisIndex.get -> int
ScottPlot.Plottable.Annotation.XAxisIndex.set -> void
ScottPlot.Plottable.Annotation.Y.get -> double
ScottPlot.Plottable.Annotation.Y.set -> void
ScottPlot.Plottable.Annotation.YAxisIndex.get -> int
ScottPlot.Plottable.Annotation.YAxisIndex.set -> void
ScottPlot.Plottable.ArrowCoordinated
ScottPlot.Plottable.ArrowCoordinated.ArrowCoordinated(double xBase, double yBase, double xTip, double yTip) -> void
ScottPlot.Plottable.ArrowCoordinated.ArrowCoordinated(ScottPlot.Coordinate arrowBase, ScottPlot.Coordinate arrowTip) -> void
ScottPlot.Plottable.ArrowCoordinated.ArrowheadLength.get -> double
ScottPlot.Plottable.ArrowCoordinated.ArrowheadLength.set -> void
ScottPlot.Plottable.ArrowCoordinated.ArrowheadWidth.get -> double
ScottPlot.Plottable.ArrowCoordinated.ArrowheadWidth.set -> void
ScottPlot.Plottable.ArrowCoordinated.Color.get -> System.Drawing.Color
ScottPlot.Plottable.ArrowCoordinated.Color.set -> void
ScottPlot.Plottable.ArrowCoordinated.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.ArrowCoordinated.IsVisible.get -> bool
ScottPlot.Plottable.ArrowCoordinated.IsVisible.set -> void
ScottPlot.Plottable.ArrowCoordinated.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.ArrowCoordinated.LineColor.set -> void
ScottPlot.Plottable.ArrowCoordinated.LineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.ArrowCoordinated.LineStyle.set -> void
ScottPlot.Plottable.ArrowCoordinated.LineWidth.get -> double
ScottPlot.Plottable.ArrowCoordinated.LineWidth.set -> void
ScottPlot.Plottable.ArrowCoordinated.MarkerShape.get -> ScottPlot.MarkerShape
ScottPlot.Plottable.ArrowCoordinated.MarkerShape.set -> void
ScottPlot.Plottable.ArrowCoordinated.MarkerSize.get -> float
ScottPlot.Plottable.ArrowCoordinated.MarkerSize.set -> void
ScottPlot.Plottable.ArrowCoordinated.MinimumLengthPixels.get -> float
ScottPlot.Plottable.ArrowCoordinated.MinimumLengthPixels.set -> void
ScottPlot.Plottable.ArrowCoordinated.PixelOffsetX.get -> float
ScottPlot.Plottable.ArrowCoordinated.PixelOffsetX.set -> void
ScottPlot.Plottable.ArrowCoordinated.PixelOffsetY.get -> float
ScottPlot.Plottable.ArrowCoordinated.PixelOffsetY.set -> void
ScottPlot.Plottable.ArrowCoordinated.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.ArrowCoordinated.XAxisIndex.get -> int
ScottPlot.Plottable.ArrowCoordinated.XAxisIndex.set -> void
ScottPlot.Plottable.ArrowCoordinated.YAxisIndex.get -> int
ScottPlot.Plottable.ArrowCoordinated.YAxisIndex.set -> void
ScottPlot.Plottable.AxisLine
ScottPlot.Plottable.AxisLine.AxisLine(bool isHorizontal) -> void
ScottPlot.Plottable.AxisLine.Color.get -> System.Drawing.Color
ScottPlot.Plottable.AxisLine.Color.set -> void
ScottPlot.Plottable.AxisLine.DateTime.get -> System.DateTime
ScottPlot.Plottable.AxisLine.DateTime.set -> void
ScottPlot.Plottable.AxisLine.DragCursor.get -> ScottPlot.Cursor
ScottPlot.Plottable.AxisLine.DragEnabled.get -> bool
ScottPlot.Plottable.AxisLine.DragEnabled.set -> void
ScottPlot.Plottable.AxisLine.Dragged -> System.EventHandler
ScottPlot.Plottable.AxisLine.DragLimitMax.get -> double
ScottPlot.Plottable.AxisLine.DragLimitMax.set -> void
ScottPlot.Plottable.AxisLine.DragLimitMin.get -> double
ScottPlot.Plottable.AxisLine.DragLimitMin.set -> void
ScottPlot.Plottable.AxisLine.DragTo(double coordinateX, double coordinateY, bool fixedSize) -> void
ScottPlot.Plottable.AxisLine.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.AxisLine.IgnoreAxisAuto.get -> bool
ScottPlot.Plottable.AxisLine.IgnoreAxisAuto.set -> void
ScottPlot.Plottable.AxisLine.IsUnderMouse(double coordinateX, double coordinateY, double snapX, double snapY) -> bool
ScottPlot.Plottable.AxisLine.IsVisible.get -> bool
ScottPlot.Plottable.AxisLine.IsVisible.set -> void
ScottPlot.Plottable.AxisLine.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.AxisLine.LineColor.set -> void
ScottPlot.Plottable.AxisLine.LineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.AxisLine.LineStyle.set -> void
ScottPlot.Plottable.AxisLine.LineWidth.get -> double
ScottPlot.Plottable.AxisLine.LineWidth.set -> void
ScottPlot.Plottable.AxisLine.Max.get -> double
ScottPlot.Plottable.AxisLine.Max.set -> void
ScottPlot.Plottable.AxisLine.Min.get -> double
ScottPlot.Plottable.AxisLine.Min.set -> void
ScottPlot.Plottable.AxisLine.Position.get -> double
ScottPlot.Plottable.AxisLine.Position.set -> void
ScottPlot.Plottable.AxisLine.PositionLabel.get -> bool
ScottPlot.Plottable.AxisLine.PositionLabel.set -> void
ScottPlot.Plottable.AxisLine.PositionLabelAlignmentX.get -> ScottPlot.HorizontalAlignment
ScottPlot.Plottable.AxisLine.PositionLabelAlignmentX.set -> void
ScottPlot.Plottable.AxisLine.PositionLabelAlignmentY.get -> ScottPlot.VerticalAlignment
ScottPlot.Plottable.AxisLine.PositionLabelAlignmentY.set -> void
ScottPlot.Plottable.AxisLine.PositionLabelBackground.get -> System.Drawing.Color
ScottPlot.Plottable.AxisLine.PositionLabelBackground.set -> void
ScottPlot.Plottable.AxisLine.PositionLabelOppositeAxis.get -> bool
ScottPlot.Plottable.AxisLine.PositionLabelOppositeAxis.set -> void
ScottPlot.Plottable.AxisLine.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.AxisLine.XAxisIndex.get -> int
ScottPlot.Plottable.AxisLine.XAxisIndex.set -> void
ScottPlot.Plottable.AxisLine.YAxisIndex.get -> int
ScottPlot.Plottable.AxisLine.YAxisIndex.set -> void
ScottPlot.Plottable.AxisLineVector
ScottPlot.Plottable.AxisLineVector.AxisLineVector(bool isHorizontal) -> void
ScottPlot.Plottable.AxisLineVector.Color.get -> System.Drawing.Color
ScottPlot.Plottable.AxisLineVector.Color.set -> void
ScottPlot.Plottable.AxisLineVector.CurrentIndex.get -> int
ScottPlot.Plottable.AxisLineVector.CurrentIndex.set -> void
ScottPlot.Plottable.AxisLineVector.DragCursor.get -> ScottPlot.Cursor
ScottPlot.Plottable.AxisLineVector.DragEnabled.get -> bool
ScottPlot.Plottable.AxisLineVector.DragEnabled.set -> void
ScottPlot.Plottable.AxisLineVector.Dragged -> System.EventHandler
ScottPlot.Plottable.AxisLineVector.DragLimitMax.get -> double
ScottPlot.Plottable.AxisLineVector.DragLimitMax.set -> void
ScottPlot.Plottable.AxisLineVector.DragLimitMin.get -> double
ScottPlot.Plottable.AxisLineVector.DragLimitMin.set -> void
ScottPlot.Plottable.AxisLineVector.DragTo(double coordinateX, double coordinateY, bool fixedSize) -> void
ScottPlot.Plottable.AxisLineVector.ErrorCapSize.get -> float
ScottPlot.Plottable.AxisLineVector.ErrorCapSize.set -> void
ScottPlot.Plottable.AxisLineVector.ErrorLineWidth.get -> float
ScottPlot.Plottable.AxisLineVector.ErrorLineWidth.set -> void
ScottPlot.Plottable.AxisLineVector.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.AxisLineVector.IgnoreAxisAuto.get -> bool
ScottPlot.Plottable.AxisLineVector.IgnoreAxisAuto.set -> void
ScottPlot.Plottable.AxisLineVector.IsUnderMouse(double coordinateX, double coordinateY, double snapX, double snapY) -> bool
ScottPlot.Plottable.AxisLineVector.IsVisible.get -> bool
ScottPlot.Plottable.AxisLineVector.IsVisible.set -> void
ScottPlot.Plottable.AxisLineVector.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.AxisLineVector.LineColor.set -> void
ScottPlot.Plottable.AxisLineVector.LineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.AxisLineVector.LineStyle.set -> void
ScottPlot.Plottable.AxisLineVector.LineWidth.get -> double
ScottPlot.Plottable.AxisLineVector.LineWidth.set -> void
ScottPlot.Plottable.AxisLineVector.MarkerShape.get -> ScottPlot.MarkerShape
ScottPlot.Plottable.AxisLineVector.MarkerShape.set -> void
ScottPlot.Plottable.AxisLineVector.MarkerSize.get -> float
ScottPlot.Plottable.AxisLineVector.MarkerSize.set -> void
ScottPlot.Plottable.AxisLineVector.Max.get -> double
ScottPlot.Plottable.AxisLineVector.Max.set -> void
ScottPlot.Plottable.AxisLineVector.Min.get -> double
ScottPlot.Plottable.AxisLineVector.Min.set -> void
ScottPlot.Plottable.AxisLineVector.Offset.get -> int
ScottPlot.Plottable.AxisLineVector.Offset.set -> void
ScottPlot.Plottable.AxisLineVector.PointCount.get -> int
ScottPlot.Plottable.AxisLineVector.PositionLabel.get -> bool
ScottPlot.Plottable.AxisLineVector.PositionLabel.set -> void
ScottPlot.Plottable.AxisLineVector.PositionLabelBackground.get -> System.Drawing.Color
ScottPlot.Plottable.AxisLineVector.PositionLabelBackground.set -> void
ScottPlot.Plottable.AxisLineVector.PositionLabelOppositeAxis.get -> bool
ScottPlot.Plottable.AxisLineVector.PositionLabelOppositeAxis.set -> void
ScottPlot.Plottable.AxisLineVector.StepDisplay.get -> bool
ScottPlot.Plottable.AxisLineVector.StepDisplay.set -> void
ScottPlot.Plottable.AxisLineVector.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.AxisLineVector.XAxisIndex.get -> int
ScottPlot.Plottable.AxisLineVector.XAxisIndex.set -> void
ScottPlot.Plottable.AxisLineVector.YAxisIndex.get -> int
ScottPlot.Plottable.AxisLineVector.YAxisIndex.set -> void
ScottPlot.Plottable.AxisSpan
ScottPlot.Plottable.AxisSpan.AxisSpan(bool isHorizontal) -> void
ScottPlot.Plottable.AxisSpan.BorderColor.get -> System.Drawing.Color
ScottPlot.Plottable.AxisSpan.BorderColor.set -> void
ScottPlot.Plottable.AxisSpan.BorderLineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.AxisSpan.BorderLineStyle.set -> void
ScottPlot.Plottable.AxisSpan.BorderLineWidth.get -> float
ScottPlot.Plottable.AxisSpan.BorderLineWidth.set -> void
ScottPlot.Plottable.AxisSpan.Color.get -> System.Drawing.Color
ScottPlot.Plottable.AxisSpan.Color.set -> void
ScottPlot.Plottable.AxisSpan.DragCursor.get -> ScottPlot.Cursor
ScottPlot.Plottable.AxisSpan.DragEnabled.get -> bool
ScottPlot.Plottable.AxisSpan.DragEnabled.set -> void
ScottPlot.Plottable.AxisSpan.DragFixedSize.get -> bool
ScottPlot.Plottable.AxisSpan.DragFixedSize.set -> void
ScottPlot.Plottable.AxisSpan.Dragged -> System.EventHandler
ScottPlot.Plottable.AxisSpan.DragLimitMax.get -> double
ScottPlot.Plottable.AxisSpan.DragLimitMax.set -> void
ScottPlot.Plottable.AxisSpan.DragLimitMin.get -> double
ScottPlot.Plottable.AxisSpan.DragLimitMin.set -> void
ScottPlot.Plottable.AxisSpan.DragTo(double coordinateX, double coordinateY, bool fixedSize) -> void
ScottPlot.Plottable.AxisSpan.Edge1Dragged -> System.EventHandler<double>
ScottPlot.Plottable.AxisSpan.Edge2Dragged -> System.EventHandler<double>
ScottPlot.Plottable.AxisSpan.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.AxisSpan.HatchColor.get -> System.Drawing.Color
ScottPlot.Plottable.AxisSpan.HatchColor.set -> void
ScottPlot.Plottable.AxisSpan.HatchStyle.get -> ScottPlot.Drawing.HatchStyle
ScottPlot.Plottable.AxisSpan.HatchStyle.set -> void
ScottPlot.Plottable.AxisSpan.IgnoreAxisAuto.get -> bool
ScottPlot.Plottable.AxisSpan.IgnoreAxisAuto.set -> void
ScottPlot.Plottable.AxisSpan.IsUnderMouse(double coordinateX, double coordinateY, double snapX, double snapY) -> bool
ScottPlot.Plottable.AxisSpan.IsVisible.get -> bool
ScottPlot.Plottable.AxisSpan.IsVisible.set -> void
ScottPlot.Plottable.AxisSpan.MaxDragged -> System.EventHandler<double>
ScottPlot.Plottable.AxisSpan.MinDragged -> System.EventHandler<double>
ScottPlot.Plottable.AxisSpan.Position1 -> double
ScottPlot.Plottable.AxisSpan.Position2 -> double
ScottPlot.Plottable.AxisSpan.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.AxisSpan.XAxisIndex.get -> int
ScottPlot.Plottable.AxisSpan.XAxisIndex.set -> void
ScottPlot.Plottable.AxisSpan.YAxisIndex.get -> int
ScottPlot.Plottable.AxisSpan.YAxisIndex.set -> void
ScottPlot.Plottable.Bar
ScottPlot.Plottable.Bar.Bar() -> void
ScottPlot.Plottable.Bar.FillColor.get -> System.Drawing.Color
ScottPlot.Plottable.Bar.FillColor.set -> void
ScottPlot.Plottable.Bar.GetLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.Bar.IsVertical.get -> bool
ScottPlot.Plottable.Bar.IsVertical.set -> void
ScottPlot.Plottable.Bar.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.Bar.LineColor.set -> void
ScottPlot.Plottable.Bar.LineWidth.get -> float
ScottPlot.Plottable.Bar.LineWidth.set -> void
ScottPlot.Plottable.Bar.Position.get -> double
ScottPlot.Plottable.Bar.Position.set -> void
ScottPlot.Plottable.Bar.Thickness.get -> double
ScottPlot.Plottable.Bar.Thickness.set -> void
ScottPlot.Plottable.Bar.Value.get -> double
ScottPlot.Plottable.Bar.Value.set -> void
ScottPlot.Plottable.Bar.ValueBase.get -> double
ScottPlot.Plottable.Bar.ValueBase.set -> void
ScottPlot.Plottable.BarPlot
ScottPlot.Plottable.BarPlot.BorderLineWidth.get -> float
ScottPlot.Plottable.BarPlot.BorderLineWidth.set -> void
ScottPlot.Plottable.BarPlot.Color.get -> System.Drawing.Color
ScottPlot.Plottable.BarPlot.Color.set -> void
ScottPlot.Plottable.BarPlot.FillColor.get -> System.Drawing.Color
ScottPlot.Plottable.BarPlot.FillColor.set -> void
ScottPlot.Plottable.BarPlot.FillColorHatch.get -> System.Drawing.Color
ScottPlot.Plottable.BarPlot.FillColorHatch.set -> void
ScottPlot.Plottable.BarPlot.FillColorNegative.get -> System.Drawing.Color
ScottPlot.Plottable.BarPlot.FillColorNegative.set -> void
ScottPlot.Plottable.BarPlot.HatchStyle.get -> ScottPlot.Drawing.HatchStyle
ScottPlot.Plottable.BarPlot.HatchStyle.set -> void
ScottPlot.Plottable.BarPlot.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.BarPlotBase
ScottPlot.Plottable.BarPlotBase.BarPlotBase() -> void
ScottPlot.Plottable.BarPlotBase.BarWidth.get -> double
ScottPlot.Plottable.BarPlotBase.BarWidth.set -> void
ScottPlot.Plottable.BarPlotBase.BorderColor.get -> System.Drawing.Color
ScottPlot.Plottable.BarPlotBase.BorderColor.set -> void
ScottPlot.Plottable.BarPlotBase.ErrorCapSize.get -> double
ScottPlot.Plottable.BarPlotBase.ErrorCapSize.set -> void
ScottPlot.Plottable.BarPlotBase.ErrorColor.get -> System.Drawing.Color
ScottPlot.Plottable.BarPlotBase.ErrorColor.set -> void
ScottPlot.Plottable.BarPlotBase.ErrorLineWidth.get -> float
ScottPlot.Plottable.BarPlotBase.ErrorLineWidth.set -> void
ScottPlot.Plottable.BarPlotBase.HorizontalOrientation.get -> bool
ScottPlot.Plottable.BarPlotBase.HorizontalOrientation.set -> void
ScottPlot.Plottable.BarPlotBase.IsVisible.get -> bool
ScottPlot.Plottable.BarPlotBase.IsVisible.set -> void
ScottPlot.Plottable.BarPlotBase.Orientation.get -> ScottPlot.Orientation
ScottPlot.Plottable.BarPlotBase.Orientation.set -> void
ScottPlot.Plottable.BarPlotBase.PositionOffset.get -> double
ScottPlot.Plottable.BarPlotBase.PositionOffset.set -> void
ScottPlot.Plottable.BarPlotBase.ShowValuesAboveBars.get -> bool
ScottPlot.Plottable.BarPlotBase.ShowValuesAboveBars.set -> void
ScottPlot.Plottable.BarPlotBase.ValueBase.get -> double
ScottPlot.Plottable.BarPlotBase.ValueBase.set -> void
ScottPlot.Plottable.BarPlotBase.VerticalOrientation.get -> bool
ScottPlot.Plottable.BarPlotBase.VerticalOrientation.set -> void
ScottPlot.Plottable.BarPlotBase.XAxisIndex.get -> int
ScottPlot.Plottable.BarPlotBase.XAxisIndex.set -> void
ScottPlot.Plottable.BarPlotBase.XOffset.get -> double
ScottPlot.Plottable.BarPlotBase.XOffset.set -> void
ScottPlot.Plottable.BarPlotBase.YAxisIndex.get -> int
ScottPlot.Plottable.BarPlotBase.YAxisIndex.set -> void
ScottPlot.Plottable.BarSeries
ScottPlot.Plottable.BarSeries.BarSeries() -> void
ScottPlot.Plottable.BarSeries.Count.get -> int
ScottPlot.Plottable.BarSeries.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.BarSeries.IsVisible.get -> bool
ScottPlot.Plottable.BarSeries.IsVisible.set -> void
ScottPlot.Plottable.BarSeries.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.BarSeries.XAxisIndex.get -> int
ScottPlot.Plottable.BarSeries.XAxisIndex.set -> void
ScottPlot.Plottable.BarSeries.YAxisIndex.get -> int
ScottPlot.Plottable.BarSeries.YAxisIndex.set -> void
ScottPlot.Plottable.Bracket
ScottPlot.Plottable.Bracket.Bracket(double x1, double y1, double x2, double y2) -> void
ScottPlot.Plottable.Bracket.Color.get -> System.Drawing.Color
ScottPlot.Plottable.Bracket.Color.set -> void
ScottPlot.Plottable.Bracket.EdgeLength -> float
ScottPlot.Plottable.Bracket.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.Bracket.IsVisible.get -> bool
ScottPlot.Plottable.Bracket.IsVisible.set -> void
ScottPlot.Plottable.Bracket.LabelCounterClockwise.get -> bool
ScottPlot.Plottable.Bracket.LabelCounterClockwise.set -> void
ScottPlot.Plottable.Bracket.LineWidth.get -> float
ScottPlot.Plottable.Bracket.LineWidth.set -> void
ScottPlot.Plottable.Bracket.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.Bracket.X1.get -> double
ScottPlot.Plottable.Bracket.X1.set -> void
ScottPlot.Plottable.Bracket.X2.get -> double
ScottPlot.Plottable.Bracket.X2.set -> void
ScottPlot.Plottable.Bracket.XAxisIndex.get -> int
ScottPlot.Plottable.Bracket.XAxisIndex.set -> void
ScottPlot.Plottable.Bracket.Y1.get -> double
ScottPlot.Plottable.Bracket.Y1.set -> void
ScottPlot.Plottable.Bracket.Y2.get -> double
ScottPlot.Plottable.Bracket.Y2.set -> void
ScottPlot.Plottable.Bracket.YAxisIndex.get -> int
ScottPlot.Plottable.Bracket.YAxisIndex.set -> void
ScottPlot.Plottable.BubblePlot
ScottPlot.Plottable.BubblePlot.Add(double x, double y, double radius, System.Drawing.Color fillColor, double edgeWidth, System.Drawing.Color edgeColor) -> void
ScottPlot.Plottable.BubblePlot.BubblePlot() -> void
ScottPlot.Plottable.BubblePlot.Clear() -> void
ScottPlot.Plottable.BubblePlot.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.BubblePlot.GetPointNearest(double x, double y, double xyRatio = 1) -> (double x, double y, int index)
ScottPlot.Plottable.BubblePlot.GetPointNearestX(double x) -> (double x, double y, int index)
ScottPlot.Plottable.BubblePlot.GetPointNearestY(double y) -> (double x, double y, int index)
ScottPlot.Plottable.BubblePlot.IsVisible.get -> bool
ScottPlot.Plottable.BubblePlot.IsVisible.set -> void
ScottPlot.Plottable.BubblePlot.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.BubblePlot.XAxisIndex.get -> int
ScottPlot.Plottable.BubblePlot.XAxisIndex.set -> void
ScottPlot.Plottable.BubblePlot.YAxisIndex.get -> int
ScottPlot.Plottable.BubblePlot.YAxisIndex.set -> void
ScottPlot.Plottable.ClevelandDotPlot
ScottPlot.Plottable.ClevelandDotPlot.DotRadius.get -> float
ScottPlot.Plottable.ClevelandDotPlot.DotRadius.set -> void
ScottPlot.Plottable.ClevelandDotPlot.StemColor.get -> System.Drawing.Color
ScottPlot.Plottable.ClevelandDotPlot.StemColor.set -> void
ScottPlot.Plottable.ClevelandDotPlot.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.Colorbar
ScottPlot.Plottable.Colorbar.ClearTicks() -> void
ScottPlot.Plottable.Colorbar.DataAreaPadding.get -> float
ScottPlot.Plottable.Colorbar.DataAreaPadding.set -> void
ScottPlot.Plottable.Colorbar.Edge.get -> ScottPlot.Renderable.Edge
ScottPlot.Plottable.Colorbar.Edge.set -> void
ScottPlot.Plottable.Colorbar.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.Colorbar.IsVisible.get -> bool
ScottPlot.Plottable.Colorbar.IsVisible.set -> void
ScottPlot.Plottable.Colorbar.MaxColor.get -> double
ScottPlot.Plottable.Colorbar.MaxColor.set -> void
ScottPlot.Plottable.Colorbar.MaxIsClipped.get -> bool
ScottPlot.Plottable.Colorbar.MaxIsClipped.set -> void
ScottPlot.Plottable.Colorbar.MaxValue.get -> double
ScottPlot.Plottable.Colorbar.MaxValue.set -> void
ScottPlot.Plottable.Colorbar.MinColor.get -> double
ScottPlot.Plottable.Colorbar.MinColor.set -> void
ScottPlot.Plottable.Colorbar.MinIsClipped.get -> bool
ScottPlot.Plottable.Colorbar.MinIsClipped.set -> void
ScottPlot.Plottable.Colorbar.MinValue.get -> double
ScottPlot.Plottable.Colorbar.MinValue.set -> void
ScottPlot.Plottable.Colorbar.SetStyle(System.Drawing.Color? tickMarkColor, System.Drawing.Color? tickFontColor) -> void
ScottPlot.Plottable.Colorbar.TickMarkColor.get -> System.Drawing.Color
ScottPlot.Plottable.Colorbar.TickMarkColor.set -> void
ScottPlot.Plottable.Colorbar.TickMarkLength.get -> float
ScottPlot.Plottable.Colorbar.TickMarkLength.set -> void
ScottPlot.Plottable.Colorbar.TickMarkWidth.get -> float
ScottPlot.Plottable.Colorbar.TickMarkWidth.set -> void
ScottPlot.Plottable.Colorbar.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.Colorbar.Width.get -> int
ScottPlot.Plottable.Colorbar.Width.set -> void
ScottPlot.Plottable.Colorbar.XAxisIndex.get -> int
ScottPlot.Plottable.Colorbar.XAxisIndex.set -> void
ScottPlot.Plottable.Colorbar.YAxisIndex.get -> int
ScottPlot.Plottable.Colorbar.YAxisIndex.set -> void
ScottPlot.Plottable.CoordinatedHeatmap
ScottPlot.Plottable.CoordinatedHeatmap.CoordinatedHeatmap() -> void
ScottPlot.Plottable.CoxcombPlot
ScottPlot.Plottable.CoxcombPlot.AxisType.get -> ScottPlot.RadarAxis
ScottPlot.Plottable.CoxcombPlot.AxisType.set -> void
ScottPlot.Plottable.CoxcombPlot.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.CoxcombPlot.IsVisible.get -> bool
ScottPlot.Plottable.CoxcombPlot.IsVisible.set -> void
ScottPlot.Plottable.CoxcombPlot.Outline.get -> System.Drawing.Color
ScottPlot.Plottable.CoxcombPlot.Outline.set -> void
ScottPlot.Plottable.CoxcombPlot.OutlineWidth.get -> float
ScottPlot.Plottable.CoxcombPlot.OutlineWidth.set -> void
ScottPlot.Plottable.CoxcombPlot.ShowAxisValues.get -> bool
ScottPlot.Plottable.CoxcombPlot.ShowAxisValues.set -> void
ScottPlot.Plottable.CoxcombPlot.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.CoxcombPlot.WebColor.get -> System.Drawing.Color
ScottPlot.Plottable.CoxcombPlot.WebColor.set -> void
ScottPlot.Plottable.CoxcombPlot.XAxisIndex.get -> int
ScottPlot.Plottable.CoxcombPlot.XAxisIndex.set -> void
ScottPlot.Plottable.CoxcombPlot.YAxisIndex.get -> int
ScottPlot.Plottable.CoxcombPlot.YAxisIndex.set -> void
ScottPlot.Plottable.Crosshair
ScottPlot.Plottable.Crosshair.Color.get -> System.Drawing.Color
ScottPlot.Plottable.Crosshair.Color.set -> void
ScottPlot.Plottable.Crosshair.Crosshair() -> void
ScottPlot.Plottable.Crosshair.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.Crosshair.IgnoreAxisAuto.get -> bool
ScottPlot.Plottable.Crosshair.IgnoreAxisAuto.set -> void
ScottPlot.Plottable.Crosshair.IsDateTimeX.get -> bool
ScottPlot.Plottable.Crosshair.IsDateTimeX.set -> void
ScottPlot.Plottable.Crosshair.IsDateTimeY.get -> bool
ScottPlot.Plottable.Crosshair.IsDateTimeY.set -> void
ScottPlot.Plottable.Crosshair.IsVisible.get -> bool
ScottPlot.Plottable.Crosshair.IsVisible.set -> void
ScottPlot.Plottable.Crosshair.IsVisibleX.get -> bool
ScottPlot.Plottable.Crosshair.IsVisibleX.set -> void
ScottPlot.Plottable.Crosshair.IsVisibleY.get -> bool
ScottPlot.Plottable.Crosshair.IsVisibleY.set -> void
ScottPlot.Plottable.Crosshair.LabelBackgroundColor.get -> System.Drawing.Color
ScottPlot.Plottable.Crosshair.LabelBackgroundColor.set -> void
ScottPlot.Plottable.Crosshair.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.Crosshair.LineColor.set -> void
ScottPlot.Plottable.Crosshair.LineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.Crosshair.LineStyle.set -> void
ScottPlot.Plottable.Crosshair.LineWidth.get -> double
ScottPlot.Plottable.Crosshair.LineWidth.set -> void
ScottPlot.Plottable.Crosshair.PositionLabel.get -> bool
ScottPlot.Plottable.Crosshair.PositionLabel.set -> void
ScottPlot.Plottable.Crosshair.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.Crosshair.X.get -> double
ScottPlot.Plottable.Crosshair.X.set -> void
ScottPlot.Plottable.Crosshair.XAxisIndex.get -> int
ScottPlot.Plottable.Crosshair.XAxisIndex.set -> void
ScottPlot.Plottable.Crosshair.Y.get -> double
ScottPlot.Plottable.Crosshair.Y.set -> void
ScottPlot.Plottable.Crosshair.YAxisIndex.get -> int
ScottPlot.Plottable.Crosshair.YAxisIndex.set -> void
ScottPlot.Plottable.DraggableMarkerPlot
ScottPlot.Plottable.DraggableMarkerPlot.DragCursor.get -> ScottPlot.Cursor
ScottPlot.Plottable.DraggableMarkerPlot.DragCursor.set -> void
ScottPlot.Plottable.DraggableMarkerPlot.DragEnabled.get -> bool
ScottPlot.Plottable.DraggableMarkerPlot.DragEnabled.set -> void
ScottPlot.Plottable.DraggableMarkerPlot.DraggableMarkerPlot() -> void
ScottPlot.Plottable.DraggableMarkerPlot.Dragged -> System.EventHandler
ScottPlot.Plottable.DraggableMarkerPlot.DragTo(double coordinateX, double coordinateY, bool fixedSize) -> void
ScottPlot.Plottable.DraggableMarkerPlot.DragXLimitMax.get -> double
ScottPlot.Plottable.DraggableMarkerPlot.DragXLimitMax.set -> void
ScottPlot.Plottable.DraggableMarkerPlot.DragXLimitMin.get -> double
ScottPlot.Plottable.DraggableMarkerPlot.DragXLimitMin.set -> void
ScottPlot.Plottable.DraggableMarkerPlot.DragYLimitMax.get -> double
ScottPlot.Plottable.DraggableMarkerPlot.DragYLimitMax.set -> void
ScottPlot.Plottable.DraggableMarkerPlot.DragYLimitMin.get -> double
ScottPlot.Plottable.DraggableMarkerPlot.DragYLimitMin.set -> void
ScottPlot.Plottable.DraggableMarkerPlot.IsUnderMouse(double coordinateX, double coordinateY, double snapX, double snapY) -> bool
ScottPlot.Plottable.ErrorBar
ScottPlot.Plottable.ErrorBar.CapSize.get -> int
ScottPlot.Plottable.ErrorBar.CapSize.set -> void
ScottPlot.Plottable.ErrorBar.Color.get -> System.Drawing.Color
ScottPlot.Plottable.ErrorBar.Color.set -> void
ScottPlot.Plottable.ErrorBar.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.ErrorBar.IsVisible.get -> bool
ScottPlot.Plottable.ErrorBar.IsVisible.set -> void
ScottPlot.Plottable.ErrorBar.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.ErrorBar.LineColor.set -> void
ScottPlot.Plottable.ErrorBar.LineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.ErrorBar.LineStyle.set -> void
ScottPlot.Plottable.ErrorBar.LineWidth.get -> double
ScottPlot.Plottable.ErrorBar.LineWidth.set -> void
ScottPlot.Plottable.ErrorBar.MarkerColor.get -> System.Drawing.Color
ScottPlot.Plottable.ErrorBar.MarkerColor.set -> void
ScottPlot.Plottable.ErrorBar.MarkerLineWidth.get -> float
ScottPlot.Plottable.ErrorBar.MarkerLineWidth.set -> void
ScottPlot.Plottable.ErrorBar.MarkerShape.get -> ScottPlot.MarkerShape
ScottPlot.Plottable.ErrorBar.MarkerShape.set -> void
ScottPlot.Plottable.ErrorBar.MarkerSize.get -> float
ScottPlot.Plottable.ErrorBar.MarkerSize.set -> void
ScottPlot.Plottable.ErrorBar.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.ErrorBar.XAxisIndex.get -> int
ScottPlot.Plottable.ErrorBar.XAxisIndex.set -> void
ScottPlot.Plottable.ErrorBar.YAxisIndex.get -> int
ScottPlot.Plottable.ErrorBar.YAxisIndex.set -> void
ScottPlot.Plottable.FinancePlot
ScottPlot.Plottable.FinancePlot.Add(double open, double high, double low, double close) -> void
ScottPlot.Plottable.FinancePlot.Add(double open, double high, double low, double close, System.DateTime timeStart, System.TimeSpan timeSpan) -> void
ScottPlot.Plottable.FinancePlot.Candle.get -> bool
ScottPlot.Plottable.FinancePlot.Candle.set -> void
ScottPlot.Plottable.FinancePlot.Clear() -> void
ScottPlot.Plottable.FinancePlot.ColorDown.get -> System.Drawing.Color
ScottPlot.Plottable.FinancePlot.ColorDown.set -> void
ScottPlot.Plottable.FinancePlot.ColorUp.get -> System.Drawing.Color
ScottPlot.Plottable.FinancePlot.ColorUp.set -> void
ScottPlot.Plottable.FinancePlot.FinancePlot() -> void
ScottPlot.Plottable.FinancePlot.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.FinancePlot.IsVisible.get -> bool
ScottPlot.Plottable.FinancePlot.IsVisible.set -> void
ScottPlot.Plottable.FinancePlot.Sequential.get -> bool
ScottPlot.Plottable.FinancePlot.Sequential.set -> void
ScottPlot.Plottable.FinancePlot.ValidateData(bool deepValidation = false) -> void
ScottPlot.Plottable.FinancePlot.WickColor.get -> System.Drawing.Color?
ScottPlot.Plottable.FinancePlot.WickColor.set -> void
ScottPlot.Plottable.FinancePlot.XAxisIndex.get -> int
ScottPlot.Plottable.FinancePlot.XAxisIndex.set -> void
ScottPlot.Plottable.FinancePlot.YAxisIndex.get -> int
ScottPlot.Plottable.FinancePlot.YAxisIndex.set -> void
ScottPlot.Plottable.FunctionPlot
ScottPlot.Plottable.FunctionPlot.Color.get -> System.Drawing.Color
ScottPlot.Plottable.FunctionPlot.Color.set -> void
ScottPlot.Plottable.FunctionPlot.FillColor.get -> System.Drawing.Color
ScottPlot.Plottable.FunctionPlot.FillColor.set -> void
ScottPlot.Plottable.FunctionPlot.FillType.get -> ScottPlot.FillType
ScottPlot.Plottable.FunctionPlot.FillType.set -> void
ScottPlot.Plottable.FunctionPlot.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.FunctionPlot.IsVisible.get -> bool
ScottPlot.Plottable.FunctionPlot.IsVisible.set -> void
ScottPlot.Plottable.FunctionPlot.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.FunctionPlot.LineColor.set -> void
ScottPlot.Plottable.FunctionPlot.LineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.FunctionPlot.LineStyle.set -> void
ScottPlot.Plottable.FunctionPlot.LineWidth.get -> double
ScottPlot.Plottable.FunctionPlot.LineWidth.set -> void
ScottPlot.Plottable.FunctionPlot.PointCount.get -> int
ScottPlot.Plottable.FunctionPlot.ValidateData(bool deepValidation = false) -> void
ScottPlot.Plottable.FunctionPlot.XAxisIndex.get -> int
ScottPlot.Plottable.FunctionPlot.XAxisIndex.set -> void
ScottPlot.Plottable.FunctionPlot.XMax.get -> double
ScottPlot.Plottable.FunctionPlot.XMax.set -> void
ScottPlot.Plottable.FunctionPlot.XMin.get -> double
ScottPlot.Plottable.FunctionPlot.XMin.set -> void
ScottPlot.Plottable.FunctionPlot.YAxisIndex.get -> int
ScottPlot.Plottable.FunctionPlot.YAxisIndex.set -> void
ScottPlot.Plottable.Heatmap
ScottPlot.Plottable.Heatmap.CellHeight.get -> double
ScottPlot.Plottable.Heatmap.CellHeight.set -> void
ScottPlot.Plottable.Heatmap.CellWidth.get -> double
ScottPlot.Plottable.Heatmap.CellWidth.set -> void
ScottPlot.Plottable.Heatmap.ColormapMax.get -> double
ScottPlot.Plottable.Heatmap.ColormapMaxIsClipped.get -> bool
ScottPlot.Plottable.Heatmap.ColormapMin.get -> double
ScottPlot.Plottable.Heatmap.ColormapMinIsClipped.get -> bool
ScottPlot.Plottable.Heatmap.DisplayImageAbove.get -> bool
ScottPlot.Plottable.Heatmap.DisplayImageAbove.set -> void
ScottPlot.Plottable.Heatmap.FlipVertically.get -> bool
ScottPlot.Plottable.Heatmap.FlipVertically.set -> void
ScottPlot.Plottable.Heatmap.GetCellIndexes(double x, double y) -> (int? xIndex, int? yIndex)
ScottPlot.Plottable.Heatmap.Heatmap() -> void
ScottPlot.Plottable.Heatmap.Interpolation.get -> System.Drawing.Drawing2D.InterpolationMode
ScottPlot.Plottable.Heatmap.Interpolation.set -> void
ScottPlot.Plottable.Heatmap.IsDefaultSizeAndLocation.get -> bool
ScottPlot.Plottable.Heatmap.IsVisible.get -> bool
ScottPlot.Plottable.Heatmap.IsVisible.set -> void
ScottPlot.Plottable.Heatmap.OffsetX.get -> double
ScottPlot.Plottable.Heatmap.OffsetX.set -> void
ScottPlot.Plottable.Heatmap.OffsetY.get -> double
ScottPlot.Plottable.Heatmap.OffsetY.set -> void
ScottPlot.Plottable.Heatmap.ScaleMax.get -> double?
ScottPlot.Plottable.Heatmap.ScaleMax.set -> void
ScottPlot.Plottable.Heatmap.ScaleMin.get -> double?
ScottPlot.Plottable.Heatmap.ScaleMin.set -> void
ScottPlot.Plottable.Heatmap.ShowAxisLabels -> bool
ScottPlot.Plottable.Heatmap.Smooth.get -> bool
ScottPlot.Plottable.Heatmap.Smooth.set -> void
ScottPlot.Plottable.Heatmap.TransparencyThreshold.get -> double?
ScottPlot.Plottable.Heatmap.TransparencyThreshold.set -> void
ScottPlot.Plottable.Heatmap.ValidateData(bool deepValidation = false) -> void
ScottPlot.Plottable.Heatmap.XAxisIndex.get -> int
ScottPlot.Plottable.Heatmap.XAxisIndex.set -> void
ScottPlot.Plottable.Heatmap.XMax.get -> double
ScottPlot.Plottable.Heatmap.XMax.set -> void
ScottPlot.Plottable.Heatmap.XMin.get -> double
ScottPlot.Plottable.Heatmap.XMin.set -> void
ScottPlot.Plottable.Heatmap.YAxisIndex.get -> int
ScottPlot.Plottable.Heatmap.YAxisIndex.set -> void
ScottPlot.Plottable.Heatmap.YMax.get -> double
ScottPlot.Plottable.Heatmap.YMax.set -> void
ScottPlot.Plottable.Heatmap.YMin.get -> double
ScottPlot.Plottable.Heatmap.YMin.set -> void
ScottPlot.Plottable.HLine
ScottPlot.Plottable.HLine.HLine() -> void
ScottPlot.Plottable.HLine.Y.get -> double
ScottPlot.Plottable.HLine.Y.set -> void
ScottPlot.Plottable.HLineVector
ScottPlot.Plottable.HLineVector.HLineVector() -> void
ScottPlot.Plottable.HLineVector.offset.get -> int
ScottPlot.Plottable.HLineVector.offset.set -> void
ScottPlot.Plottable.HSpan
ScottPlot.Plottable.HSpan.HSpan() -> void
ScottPlot.Plottable.HSpan.X1.get -> double
ScottPlot.Plottable.HSpan.X1.set -> void
ScottPlot.Plottable.HSpan.X2.get -> double
ScottPlot.Plottable.HSpan.X2.set -> void
ScottPlot.Plottable.IDraggable
ScottPlot.Plottable.IDraggable.DragCursor.get -> ScottPlot.Cursor
ScottPlot.Plottable.IDraggable.DragEnabled.get -> bool
ScottPlot.Plottable.IDraggable.DragEnabled.set -> void
ScottPlot.Plottable.IDraggable.Dragged -> System.EventHandler
ScottPlot.Plottable.IDraggable.DragTo(double coordinateX, double coordinateY, bool fixedSize) -> void
ScottPlot.Plottable.IDraggable.IsUnderMouse(double coordinateX, double coordinateY, double snapX, double snapY) -> bool
ScottPlot.Plottable.IDraggableSpan
ScottPlot.Plottable.IDraggableSpan.Edge1Dragged -> System.EventHandler<double>
ScottPlot.Plottable.IDraggableSpan.Edge2Dragged -> System.EventHandler<double>
ScottPlot.Plottable.IDraggableSpan.MaxDragged -> System.EventHandler<double>
ScottPlot.Plottable.IDraggableSpan.MinDragged -> System.EventHandler<double>
ScottPlot.Plottable.IHasArea
ScottPlot.Plottable.IHasArea.BorderColor.get -> System.Drawing.Color
ScottPlot.Plottable.IHasArea.BorderColor.set -> void
ScottPlot.Plottable.IHasArea.BorderLineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.IHasArea.BorderLineStyle.set -> void
ScottPlot.Plottable.IHasArea.BorderLineWidth.get -> float
ScottPlot.Plottable.IHasArea.BorderLineWidth.set -> void
ScottPlot.Plottable.IHasArea.HatchColor.get -> System.Drawing.Color
ScottPlot.Plottable.IHasArea.HatchColor.set -> void
ScottPlot.Plottable.IHasArea.HatchStyle.get -> ScottPlot.Drawing.HatchStyle
ScottPlot.Plottable.IHasArea.HatchStyle.set -> void
ScottPlot.Plottable.IHasColor
ScottPlot.Plottable.IHasColor.Color.get -> System.Drawing.Color
ScottPlot.Plottable.IHasColor.Color.set -> void
ScottPlot.Plottable.IHasColormap
ScottPlot.Plottable.IHasColormap.ColormapMax.get -> double
ScottPlot.Plottable.IHasColormap.ColormapMaxIsClipped.get -> bool
ScottPlot.Plottable.IHasColormap.ColormapMin.get -> double
ScottPlot.Plottable.IHasColormap.ColormapMinIsClipped.get -> bool
ScottPlot.Plottable.IHasLine
ScottPlot.Plottable.IHasLine.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.IHasLine.LineColor.set -> void
ScottPlot.Plottable.IHasLine.LineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.IHasLine.LineStyle.set -> void
ScottPlot.Plottable.IHasLine.LineWidth.get -> double
ScottPlot.Plottable.IHasLine.LineWidth.set -> void
ScottPlot.Plottable.IHasMarker
ScottPlot.Plottable.IHasMarker.MarkerColor.get -> System.Drawing.Color
ScottPlot.Plottable.IHasMarker.MarkerColor.set -> void
ScottPlot.Plottable.IHasMarker.MarkerLineWidth.get -> float
ScottPlot.Plottable.IHasMarker.MarkerLineWidth.set -> void
ScottPlot.Plottable.IHasMarker.MarkerShape.get -> ScottPlot.MarkerShape
ScottPlot.Plottable.IHasMarker.MarkerShape.set -> void
ScottPlot.Plottable.IHasMarker.MarkerSize.get -> float
ScottPlot.Plottable.IHasMarker.MarkerSize.set -> void
ScottPlot.Plottable.IHasPixelOffset
ScottPlot.Plottable.IHasPixelOffset.PixelOffsetX.get -> float
ScottPlot.Plottable.IHasPixelOffset.PixelOffsetX.set -> void
ScottPlot.Plottable.IHasPixelOffset.PixelOffsetY.get -> float
ScottPlot.Plottable.IHasPixelOffset.PixelOffsetY.set -> void
ScottPlot.Plottable.IHasPoints
ScottPlot.Plottable.IHasPointsGeneric<TX, TY>
ScottPlot.Plottable.IHasPointsGeneric<TX, TY>.GetPointNearest(TX x, TY y, TX xyRatio) -> (TX x, TY y, int index)
ScottPlot.Plottable.IHasPointsGenericX<TX, TY>
ScottPlot.Plottable.IHasPointsGenericX<TX, TY>.GetPointNearestX(TX x) -> (TX x, TY y, int index)
ScottPlot.Plottable.IHasPointsGenericX<TX, TY>.GetYDataRange(TX xMin, TX xMax) -> (TY yMin, TY yMax)
ScottPlot.Plottable.IHasPointsGenericY<TX, TY>
ScottPlot.Plottable.IHasPointsGenericY<TX, TY>.GetPointNearestY(TY y) -> (TX x, TY y, int index)
ScottPlot.Plottable.IHighlightable
ScottPlot.Plottable.IHighlightable.HighlightCoefficient.get -> float
ScottPlot.Plottable.IHighlightable.HighlightCoefficient.set -> void
ScottPlot.Plottable.IHighlightable.IsHighlighted.get -> bool
ScottPlot.Plottable.IHighlightable.IsHighlighted.set -> void
ScottPlot.Plottable.IHittable
ScottPlot.Plottable.IHittable.HitCursor.get -> ScottPlot.Cursor
ScottPlot.Plottable.IHittable.HitCursor.set -> void
ScottPlot.Plottable.IHittable.HitTest(ScottPlot.Coordinate coord) -> bool
ScottPlot.Plottable.IHittable.HitTestEnabled.get -> bool
ScottPlot.Plottable.IHittable.HitTestEnabled.set -> void
ScottPlot.Plottable.Image
ScottPlot.Plottable.Image.Alignment.get -> ScottPlot.Alignment
ScottPlot.Plottable.Image.Alignment.set -> void
ScottPlot.Plottable.Image.BorderColor.get -> System.Drawing.Color
ScottPlot.Plottable.Image.BorderColor.set -> void
ScottPlot.Plottable.Image.BorderSize.get -> float
ScottPlot.Plottable.Image.BorderSize.set -> void
ScottPlot.Plottable.Image.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.Image.HeightInAxisUnits.get -> double?
ScottPlot.Plottable.Image.HeightInAxisUnits.set -> void
ScottPlot.Plottable.Image.Image() -> void
ScottPlot.Plottable.Image.IsVisible.get -> bool
ScottPlot.Plottable.Image.IsVisible.set -> void
ScottPlot.Plottable.Image.Rotation.get -> double
ScottPlot.Plottable.Image.Rotation.set -> void
ScottPlot.Plottable.Image.Scale -> double
ScottPlot.Plottable.Image.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.Image.WidthInAxisUnits.get -> double?
ScottPlot.Plottable.Image.WidthInAxisUnits.set -> void
ScottPlot.Plottable.Image.X.get -> double
ScottPlot.Plottable.Image.X.set -> void
ScottPlot.Plottable.Image.XAxisIndex.get -> int
ScottPlot.Plottable.Image.XAxisIndex.set -> void
ScottPlot.Plottable.Image.Y.get -> double
ScottPlot.Plottable.Image.Y.set -> void
ScottPlot.Plottable.Image.YAxisIndex.get -> int
ScottPlot.Plottable.Image.YAxisIndex.set -> void
ScottPlot.Plottable.IPlottable
ScottPlot.Plottable.IPlottable.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.IPlottable.IsVisible.get -> bool
ScottPlot.Plottable.IPlottable.IsVisible.set -> void
ScottPlot.Plottable.IPlottable.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.IPlottable.XAxisIndex.get -> int
ScottPlot.Plottable.IPlottable.XAxisIndex.set -> void
ScottPlot.Plottable.IPlottable.YAxisIndex.get -> int
ScottPlot.Plottable.IPlottable.YAxisIndex.set -> void
ScottPlot.Plottable.IStylable
ScottPlot.Plottable.IStylable.SetStyle(System.Drawing.Color? tickMarkColor, System.Drawing.Color? tickFontColor) -> void
ScottPlot.Plottable.LegendItem
ScottPlot.Plottable.LegendItem.borderColor.get -> System.Drawing.Color
ScottPlot.Plottable.LegendItem.borderColor.set -> void
ScottPlot.Plottable.LegendItem.borderLineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.LegendItem.borderLineStyle.set -> void
ScottPlot.Plottable.LegendItem.borderWith.get -> float
ScottPlot.Plottable.LegendItem.borderWith.set -> void
ScottPlot.Plottable.LegendItem.color.get -> System.Drawing.Color
ScottPlot.Plottable.LegendItem.color.set -> void
ScottPlot.Plottable.LegendItem.hatchColor.get -> System.Drawing.Color
ScottPlot.Plottable.LegendItem.hatchColor.set -> void
ScottPlot.Plottable.LegendItem.hatchStyle -> ScottPlot.Drawing.HatchStyle
ScottPlot.Plottable.LegendItem.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.LegendItem.lineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.LegendItem.lineStyle.set -> void
ScottPlot.Plottable.LegendItem.lineWidth.get -> double
ScottPlot.Plottable.LegendItem.lineWidth.set -> void
ScottPlot.Plottable.LegendItem.MarkerColor.get -> System.Drawing.Color
ScottPlot.Plottable.LegendItem.markerLineWidth.get -> float
ScottPlot.Plottable.LegendItem.markerShape.get -> ScottPlot.MarkerShape
ScottPlot.Plottable.LegendItem.markerShape.set -> void
ScottPlot.Plottable.LegendItem.markerSize.get -> float
ScottPlot.Plottable.LegendItem.markerSize.set -> void
ScottPlot.Plottable.LegendItem.ShowAsRectangleInLegend.get -> bool
ScottPlot.Plottable.LollipopPlot
ScottPlot.Plottable.LollipopPlot.LollipopColor.get -> System.Drawing.Color
ScottPlot.Plottable.LollipopPlot.LollipopColor.set -> void
ScottPlot.Plottable.LollipopPlot.LollipopRadius.get -> float
ScottPlot.Plottable.LollipopPlot.LollipopRadius.set -> void
ScottPlot.Plottable.LollipopPlot.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.MarkerPlot
ScottPlot.Plottable.MarkerPlot.Color.get -> System.Drawing.Color
ScottPlot.Plottable.MarkerPlot.Color.set -> void
ScottPlot.Plottable.MarkerPlot.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.MarkerPlot.IsVisible.get -> bool
ScottPlot.Plottable.MarkerPlot.IsVisible.set -> void
ScottPlot.Plottable.MarkerPlot.MarkerColor.get -> System.Drawing.Color
ScottPlot.Plottable.MarkerPlot.MarkerColor.set -> void
ScottPlot.Plottable.MarkerPlot.MarkerLineWidth.get -> float
ScottPlot.Plottable.MarkerPlot.MarkerLineWidth.set -> void
ScottPlot.Plottable.MarkerPlot.MarkerPlot() -> void
ScottPlot.Plottable.MarkerPlot.MarkerShape.get -> ScottPlot.MarkerShape
ScottPlot.Plottable.MarkerPlot.MarkerShape.set -> void
ScottPlot.Plottable.MarkerPlot.MarkerSize.get -> float
ScottPlot.Plottable.MarkerPlot.MarkerSize.set -> void
ScottPlot.Plottable.MarkerPlot.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.MarkerPlot.X.get -> double
ScottPlot.Plottable.MarkerPlot.X.set -> void
ScottPlot.Plottable.MarkerPlot.XAxisIndex.get -> int
ScottPlot.Plottable.MarkerPlot.XAxisIndex.set -> void
ScottPlot.Plottable.MarkerPlot.Y.get -> double
ScottPlot.Plottable.MarkerPlot.Y.set -> void
ScottPlot.Plottable.MarkerPlot.YAxisIndex.get -> int
ScottPlot.Plottable.MarkerPlot.YAxisIndex.set -> void
ScottPlot.Plottable.PiePlot
ScottPlot.Plottable.PiePlot.BackgroundColor.get -> System.Drawing.Color
ScottPlot.Plottable.PiePlot.BackgroundColor.set -> void
ScottPlot.Plottable.PiePlot.DonutSize.get -> double
ScottPlot.Plottable.PiePlot.DonutSize.set -> void
ScottPlot.Plottable.PiePlot.Explode.get -> bool
ScottPlot.Plottable.PiePlot.Explode.set -> void
ScottPlot.Plottable.PiePlot.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.PiePlot.IsVisible.get -> bool
ScottPlot.Plottable.PiePlot.IsVisible.set -> void
ScottPlot.Plottable.PiePlot.OutlineColor.get -> System.Drawing.Color
ScottPlot.Plottable.PiePlot.OutlineColor.set -> void
ScottPlot.Plottable.PiePlot.OutlineSize.get -> float
ScottPlot.Plottable.PiePlot.OutlineSize.set -> void
ScottPlot.Plottable.PiePlot.PointCount.get -> int
ScottPlot.Plottable.PiePlot.ShowLabels.get -> bool
ScottPlot.Plottable.PiePlot.ShowLabels.set -> void
ScottPlot.Plottable.PiePlot.ShowPercentages.get -> bool
ScottPlot.Plottable.PiePlot.ShowPercentages.set -> void
ScottPlot.Plottable.PiePlot.ShowValues.get -> bool
ScottPlot.Plottable.PiePlot.ShowValues.set -> void
ScottPlot.Plottable.PiePlot.Size.get -> double
ScottPlot.Plottable.PiePlot.Size.set -> void
ScottPlot.Plottable.PiePlot.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.PiePlot.XAxisIndex.get -> int
ScottPlot.Plottable.PiePlot.XAxisIndex.set -> void
ScottPlot.Plottable.PiePlot.YAxisIndex.get -> int
ScottPlot.Plottable.PiePlot.YAxisIndex.set -> void
ScottPlot.Plottable.Polygon
ScottPlot.Plottable.Polygon.Color.get -> System.Drawing.Color
ScottPlot.Plottable.Polygon.Color.set -> void
ScottPlot.Plottable.Polygon.Fill.get -> bool
ScottPlot.Plottable.Polygon.Fill.set -> void
ScottPlot.Plottable.Polygon.FillColor.get -> System.Drawing.Color
ScottPlot.Plottable.Polygon.FillColor.set -> void
ScottPlot.Plottable.Polygon.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.Polygon.HatchColor.get -> System.Drawing.Color
ScottPlot.Plottable.Polygon.HatchColor.set -> void
ScottPlot.Plottable.Polygon.HatchStyle.get -> ScottPlot.Drawing.HatchStyle
ScottPlot.Plottable.Polygon.HatchStyle.set -> void
ScottPlot.Plottable.Polygon.IsVisible.get -> bool
ScottPlot.Plottable.Polygon.IsVisible.set -> void
ScottPlot.Plottable.Polygon.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.Polygon.LineColor.set -> void
ScottPlot.Plottable.Polygon.LineWidth.get -> double
ScottPlot.Plottable.Polygon.LineWidth.set -> void
ScottPlot.Plottable.Polygon.PointCount.get -> int
ScottPlot.Plottable.Polygon.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.Polygon.XAxisIndex.get -> int
ScottPlot.Plottable.Polygon.XAxisIndex.set -> void
ScottPlot.Plottable.Polygon.YAxisIndex.get -> int
ScottPlot.Plottable.Polygon.YAxisIndex.set -> void
ScottPlot.Plottable.Polygons
ScottPlot.Plottable.Polygons.Color.get -> System.Drawing.Color
ScottPlot.Plottable.Polygons.Color.set -> void
ScottPlot.Plottable.Polygons.Fill.get -> bool
ScottPlot.Plottable.Polygons.Fill.set -> void
ScottPlot.Plottable.Polygons.FillColor.get -> System.Drawing.Color
ScottPlot.Plottable.Polygons.FillColor.set -> void
ScottPlot.Plottable.Polygons.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.Polygons.HatchColor.get -> System.Drawing.Color
ScottPlot.Plottable.Polygons.HatchColor.set -> void
ScottPlot.Plottable.Polygons.HatchStyle.get -> ScottPlot.Drawing.HatchStyle
ScottPlot.Plottable.Polygons.HatchStyle.set -> void
ScottPlot.Plottable.Polygons.IsVisible.get -> bool
ScottPlot.Plottable.Polygons.IsVisible.set -> void
ScottPlot.Plottable.Polygons.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.Polygons.LineColor.set -> void
ScottPlot.Plottable.Polygons.LineWidth.get -> double
ScottPlot.Plottable.Polygons.LineWidth.set -> void
ScottPlot.Plottable.Polygons.PointCount.get -> int
ScottPlot.Plottable.Polygons.RenderSmallPolygonsAsSinglePixels.get -> bool
ScottPlot.Plottable.Polygons.RenderSmallPolygonsAsSinglePixels.set -> void
ScottPlot.Plottable.Polygons.SkipOffScreenPolygons.get -> bool
ScottPlot.Plottable.Polygons.SkipOffScreenPolygons.set -> void
ScottPlot.Plottable.Polygons.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.Polygons.XAxisIndex.get -> int
ScottPlot.Plottable.Polygons.XAxisIndex.set -> void
ScottPlot.Plottable.Polygons.YAxisIndex.get -> int
ScottPlot.Plottable.Polygons.YAxisIndex.set -> void
ScottPlot.Plottable.PopulationPlot
ScottPlot.Plottable.PopulationPlot.BoxFormat
ScottPlot.Plottable.PopulationPlot.BoxFormat.OutlierQuartileMedian = 1 -> ScottPlot.Plottable.PopulationPlot.BoxFormat
ScottPlot.Plottable.PopulationPlot.BoxFormat.StdevStderrMean = 0 -> ScottPlot.Plottable.PopulationPlot.BoxFormat
ScottPlot.Plottable.PopulationPlot.BoxStyle
ScottPlot.Plottable.PopulationPlot.BoxStyle.BarMeanStdErr = 1 -> ScottPlot.Plottable.PopulationPlot.BoxStyle
ScottPlot.Plottable.PopulationPlot.BoxStyle.BarMeanStDev = 0 -> ScottPlot.Plottable.PopulationPlot.BoxStyle
ScottPlot.Plottable.PopulationPlot.BoxStyle.BoxMeanStdevStderr = 2 -> ScottPlot.Plottable.PopulationPlot.BoxStyle
ScottPlot.Plottable.PopulationPlot.BoxStyle.BoxMedianQuartileOutlier = 3 -> ScottPlot.Plottable.PopulationPlot.BoxStyle
ScottPlot.Plottable.PopulationPlot.BoxStyle.MeanAndStderr = 5 -> ScottPlot.Plottable.PopulationPlot.BoxStyle
ScottPlot.Plottable.PopulationPlot.BoxStyle.MeanAndStdev = 4 -> ScottPlot.Plottable.PopulationPlot.BoxStyle
ScottPlot.Plottable.PopulationPlot.DataBoxStyle.get -> ScottPlot.Plottable.PopulationPlot.BoxStyle
ScottPlot.Plottable.PopulationPlot.DataBoxStyle.set -> void
ScottPlot.Plottable.PopulationPlot.DataFormat.get -> ScottPlot.Plottable.PopulationPlot.DisplayItems
ScottPlot.Plottable.PopulationPlot.DataFormat.set -> void
ScottPlot.Plottable.PopulationPlot.DisplayItems
ScottPlot.Plottable.PopulationPlot.DisplayItems.BoxAndScatter = 1 -> ScottPlot.Plottable.PopulationPlot.DisplayItems
ScottPlot.Plottable.PopulationPlot.DisplayItems.BoxOnly = 0 -> ScottPlot.Plottable.PopulationPlot.DisplayItems
ScottPlot.Plottable.PopulationPlot.DisplayItems.ScatterAndBox = 2 -> ScottPlot.Plottable.PopulationPlot.DisplayItems
ScottPlot.Plottable.PopulationPlot.DisplayItems.ScatterOnBox = 3 -> ScottPlot.Plottable.PopulationPlot.DisplayItems
ScottPlot.Plottable.PopulationPlot.DisplayItems.ScatterOnly = 4 -> ScottPlot.Plottable.PopulationPlot.DisplayItems
ScottPlot.Plottable.PopulationPlot.DistributionCurve.get -> bool
ScottPlot.Plottable.PopulationPlot.DistributionCurve.set -> void
ScottPlot.Plottable.PopulationPlot.DistributionCurveColor.get -> System.Drawing.Color
ScottPlot.Plottable.PopulationPlot.DistributionCurveColor.set -> void
ScottPlot.Plottable.PopulationPlot.DistributionCurveLineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.PopulationPlot.DistributionCurveLineStyle.set -> void
ScottPlot.Plottable.PopulationPlot.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.PopulationPlot.GroupCount.get -> int
ScottPlot.Plottable.PopulationPlot.HorizontalAlignment
ScottPlot.Plottable.PopulationPlot.HorizontalAlignment.Center = 1 -> ScottPlot.Plottable.PopulationPlot.HorizontalAlignment
ScottPlot.Plottable.PopulationPlot.HorizontalAlignment.Left = 0 -> ScottPlot.Plottable.PopulationPlot.HorizontalAlignment
ScottPlot.Plottable.PopulationPlot.HorizontalAlignment.Right = 2 -> ScottPlot.Plottable.PopulationPlot.HorizontalAlignment
ScottPlot.Plottable.PopulationPlot.IsVisible.get -> bool
ScottPlot.Plottable.PopulationPlot.IsVisible.set -> void
ScottPlot.Plottable.PopulationPlot.PointCount.get -> int
ScottPlot.Plottable.PopulationPlot.Position
ScottPlot.Plottable.PopulationPlot.Position.Center = 1 -> ScottPlot.Plottable.PopulationPlot.Position
ScottPlot.Plottable.PopulationPlot.Position.Hide = 0 -> ScottPlot.Plottable.PopulationPlot.Position
ScottPlot.Plottable.PopulationPlot.Position.Left = 2 -> ScottPlot.Plottable.PopulationPlot.Position
ScottPlot.Plottable.PopulationPlot.Position.Right = 3 -> ScottPlot.Plottable.PopulationPlot.Position
ScottPlot.Plottable.PopulationPlot.ScatterOutlineColor.get -> System.Drawing.Color
ScottPlot.Plottable.PopulationPlot.ScatterOutlineColor.set -> void
ScottPlot.Plottable.PopulationPlot.SeriesCount.get -> int
ScottPlot.Plottable.PopulationPlot.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.PopulationPlot.XAxisIndex.get -> int
ScottPlot.Plottable.PopulationPlot.XAxisIndex.set -> void
ScottPlot.Plottable.PopulationPlot.YAxisIndex.get -> int
ScottPlot.Plottable.PopulationPlot.YAxisIndex.set -> void
ScottPlot.Plottable.RadarPlot
ScottPlot.Plottable.RadarPlot.AxisType.get -> ScottPlot.RadarAxis
ScottPlot.Plottable.RadarPlot.AxisType.set -> void
ScottPlot.Plottable.RadarPlot.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.RadarPlot.IndependentAxes.get -> bool
ScottPlot.Plottable.RadarPlot.IndependentAxes.set -> void
ScottPlot.Plottable.RadarPlot.IsVisible.get -> bool
ScottPlot.Plottable.RadarPlot.IsVisible.set -> void
ScottPlot.Plottable.RadarPlot.LineWidth.get -> int
ScottPlot.Plottable.RadarPlot.LineWidth.set -> void
ScottPlot.Plottable.RadarPlot.OutlineWidth.get -> float
ScottPlot.Plottable.RadarPlot.OutlineWidth.set -> void
ScottPlot.Plottable.RadarPlot.PointCount.get -> int
ScottPlot.Plottable.RadarPlot.ShowAxisValues.get -> bool
ScottPlot.Plottable.RadarPlot.ShowAxisValues.set -> void
ScottPlot.Plottable.RadarPlot.ShowCategoryLabels.get -> bool
ScottPlot.Plottable.RadarPlot.ShowCategoryLabels.set -> void
ScottPlot.Plottable.RadarPlot.Smooth -> bool
ScottPlot.Plottable.RadarPlot.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.RadarPlot.WebColor.get -> System.Drawing.Color
ScottPlot.Plottable.RadarPlot.WebColor.set -> void
ScottPlot.Plottable.RadarPlot.XAxisIndex.get -> int
ScottPlot.Plottable.RadarPlot.XAxisIndex.set -> void
ScottPlot.Plottable.RadarPlot.YAxisIndex.get -> int
ScottPlot.Plottable.RadarPlot.YAxisIndex.set -> void
ScottPlot.Plottable.RadialGaugePlot
ScottPlot.Plottable.RadialGaugePlot.BackgroundTransparencyFraction.get -> double
ScottPlot.Plottable.RadialGaugePlot.BackgroundTransparencyFraction.set -> void
ScottPlot.Plottable.RadialGaugePlot.CircularBackground.get -> bool
ScottPlot.Plottable.RadialGaugePlot.CircularBackground.set -> void
ScottPlot.Plottable.RadialGaugePlot.Clockwise.get -> bool
ScottPlot.Plottable.RadialGaugePlot.Clockwise.set -> void
ScottPlot.Plottable.RadialGaugePlot.EndCap.get -> System.Drawing.Drawing2D.LineCap
ScottPlot.Plottable.RadialGaugePlot.EndCap.set -> void
ScottPlot.Plottable.RadialGaugePlot.FontSizeFraction.get -> double
ScottPlot.Plottable.RadialGaugePlot.FontSizeFraction.set -> void
ScottPlot.Plottable.RadialGaugePlot.GaugeCount.get -> int
ScottPlot.Plottable.RadialGaugePlot.GaugeMode.get -> ScottPlot.RadialGaugeMode
ScottPlot.Plottable.RadialGaugePlot.GaugeMode.set -> void
ScottPlot.Plottable.RadialGaugePlot.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.RadialGaugePlot.IsVisible.get -> bool
ScottPlot.Plottable.RadialGaugePlot.IsVisible.set -> void
ScottPlot.Plottable.RadialGaugePlot.LabelPositionFraction.get -> double
ScottPlot.Plottable.RadialGaugePlot.LabelPositionFraction.set -> void
ScottPlot.Plottable.RadialGaugePlot.MaximumAngle.get -> double
ScottPlot.Plottable.RadialGaugePlot.MaximumAngle.set -> void
ScottPlot.Plottable.RadialGaugePlot.OrderInsideOut.get -> bool
ScottPlot.Plottable.RadialGaugePlot.OrderInsideOut.set -> void
ScottPlot.Plottable.RadialGaugePlot.ShowLevels.get -> bool
ScottPlot.Plottable.RadialGaugePlot.ShowLevels.set -> void
ScottPlot.Plottable.RadialGaugePlot.SpaceFraction.get -> double
ScottPlot.Plottable.RadialGaugePlot.SpaceFraction.set -> void
ScottPlot.Plottable.RadialGaugePlot.StartCap.get -> System.Drawing.Drawing2D.LineCap
ScottPlot.Plottable.RadialGaugePlot.StartCap.set -> void
ScottPlot.Plottable.RadialGaugePlot.StartingAngle.get -> float
ScottPlot.Plottable.RadialGaugePlot.StartingAngle.set -> void
ScottPlot.Plottable.RadialGaugePlot.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.RadialGaugePlot.XAxisIndex.get -> int
ScottPlot.Plottable.RadialGaugePlot.XAxisIndex.set -> void
ScottPlot.Plottable.RadialGaugePlot.YAxisIndex.get -> int
ScottPlot.Plottable.RadialGaugePlot.YAxisIndex.set -> void
ScottPlot.Plottable.RepeatingAxisLine
ScottPlot.Plottable.RepeatingAxisLine.Color.get -> System.Drawing.Color
ScottPlot.Plottable.RepeatingAxisLine.Color.set -> void
ScottPlot.Plottable.RepeatingAxisLine.Count.get -> int
ScottPlot.Plottable.RepeatingAxisLine.Count.set -> void
ScottPlot.Plottable.RepeatingAxisLine.DateTime.get -> System.DateTime
ScottPlot.Plottable.RepeatingAxisLine.DateTime.set -> void
ScottPlot.Plottable.RepeatingAxisLine.DragCursor.get -> ScottPlot.Cursor
ScottPlot.Plottable.RepeatingAxisLine.DragEnabled.get -> bool
ScottPlot.Plottable.RepeatingAxisLine.DragEnabled.set -> void
ScottPlot.Plottable.RepeatingAxisLine.Dragged -> System.EventHandler
ScottPlot.Plottable.RepeatingAxisLine.DragLimitMax.get -> double
ScottPlot.Plottable.RepeatingAxisLine.DragLimitMax.set -> void
ScottPlot.Plottable.RepeatingAxisLine.DragLimitMin.get -> double
ScottPlot.Plottable.RepeatingAxisLine.DragLimitMin.set -> void
ScottPlot.Plottable.RepeatingAxisLine.DragTo(double coordinateX, double coordinateY, bool fixedSize) -> void
ScottPlot.Plottable.RepeatingAxisLine.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.RepeatingAxisLine.HighlightReferenceLine.get -> bool
ScottPlot.Plottable.RepeatingAxisLine.HighlightReferenceLine.set -> void
ScottPlot.Plottable.RepeatingAxisLine.IgnoreAxisAuto.get -> bool
ScottPlot.Plottable.RepeatingAxisLine.IgnoreAxisAuto.set -> void
ScottPlot.Plottable.RepeatingAxisLine.IsUnderMouse(double coordinateX, double coordinateY, double snapX, double snapY) -> bool
ScottPlot.Plottable.RepeatingAxisLine.IsVisible.get -> bool
ScottPlot.Plottable.RepeatingAxisLine.IsVisible.set -> void
ScottPlot.Plottable.RepeatingAxisLine.LineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.RepeatingAxisLine.LineStyle.set -> void
ScottPlot.Plottable.RepeatingAxisLine.LineWidth.get -> float
ScottPlot.Plottable.RepeatingAxisLine.LineWidth.set -> void
ScottPlot.Plottable.RepeatingAxisLine.Max.get -> double
ScottPlot.Plottable.RepeatingAxisLine.Max.set -> void
ScottPlot.Plottable.RepeatingAxisLine.Min.get -> double
ScottPlot.Plottable.RepeatingAxisLine.Min.set -> void
ScottPlot.Plottable.RepeatingAxisLine.Offset.get -> int
ScottPlot.Plottable.RepeatingAxisLine.Offset.set -> void
ScottPlot.Plottable.RepeatingAxisLine.Position -> double
ScottPlot.Plottable.RepeatingAxisLine.PositionLabel.get -> bool
ScottPlot.Plottable.RepeatingAxisLine.PositionLabel.set -> void
ScottPlot.Plottable.RepeatingAxisLine.PositionLabelBackground.get -> System.Drawing.Color
ScottPlot.Plottable.RepeatingAxisLine.PositionLabelBackground.set -> void
ScottPlot.Plottable.RepeatingAxisLine.PositionLabelOppositeAxis.get -> bool
ScottPlot.Plottable.RepeatingAxisLine.PositionLabelOppositeAxis.set -> void
ScottPlot.Plottable.RepeatingAxisLine.RelativePosition.get -> bool
ScottPlot.Plottable.RepeatingAxisLine.RelativePosition.set -> void
ScottPlot.Plottable.RepeatingAxisLine.RepeatingAxisLine(bool isHorizontal) -> void
ScottPlot.Plottable.RepeatingAxisLine.Shift.get -> double
ScottPlot.Plottable.RepeatingAxisLine.Shift.set -> void
ScottPlot.Plottable.RepeatingAxisLine.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.RepeatingAxisLine.XAxisIndex.get -> int
ScottPlot.Plottable.RepeatingAxisLine.XAxisIndex.set -> void
ScottPlot.Plottable.RepeatingAxisLine.YAxisIndex.get -> int
ScottPlot.Plottable.RepeatingAxisLine.YAxisIndex.set -> void
ScottPlot.Plottable.RepeatingHLine
ScottPlot.Plottable.RepeatingHLine.count.get -> int
ScottPlot.Plottable.RepeatingHLine.count.set -> void
ScottPlot.Plottable.RepeatingHLine.offset.get -> int
ScottPlot.Plottable.RepeatingHLine.offset.set -> void
ScottPlot.Plottable.RepeatingHLine.relativeposition.get -> bool
ScottPlot.Plottable.RepeatingHLine.relativeposition.set -> void
ScottPlot.Plottable.RepeatingHLine.RepeatingHLine() -> void
ScottPlot.Plottable.RepeatingHLine.shift.get -> double
ScottPlot.Plottable.RepeatingHLine.shift.set -> void
ScottPlot.Plottable.RepeatingHLine.Y.get -> double
ScottPlot.Plottable.RepeatingHLine.Y.set -> void
ScottPlot.Plottable.RepeatingVLine
ScottPlot.Plottable.RepeatingVLine.count.get -> int
ScottPlot.Plottable.RepeatingVLine.count.set -> void
ScottPlot.Plottable.RepeatingVLine.offset.get -> int
ScottPlot.Plottable.RepeatingVLine.offset.set -> void
ScottPlot.Plottable.RepeatingVLine.relativeposition.get -> bool
ScottPlot.Plottable.RepeatingVLine.relativeposition.set -> void
ScottPlot.Plottable.RepeatingVLine.RepeatingVLine() -> void
ScottPlot.Plottable.RepeatingVLine.shift.get -> double
ScottPlot.Plottable.RepeatingVLine.shift.set -> void
ScottPlot.Plottable.RepeatingVLine.X.get -> double
ScottPlot.Plottable.RepeatingVLine.X.set -> void
ScottPlot.Plottable.ScaleBar
ScottPlot.Plottable.ScaleBar.Color.get -> System.Drawing.Color
ScottPlot.Plottable.ScaleBar.Color.set -> void
ScottPlot.Plottable.ScaleBar.FontBold.get -> bool
ScottPlot.Plottable.ScaleBar.FontBold.set -> void
ScottPlot.Plottable.ScaleBar.FontColor.get -> System.Drawing.Color
ScottPlot.Plottable.ScaleBar.FontColor.set -> void
ScottPlot.Plottable.ScaleBar.FontSize.get -> float
ScottPlot.Plottable.ScaleBar.FontSize.set -> void
ScottPlot.Plottable.ScaleBar.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.ScaleBar.Height.get -> double
ScottPlot.Plottable.ScaleBar.Height.set -> void
ScottPlot.Plottable.ScaleBar.IsVisible.get -> bool
ScottPlot.Plottable.ScaleBar.IsVisible.set -> void
ScottPlot.Plottable.ScaleBar.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.ScaleBar.LineColor.set -> void
ScottPlot.Plottable.ScaleBar.LineWidth.get -> float
ScottPlot.Plottable.ScaleBar.LineWidth.set -> void
ScottPlot.Plottable.ScaleBar.Padding.get -> float
ScottPlot.Plottable.ScaleBar.Padding.set -> void
ScottPlot.Plottable.ScaleBar.ScaleBar() -> void
ScottPlot.Plottable.ScaleBar.SetStyle(System.Drawing.Color? tickMarkColor, System.Drawing.Color? tickFontColor) -> void
ScottPlot.Plottable.ScaleBar.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.ScaleBar.Width.get -> double
ScottPlot.Plottable.ScaleBar.Width.set -> void
ScottPlot.Plottable.ScaleBar.XAxisIndex.get -> int
ScottPlot.Plottable.ScaleBar.XAxisIndex.set -> void
ScottPlot.Plottable.ScaleBar.YAxisIndex.get -> int
ScottPlot.Plottable.ScaleBar.YAxisIndex.set -> void
ScottPlot.Plottable.ScatterPlot
ScottPlot.Plottable.ScatterPlot.ArrowheadLength -> float
ScottPlot.Plottable.ScatterPlot.ArrowheadWidth -> float
ScottPlot.Plottable.ScatterPlot.Color.get -> System.Drawing.Color
ScottPlot.Plottable.ScatterPlot.Color.set -> void
ScottPlot.Plottable.ScatterPlot.ErrorCapSize -> float
ScottPlot.Plottable.ScatterPlot.ErrorLineWidth.get -> double
ScottPlot.Plottable.ScatterPlot.ErrorLineWidth.set -> void
ScottPlot.Plottable.ScatterPlot.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.ScatterPlot.GetPointNearest(double x, double y, double xyRatio = 1) -> (double x, double y, int index)
ScottPlot.Plottable.ScatterPlot.GetPointNearestX(double x) -> (double x, double y, int index)
ScottPlot.Plottable.ScatterPlot.GetPointNearestY(double y) -> (double x, double y, int index)
ScottPlot.Plottable.ScatterPlot.GetYDataRange(double xMin, double xMax) -> (double yMin, double yMax)
ScottPlot.Plottable.ScatterPlot.HighlightCoefficient.get -> float
ScottPlot.Plottable.ScatterPlot.HighlightCoefficient.set -> void
ScottPlot.Plottable.ScatterPlot.IsArrow.get -> bool
ScottPlot.Plottable.ScatterPlot.IsHighlighted.get -> bool
ScottPlot.Plottable.ScatterPlot.IsHighlighted.set -> void
ScottPlot.Plottable.ScatterPlot.IsVisible.get -> bool
ScottPlot.Plottable.ScatterPlot.IsVisible.set -> void
ScottPlot.Plottable.ScatterPlot.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.ScatterPlot.LineColor.set -> void
ScottPlot.Plottable.ScatterPlot.LineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.ScatterPlot.LineStyle.set -> void
ScottPlot.Plottable.ScatterPlot.LineWidth.get -> double
ScottPlot.Plottable.ScatterPlot.LineWidth.set -> void
ScottPlot.Plottable.ScatterPlot.MarkerColor.get -> System.Drawing.Color
ScottPlot.Plottable.ScatterPlot.MarkerColor.set -> void
ScottPlot.Plottable.ScatterPlot.MarkerLineWidth.get -> float
ScottPlot.Plottable.ScatterPlot.MarkerLineWidth.set -> void
ScottPlot.Plottable.ScatterPlot.MarkerShape.get -> ScottPlot.MarkerShape
ScottPlot.Plottable.ScatterPlot.MarkerShape.set -> void
ScottPlot.Plottable.ScatterPlot.MarkerSize.get -> float
ScottPlot.Plottable.ScatterPlot.MarkerSize.set -> void
ScottPlot.Plottable.ScatterPlot.MaxRenderIndex.get -> int?
ScottPlot.Plottable.ScatterPlot.MaxRenderIndex.set -> void
ScottPlot.Plottable.ScatterPlot.MinRenderIndex.get -> int?
ScottPlot.Plottable.ScatterPlot.MinRenderIndex.set -> void
ScottPlot.Plottable.ScatterPlot.NanBehavior
ScottPlot.Plottable.ScatterPlot.NanBehavior.Gap = 2 -> ScottPlot.Plottable.ScatterPlot.NanBehavior
ScottPlot.Plottable.ScatterPlot.NanBehavior.Ignore = 1 -> ScottPlot.Plottable.ScatterPlot.NanBehavior
ScottPlot.Plottable.ScatterPlot.NanBehavior.Throw = 0 -> ScottPlot.Plottable.ScatterPlot.NanBehavior
ScottPlot.Plottable.ScatterPlot.OffsetX.get -> double
ScottPlot.Plottable.ScatterPlot.OffsetX.set -> void
ScottPlot.Plottable.ScatterPlot.OffsetY.get -> double
ScottPlot.Plottable.ScatterPlot.OffsetY.set -> void
ScottPlot.Plottable.ScatterPlot.OnNaN -> ScottPlot.Plottable.ScatterPlot.NanBehavior
ScottPlot.Plottable.ScatterPlot.PointCount.get -> int
ScottPlot.Plottable.ScatterPlot.Smooth -> bool
ScottPlot.Plottable.ScatterPlot.SmoothTension -> double
ScottPlot.Plottable.ScatterPlot.StepDisplay.get -> bool
ScottPlot.Plottable.ScatterPlot.StepDisplay.set -> void
ScottPlot.Plottable.ScatterPlot.StepDisplayRight.get -> bool
ScottPlot.Plottable.ScatterPlot.StepDisplayRight.set -> void
ScottPlot.Plottable.ScatterPlot.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.ScatterPlot.XAxisIndex.get -> int
ScottPlot.Plottable.ScatterPlot.XAxisIndex.set -> void
ScottPlot.Plottable.ScatterPlot.YAxisIndex.get -> int
ScottPlot.Plottable.ScatterPlot.YAxisIndex.set -> void
ScottPlot.Plottable.ScatterPlotDraggable
ScottPlot.Plottable.ScatterPlotDraggable.CurrentIndex.get -> int
ScottPlot.Plottable.ScatterPlotDraggable.CurrentIndex.set -> void
ScottPlot.Plottable.ScatterPlotDraggable.DragCursor.get -> ScottPlot.Cursor
ScottPlot.Plottable.ScatterPlotDraggable.DragCursor.set -> void
ScottPlot.Plottable.ScatterPlotDraggable.DragEnabled.get -> bool
ScottPlot.Plottable.ScatterPlotDraggable.DragEnabled.set -> void
ScottPlot.Plottable.ScatterPlotDraggable.DragEnabledX.get -> bool
ScottPlot.Plottable.ScatterPlotDraggable.DragEnabledX.set -> void
ScottPlot.Plottable.ScatterPlotDraggable.DragEnabledY.get -> bool
ScottPlot.Plottable.ScatterPlotDraggable.DragEnabledY.set -> void
ScottPlot.Plottable.ScatterPlotDraggable.Dragged -> System.EventHandler
ScottPlot.Plottable.ScatterPlotDraggable.DragTo(double coordinateX, double coordinateY, bool fixedSize) -> void
ScottPlot.Plottable.ScatterPlotDraggable.DragXLimitMax.get -> double
ScottPlot.Plottable.ScatterPlotDraggable.DragXLimitMax.set -> void
ScottPlot.Plottable.ScatterPlotDraggable.DragXLimitMin.get -> double
ScottPlot.Plottable.ScatterPlotDraggable.DragXLimitMin.set -> void
ScottPlot.Plottable.ScatterPlotDraggable.DragYLimitMax.get -> double
ScottPlot.Plottable.ScatterPlotDraggable.DragYLimitMax.set -> void
ScottPlot.Plottable.ScatterPlotDraggable.DragYLimitMin.get -> double
ScottPlot.Plottable.ScatterPlotDraggable.DragYLimitMin.set -> void
ScottPlot.Plottable.ScatterPlotDraggable.IsUnderMouse(double coordinateX, double coordinateY, double snapX, double snapY) -> bool
ScottPlot.Plottable.ScatterPlotHighlight
ScottPlot.Plottable.ScatterPlotHighlight.HighlightClear() -> void
ScottPlot.Plottable.ScatterPlotHighlight.highlightedColor.get -> System.Drawing.Color
ScottPlot.Plottable.ScatterPlotHighlight.highlightedColor.set -> void
ScottPlot.Plottable.ScatterPlotHighlight.highlightedMarkerSize.get -> float
ScottPlot.Plottable.ScatterPlotHighlight.highlightedMarkerSize.set -> void
ScottPlot.Plottable.ScatterPlotHighlight.highlightedShape.get -> ScottPlot.MarkerShape
ScottPlot.Plottable.ScatterPlotHighlight.highlightedShape.set -> void
ScottPlot.Plottable.ScatterPlotHighlight.HighlightPoint(int index) -> (double x, double y, int index)
ScottPlot.Plottable.ScatterPlotHighlight.HighlightPointNearest(double x, double y) -> (double x, double y, int index)
ScottPlot.Plottable.ScatterPlotHighlight.HighlightPointNearestX(double x) -> (double x, double y, int index)
ScottPlot.Plottable.ScatterPlotHighlight.HighlightPointNearestY(double y) -> (double x, double y, int index)
ScottPlot.Plottable.ScatterPlotList<T>
ScottPlot.Plottable.ScatterPlotList<T>.Add(T x, T y) -> void
ScottPlot.Plottable.ScatterPlotList<T>.Clear() -> void
ScottPlot.Plottable.ScatterPlotList<T>.Color.get -> System.Drawing.Color
ScottPlot.Plottable.ScatterPlotList<T>.Color.set -> void
ScottPlot.Plottable.ScatterPlotList<T>.Count.get -> int
ScottPlot.Plottable.ScatterPlotList<T>.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.ScatterPlotList<T>.IsVisible.get -> bool
ScottPlot.Plottable.ScatterPlotList<T>.IsVisible.set -> void
ScottPlot.Plottable.ScatterPlotList<T>.LineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.ScatterPlotList<T>.LineStyle.set -> void
ScottPlot.Plottable.ScatterPlotList<T>.LineWidth.get -> float
ScottPlot.Plottable.ScatterPlotList<T>.LineWidth.set -> void
ScottPlot.Plottable.ScatterPlotList<T>.MarkerShape.get -> ScottPlot.MarkerShape
ScottPlot.Plottable.ScatterPlotList<T>.MarkerShape.set -> void
ScottPlot.Plottable.ScatterPlotList<T>.MarkerSize.get -> float
ScottPlot.Plottable.ScatterPlotList<T>.MarkerSize.set -> void
ScottPlot.Plottable.ScatterPlotList<T>.OnNaN -> ScottPlot.Plottable.ScatterPlot.NanBehavior
ScottPlot.Plottable.ScatterPlotList<T>.ScatterPlotList() -> void
ScottPlot.Plottable.ScatterPlotList<T>.Smooth -> bool
ScottPlot.Plottable.ScatterPlotList<T>.SmoothTension -> double
ScottPlot.Plottable.ScatterPlotList<T>.StepDisplay.get -> bool
ScottPlot.Plottable.ScatterPlotList<T>.StepDisplay.set -> void
ScottPlot.Plottable.ScatterPlotList<T>.StepDisplayRight.get -> bool
ScottPlot.Plottable.ScatterPlotList<T>.StepDisplayRight.set -> void
ScottPlot.Plottable.ScatterPlotList<T>.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.ScatterPlotList<T>.XAxisIndex.get -> int
ScottPlot.Plottable.ScatterPlotList<T>.XAxisIndex.set -> void
ScottPlot.Plottable.ScatterPlotList<T>.YAxisIndex.get -> int
ScottPlot.Plottable.ScatterPlotList<T>.YAxisIndex.set -> void
ScottPlot.Plottable.ScatterPlotListDraggable
ScottPlot.Plottable.ScatterPlotListDraggable.DragCursor.get -> ScottPlot.Cursor
ScottPlot.Plottable.ScatterPlotListDraggable.DragEnabled.get -> bool
ScottPlot.Plottable.ScatterPlotListDraggable.DragEnabled.set -> void
ScottPlot.Plottable.ScatterPlotListDraggable.Dragged -> System.EventHandler
ScottPlot.Plottable.ScatterPlotListDraggable.DragTo(double coordinateX, double coordinateY, bool fixedSize) -> void
ScottPlot.Plottable.ScatterPlotListDraggable.IsUnderMouse(double coordinateX, double coordinateY, double snapX, double snapY) -> bool
ScottPlot.Plottable.ScatterPlotListDraggable.ScatterPlotListDraggable() -> void
ScottPlot.Plottable.SignalPlot
ScottPlot.Plottable.SignalPlot.SignalPlot() -> void
ScottPlot.Plottable.SignalPlotBase<T>.BaselineColor.get -> System.Drawing.Color
ScottPlot.Plottable.SignalPlotBase<T>.BaselineColor.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.BaselineWidth.get -> float
ScottPlot.Plottable.SignalPlotBase<T>.BaselineWidth.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.BaselineY.get -> double
ScottPlot.Plottable.SignalPlotBase<T>.BaselineY.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.Color.get -> System.Drawing.Color
ScottPlot.Plottable.SignalPlotBase<T>.Color.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.FillAbove(System.Drawing.Color lowerColor, System.Drawing.Color upperColor, double alpha = 0.2) -> void
ScottPlot.Plottable.SignalPlotBase<T>.FillAbove(System.Drawing.Color? color = null, double alpha = 0.2) -> void
ScottPlot.Plottable.SignalPlotBase<T>.FillAboveAndBelow(System.Drawing.Color above1, System.Drawing.Color above2, System.Drawing.Color below1, System.Drawing.Color below2, double alpha = 0.2) -> void
ScottPlot.Plottable.SignalPlotBase<T>.FillAboveAndBelow(System.Drawing.Color colorAbove, System.Drawing.Color colorBelow, double alpha = 0.2) -> void
ScottPlot.Plottable.SignalPlotBase<T>.FillBelow(System.Drawing.Color upperColor, System.Drawing.Color lowerColor, double alpha = 0.2) -> void
ScottPlot.Plottable.SignalPlotBase<T>.FillBelow(System.Drawing.Color? color = null, double alpha = 0.2) -> void
ScottPlot.Plottable.SignalPlotBase<T>.FillColor1.get -> System.Drawing.Color?
ScottPlot.Plottable.SignalPlotBase<T>.FillColor1.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.FillColor2.get -> System.Drawing.Color?
ScottPlot.Plottable.SignalPlotBase<T>.FillColor2.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.FillDisable() -> void
ScottPlot.Plottable.SignalPlotBase<T>.FillType.get -> ScottPlot.FillType
ScottPlot.Plottable.SignalPlotBase<T>.FillType.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.GetPointNearestX(double x) -> (double x, T y, int index)
ScottPlot.Plottable.SignalPlotBase<T>.GetYDataRange(double xMin, double xMax) -> (T yMin, T yMax)
ScottPlot.Plottable.SignalPlotBase<T>.GradientFillColor1.get -> System.Drawing.Color?
ScottPlot.Plottable.SignalPlotBase<T>.GradientFillColor1.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.GradientFillColor2.get -> System.Drawing.Color?
ScottPlot.Plottable.SignalPlotBase<T>.GradientFillColor2.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.HighlightCoefficient.get -> float
ScottPlot.Plottable.SignalPlotBase<T>.HighlightCoefficient.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.IsHighlighted.get -> bool
ScottPlot.Plottable.SignalPlotBase<T>.IsHighlighted.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.IsVisible.get -> bool
ScottPlot.Plottable.SignalPlotBase<T>.IsVisible.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.LineColor.get -> System.Drawing.Color
ScottPlot.Plottable.SignalPlotBase<T>.LineColor.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.LineStyle.get -> ScottPlot.LineStyle
ScottPlot.Plottable.SignalPlotBase<T>.LineStyle.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.LineWidth.get -> double
ScottPlot.Plottable.SignalPlotBase<T>.LineWidth.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.MarkerColor.get -> System.Drawing.Color
ScottPlot.Plottable.SignalPlotBase<T>.MarkerColor.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.MarkerLineWidth.get -> float
ScottPlot.Plottable.SignalPlotBase<T>.MarkerLineWidth.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.MarkerShape.get -> ScottPlot.MarkerShape
ScottPlot.Plottable.SignalPlotBase<T>.MarkerShape.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.MarkerSize.get -> float
ScottPlot.Plottable.SignalPlotBase<T>.MarkerSize.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.MaxRenderIndex.get -> int
ScottPlot.Plottable.SignalPlotBase<T>.MaxRenderIndex.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.MinRenderIndex.get -> int
ScottPlot.Plottable.SignalPlotBase<T>.MinRenderIndex.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.OffsetX.get -> double
ScottPlot.Plottable.SignalPlotBase<T>.OffsetX.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.OffsetY.get -> T
ScottPlot.Plottable.SignalPlotBase<T>.OffsetY.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.OffsetYAsDouble.get -> double
ScottPlot.Plottable.SignalPlotBase<T>.PointCount.get -> int
ScottPlot.Plottable.SignalPlotBase<T>.SamplePeriod.get -> double
ScottPlot.Plottable.SignalPlotBase<T>.SamplePeriod.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.SampleRate.get -> double
ScottPlot.Plottable.SignalPlotBase<T>.SampleRate.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.ShowMarkersInLegend.get -> bool
ScottPlot.Plottable.SignalPlotBase<T>.ShowMarkersInLegend.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.SignalPlotBase() -> void
ScottPlot.Plottable.SignalPlotBase<T>.Smooth.get -> bool
ScottPlot.Plottable.SignalPlotBase<T>.Smooth.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.SmoothTension.get -> double
ScottPlot.Plottable.SignalPlotBase<T>.SmoothTension.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.StepDisplay.get -> bool
ScottPlot.Plottable.SignalPlotBase<T>.StepDisplay.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.StepDisplayRight.get -> bool
ScottPlot.Plottable.SignalPlotBase<T>.StepDisplayRight.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.Update(int index, T newValue) -> void
ScottPlot.Plottable.SignalPlotBase<T>.UseParallel.get -> bool
ScottPlot.Plottable.SignalPlotBase<T>.UseParallel.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.XAxisIndex.get -> int
ScottPlot.Plottable.SignalPlotBase<T>.XAxisIndex.set -> void
ScottPlot.Plottable.SignalPlotBase<T>.YAxisIndex.get -> int
ScottPlot.Plottable.SignalPlotBase<T>.YAxisIndex.set -> void
ScottPlot.Plottable.SignalPlotBase<T>._FillColor1 -> System.Drawing.Color?
ScottPlot.Plottable.SignalPlotBase<T>._FillColor2 -> System.Drawing.Color?
ScottPlot.Plottable.SignalPlotBase<T>._FillType -> ScottPlot.FillType
ScottPlot.Plottable.SignalPlotBase<T>._maxRenderIndex -> int
ScottPlot.Plottable.SignalPlotBase<T>._MinRenderIndex -> int
ScottPlot.Plottable.SignalPlotConst<T>.SignalPlotConst() -> void
ScottPlot.Plottable.SignalPlotConst<T>.TreesReady.get -> bool
ScottPlot.Plottable.SignalPlotGeneric<T>.SignalPlotGeneric() -> void
ScottPlot.Plottable.SignalPlotXY
ScottPlot.Plottable.SignalPlotXY.SignalPlotXY() -> void
ScottPlot.Plottable.SignalPlotXYConst<TX, TY>.SignalPlotXYConst() -> void
ScottPlot.Plottable.SignalPlotXYConst<TX, TY>.TreesReady.get -> bool
ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>.GetPointNearestX(TX x) -> (TX x, TY y, int index)
ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>.GetYDataRange(TX xMin, TX xMax) -> (TY yMin, TY yMax)
ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>.SignalPlotXYGeneric() -> void
ScottPlot.Plottable.Text
ScottPlot.Plottable.Text.Alignment.get -> ScottPlot.Alignment
ScottPlot.Plottable.Text.Alignment.set -> void
ScottPlot.Plottable.Text.BackgroundColor -> System.Drawing.Color
ScottPlot.Plottable.Text.BackgroundFill -> bool
ScottPlot.Plottable.Text.BorderColor.get -> System.Drawing.Color
ScottPlot.Plottable.Text.BorderColor.set -> void
ScottPlot.Plottable.Text.BorderSize.get -> float
ScottPlot.Plottable.Text.BorderSize.set -> void
ScottPlot.Plottable.Text.Color.get -> System.Drawing.Color
ScottPlot.Plottable.Text.Color.set -> void
ScottPlot.Plottable.Text.DragCursor.get -> ScottPlot.Cursor
ScottPlot.Plottable.Text.DragCursor.set -> void
ScottPlot.Plottable.Text.DragEnabled.get -> bool
ScottPlot.Plottable.Text.DragEnabled.set -> void
ScottPlot.Plottable.Text.Dragged -> System.EventHandler
ScottPlot.Plottable.Text.DragTo(double coordinateX, double coordinateY, bool fixedSize) -> void
ScottPlot.Plottable.Text.DragXLimitMax -> double
ScottPlot.Plottable.Text.DragXLimitMin -> double
ScottPlot.Plottable.Text.DragYLimitMax -> double
ScottPlot.Plottable.Text.DragYLimitMin -> double
ScottPlot.Plottable.Text.FontBold.get -> bool
ScottPlot.Plottable.Text.FontBold.set -> void
ScottPlot.Plottable.Text.FontSize.get -> float
ScottPlot.Plottable.Text.FontSize.set -> void
ScottPlot.Plottable.Text.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.Text.IsUnderMouse(double coordinateX, double coordinateY, double snapX, double snapY) -> bool
ScottPlot.Plottable.Text.IsVisible.get -> bool
ScottPlot.Plottable.Text.IsVisible.set -> void
ScottPlot.Plottable.Text.PixelOffsetX.get -> float
ScottPlot.Plottable.Text.PixelOffsetX.set -> void
ScottPlot.Plottable.Text.PixelOffsetY.get -> float
ScottPlot.Plottable.Text.PixelOffsetY.set -> void
ScottPlot.Plottable.Text.Rotation.get -> float
ScottPlot.Plottable.Text.Rotation.set -> void
ScottPlot.Plottable.Text.Text() -> void
ScottPlot.Plottable.Text.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.Text.X -> double
ScottPlot.Plottable.Text.XAxisIndex.get -> int
ScottPlot.Plottable.Text.XAxisIndex.set -> void
ScottPlot.Plottable.Text.Y -> double
ScottPlot.Plottable.Text.YAxisIndex.get -> int
ScottPlot.Plottable.Text.YAxisIndex.set -> void
ScottPlot.Plottable.Tooltip
ScottPlot.Plottable.Tooltip.ArrowSize.get -> int
ScottPlot.Plottable.Tooltip.ArrowSize.set -> void
ScottPlot.Plottable.Tooltip.BorderColor.get -> System.Drawing.Color
ScottPlot.Plottable.Tooltip.BorderColor.set -> void
ScottPlot.Plottable.Tooltip.BorderWidth.get -> float
ScottPlot.Plottable.Tooltip.BorderWidth.set -> void
ScottPlot.Plottable.Tooltip.Color.get -> System.Drawing.Color
ScottPlot.Plottable.Tooltip.Color.set -> void
ScottPlot.Plottable.Tooltip.FillColor.get -> System.Drawing.Color
ScottPlot.Plottable.Tooltip.FillColor.set -> void
ScottPlot.Plottable.Tooltip.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.Tooltip.HitCursor.get -> ScottPlot.Cursor
ScottPlot.Plottable.Tooltip.HitCursor.set -> void
ScottPlot.Plottable.Tooltip.HitTest(ScottPlot.Coordinate coord) -> bool
ScottPlot.Plottable.Tooltip.HitTestEnabled.get -> bool
ScottPlot.Plottable.Tooltip.HitTestEnabled.set -> void
ScottPlot.Plottable.Tooltip.IsVisible.get -> bool
ScottPlot.Plottable.Tooltip.IsVisible.set -> void
ScottPlot.Plottable.Tooltip.LabelPadding.get -> int
ScottPlot.Plottable.Tooltip.LabelPadding.set -> void
ScottPlot.Plottable.Tooltip.Tooltip() -> void
ScottPlot.Plottable.Tooltip.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.Tooltip.X.get -> double
ScottPlot.Plottable.Tooltip.X.set -> void
ScottPlot.Plottable.Tooltip.XAxisIndex.get -> int
ScottPlot.Plottable.Tooltip.XAxisIndex.set -> void
ScottPlot.Plottable.Tooltip.Y.get -> double
ScottPlot.Plottable.Tooltip.Y.set -> void
ScottPlot.Plottable.Tooltip.YAxisIndex.get -> int
ScottPlot.Plottable.Tooltip.YAxisIndex.set -> void
ScottPlot.Plottable.VectorField
ScottPlot.Plottable.VectorField.Anchor.get -> ScottPlot.ArrowAnchor
ScottPlot.Plottable.VectorField.Anchor.set -> void
ScottPlot.Plottable.VectorField.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.VectorField.IsVisible.get -> bool
ScottPlot.Plottable.VectorField.IsVisible.set -> void
ScottPlot.Plottable.VectorField.MarkerShape.get -> ScottPlot.MarkerShape
ScottPlot.Plottable.VectorField.MarkerShape.set -> void
ScottPlot.Plottable.VectorField.MarkerSize.get -> float
ScottPlot.Plottable.VectorField.MarkerSize.set -> void
ScottPlot.Plottable.VectorField.PointCount.get -> int
ScottPlot.Plottable.VectorField.ScaledArrowheadLength.get -> double
ScottPlot.Plottable.VectorField.ScaledArrowheadLength.set -> void
ScottPlot.Plottable.VectorField.ScaledArrowheads.get -> bool
ScottPlot.Plottable.VectorField.ScaledArrowheads.set -> void
ScottPlot.Plottable.VectorField.ScaledArrowheadWidth.get -> double
ScottPlot.Plottable.VectorField.ScaledArrowheadWidth.set -> void
ScottPlot.Plottable.VectorField.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.VectorField.XAxisIndex.get -> int
ScottPlot.Plottable.VectorField.XAxisIndex.set -> void
ScottPlot.Plottable.VectorField.YAxisIndex.get -> int
ScottPlot.Plottable.VectorField.YAxisIndex.set -> void
ScottPlot.Plottable.VectorFieldList
ScottPlot.Plottable.VectorFieldList.Color.get -> System.Drawing.Color
ScottPlot.Plottable.VectorFieldList.Color.set -> void
ScottPlot.Plottable.VectorFieldList.GetAxisLimits() -> ScottPlot.AxisLimits
ScottPlot.Plottable.VectorFieldList.IsVisible.get -> bool
ScottPlot.Plottable.VectorFieldList.IsVisible.set -> void
ScottPlot.Plottable.VectorFieldList.ValidateData(bool deep = false) -> void
ScottPlot.Plottable.VectorFieldList.VectorFieldList() -> void
ScottPlot.Plottable.VectorFieldList.XAxisIndex.get -> int
ScottPlot.Plottable.VectorFieldList.XAxisIndex.set -> void
ScottPlot.Plottable.VectorFieldList.YAxisIndex.get -> int
ScottPlot.Plottable.VectorFieldList.YAxisIndex.set -> void
ScottPlot.Plottable.VLine
ScottPlot.Plottable.VLine.VLine() -> void
ScottPlot.Plottable.VLine.X.get -> double
ScottPlot.Plottable.VLine.X.set -> void
ScottPlot.Plottable.VLineVector
ScottPlot.Plottable.VLineVector.offset.get -> int
ScottPlot.Plottable.VLineVector.offset.set -> void
ScottPlot.Plottable.VLineVector.VLineVector() -> void
ScottPlot.Plottable.VSpan
ScottPlot.Plottable.VSpan.VSpan() -> void
ScottPlot.Plottable.VSpan.Y1.get -> double
ScottPlot.Plottable.VSpan.Y1.set -> void
ScottPlot.Plottable.VSpan.Y2.get -> double
ScottPlot.Plottable.VSpan.Y2.set -> void
ScottPlot.RadarAxis
ScottPlot.RadarAxis.Circle = 0 -> ScottPlot.RadarAxis
ScottPlot.RadarAxis.None = 2 -> ScottPlot.RadarAxis
ScottPlot.RadarAxis.Polygon = 1 -> ScottPlot.RadarAxis
ScottPlot.RadialGaugeMode
ScottPlot.RadialGaugeMode.Sequential = 1 -> ScottPlot.RadialGaugeMode
ScottPlot.RadialGaugeMode.SingleGauge = 2 -> ScottPlot.RadialGaugeMode
ScottPlot.RadialGaugeMode.Stacked = 0 -> ScottPlot.RadialGaugeMode
ScottPlot.Renderable.AdditionalBottomAxis
ScottPlot.Renderable.AdditionalLeftAxis
ScottPlot.Renderable.AdditionalRightAxis
ScottPlot.Renderable.AdditionalTopAxis
ScottPlot.Renderable.ArrowStyle
ScottPlot.Renderable.ArrowStyle.Anchor -> ScottPlot.ArrowAnchor
ScottPlot.Renderable.ArrowStyle.ArrowStyle() -> void
ScottPlot.Renderable.ArrowStyle.LineWidth -> float
ScottPlot.Renderable.ArrowStyle.MarkerShape -> ScottPlot.MarkerShape
ScottPlot.Renderable.ArrowStyle.MarkerSize -> float
ScottPlot.Renderable.ArrowStyle.NonScaledArrowheadLength -> float
ScottPlot.Renderable.ArrowStyle.NonScaledArrowheadWidth -> float
ScottPlot.Renderable.ArrowStyle.ScaledArrowheadLength -> double
ScottPlot.Renderable.ArrowStyle.ScaledArrowheads -> bool
ScottPlot.Renderable.ArrowStyle.ScaledArrowheadWidth -> double
ScottPlot.Renderable.Axis
ScottPlot.Renderable.Axis.AutomaticTickPositions() -> void
ScottPlot.Renderable.Axis.Axis() -> void
ScottPlot.Renderable.Axis.AxisIndex -> int
ScottPlot.Renderable.Axis.Color(System.Drawing.Color color) -> void
ScottPlot.Renderable.Axis.DateTimeFormat(bool enable) -> void
ScottPlot.Renderable.Axis.Edge.get -> ScottPlot.Renderable.Edge
ScottPlot.Renderable.Axis.Edge.set -> void
ScottPlot.Renderable.Axis.GetSize() -> float
ScottPlot.Renderable.Axis.Grid(bool enable) -> void
ScottPlot.Renderable.Axis.Hide(bool hidden = true) -> void
ScottPlot.Renderable.Axis.IsHorizontal.get -> bool
ScottPlot.Renderable.Axis.IsVertical.get -> bool
ScottPlot.Renderable.Axis.IsVisible.get -> bool
ScottPlot.Renderable.Axis.IsVisible.set -> void
ScottPlot.Renderable.Axis.Layout(float? padding = null, float? minimumSize = null, float? maximumSize = null) -> void
ScottPlot.Renderable.Axis.Line(bool? visible = null, System.Drawing.Color? color = null, float? width = null) -> void
ScottPlot.Renderable.Axis.LockLimits(bool locked = true) -> void
ScottPlot.Renderable.Axis.MajorGrid(bool? enable = null, System.Drawing.Color? color = null, float? lineWidth = null, ScottPlot.LineStyle? lineStyle = null) -> void
ScottPlot.Renderable.Axis.ManualTickSpacing(double manualSpacing) -> void
ScottPlot.Renderable.Axis.ManualTickSpacing(double manualSpacing, ScottPlot.Ticks.DateTimeUnit manualSpacingDateTimeUnit) -> void
ScottPlot.Renderable.Axis.MinimumTickSpacing(double spacing) -> void
ScottPlot.Renderable.Axis.MinorGrid(bool? enable = null, System.Drawing.Color? color = null, float? lineWidth = null, ScottPlot.LineStyle? lineStyle = null, bool? logScale = null) -> void
ScottPlot.Renderable.Axis.MinorLogScale(bool enable, bool roundMajorTicks = true, int minorTickCount = 10) -> void
ScottPlot.Renderable.Axis.PixelOffset.get -> float
ScottPlot.Renderable.Axis.PixelSnap(bool enable) -> void
ScottPlot.Renderable.Axis.RecalculateAxisSize() -> void
ScottPlot.Renderable.Axis.ResetLayout() -> void
ScottPlot.Renderable.Axis.RulerMode(bool enable) -> void
ScottPlot.Renderable.Axis.SetOffset(float pixels) -> void
ScottPlot.Renderable.Axis.SetSizeLimit(float px) -> void
ScottPlot.Renderable.Axis.SetSizeLimit(float? min = null, float? max = null, float? pad = null) -> void
ScottPlot.Renderable.Axis.TickDensity(double ratio = 1) -> void
ScottPlot.Renderable.Axis.TickMarkColor(System.Drawing.Color color) -> void
ScottPlot.Renderable.Axis.TickMarkColor(System.Drawing.Color majorColor, System.Drawing.Color minorColor) -> void
ScottPlot.Renderable.Axis.TickMarkDirection(bool outward) -> void
ScottPlot.Renderable.Axis.TickMeasurement(bool manual) -> void
ScottPlot.Renderable.Axis.Ticks(bool enable) -> void
ScottPlot.Renderable.Axis.Ticks(bool major, bool minor, bool majorLabels = true) -> void
ScottPlot.Renderable.AxisDimensions
ScottPlot.Renderable.AxisDimensions.AxisDimensions() -> void
ScottPlot.Renderable.AxisDimensions.Center.get -> double
ScottPlot.Renderable.AxisDimensions.DataOffsetPx.get -> float
ScottPlot.Renderable.AxisDimensions.DataSizePx.get -> float
ScottPlot.Renderable.AxisDimensions.FigureSizePx.get -> float
ScottPlot.Renderable.AxisDimensions.GetPixel(double unit) -> float
ScottPlot.Renderable.AxisDimensions.GetUnit(float pixel) -> double
ScottPlot.Renderable.AxisDimensions.HasBeenSet.get -> bool
ScottPlot.Renderable.AxisDimensions.InnerBoundaryMax.get -> double
ScottPlot.Renderable.AxisDimensions.InnerBoundaryMin.get -> double
ScottPlot.Renderable.AxisDimensions.IsInverted -> bool
ScottPlot.Renderable.AxisDimensions.IsNan.get -> bool
ScottPlot.Renderable.AxisDimensions.LockLimits(bool locked = true) -> void
ScottPlot.Renderable.AxisDimensions.Max.get -> double
ScottPlot.Renderable.AxisDimensions.Min.get -> double
ScottPlot.Renderable.AxisDimensions.OuterBoundaryMax.get -> double
ScottPlot.Renderable.AxisDimensions.OuterBoundaryMin.get -> double
ScottPlot.Renderable.AxisDimensions.Pan(double units) -> void
ScottPlot.Renderable.AxisDimensions.PanPx(float pixels) -> void
ScottPlot.Renderable.AxisDimensions.PxPerUnit.get -> double
ScottPlot.Renderable.AxisDimensions.RationalLimits() -> (double min, double max)
ScottPlot.Renderable.AxisDimensions.Recall() -> void
ScottPlot.Renderable.AxisDimensions.Remember() -> void
ScottPlot.Renderable.AxisDimensions.ResetLimits() -> void
ScottPlot.Renderable.AxisDimensions.Resize(float figureSizePx, float? dataSizePx = null, float? dataOffsetPx = null) -> void
ScottPlot.Renderable.AxisDimensions.SetAxis(double? min, double? max) -> void
ScottPlot.Renderable.AxisDimensions.SetBoundsInner(double lower = Infinity, double upper = -Infinity) -> void
ScottPlot.Renderable.AxisDimensions.SetBoundsOuter(double lower = -Infinity, double upper = Infinity) -> void
ScottPlot.Renderable.AxisDimensions.SetPadding(float padBefore, float padAfter) -> void
ScottPlot.Renderable.AxisDimensions.Span.get -> double
ScottPlot.Renderable.AxisDimensions.SpanBound.get -> double
ScottPlot.Renderable.AxisDimensions.UnitsPerPx.get -> double
ScottPlot.Renderable.AxisDimensions.Zoom(double frac = 1, double? zoomTo = null) -> void
ScottPlot.Renderable.AxisLabel
ScottPlot.Renderable.AxisLabel.AxisLabel() -> void
ScottPlot.Renderable.AxisLabel.Edge -> ScottPlot.Renderable.Edge
ScottPlot.Renderable.AxisLabel.ImagePadding.get -> float
ScottPlot.Renderable.AxisLabel.ImagePaddingToDataArea -> float
ScottPlot.Renderable.AxisLabel.ImagePaddingToFigureEdge -> float
ScottPlot.Renderable.AxisLabel.IsVisible.get -> bool
ScottPlot.Renderable.AxisLabel.IsVisible.set -> void
ScottPlot.Renderable.AxisLabel.Measure() -> System.Drawing.SizeF
ScottPlot.Renderable.AxisLabel.PixelOffset -> float
ScottPlot.Renderable.AxisLabel.PixelSize -> float
ScottPlot.Renderable.AxisLabel.PixelSizePadding -> float
ScottPlot.Renderable.AxisLine
ScottPlot.Renderable.AxisLine.AxisLine() -> void
ScottPlot.Renderable.AxisLine.Color -> System.Drawing.Color
ScottPlot.Renderable.AxisLine.Edge -> ScottPlot.Renderable.Edge
ScottPlot.Renderable.AxisLine.IsVisible.get -> bool
ScottPlot.Renderable.AxisLine.IsVisible.set -> void
ScottPlot.Renderable.AxisLine.PixelOffset -> float
ScottPlot.Renderable.AxisLine.Width -> float
ScottPlot.Renderable.AxisTicks
ScottPlot.Renderable.AxisTicks.AxisTicks() -> void
ScottPlot.Renderable.AxisTicks.Edge -> ScottPlot.Renderable.Edge
ScottPlot.Renderable.AxisTicks.IsHorizontal.get -> bool
ScottPlot.Renderable.AxisTicks.IsVertical.get -> bool
ScottPlot.Renderable.AxisTicks.IsVisible.get -> bool
ScottPlot.Renderable.AxisTicks.IsVisible.set -> void
ScottPlot.Renderable.AxisTicks.MajorGridColor -> System.Drawing.Color
ScottPlot.Renderable.AxisTicks.MajorGridStyle -> ScottPlot.LineStyle
ScottPlot.Renderable.AxisTicks.MajorGridVisible -> bool
ScottPlot.Renderable.AxisTicks.MajorGridWidth -> float
ScottPlot.Renderable.AxisTicks.MajorTickColor -> System.Drawing.Color
ScottPlot.Renderable.AxisTicks.MajorTickLength -> float
ScottPlot.Renderable.AxisTicks.MajorTickVisible -> bool
ScottPlot.Renderable.AxisTicks.MinorGridColor -> System.Drawing.Color
ScottPlot.Renderable.AxisTicks.MinorGridStyle -> ScottPlot.LineStyle
ScottPlot.Renderable.AxisTicks.MinorGridVisible -> bool
ScottPlot.Renderable.AxisTicks.MinorGridWidth -> float
ScottPlot.Renderable.AxisTicks.MinorTickColor -> System.Drawing.Color
ScottPlot.Renderable.AxisTicks.MinorTickLength -> float
ScottPlot.Renderable.AxisTicks.MinorTickVisible -> bool
ScottPlot.Renderable.AxisTicks.PixelOffset -> float
ScottPlot.Renderable.AxisTicks.RulerMode -> bool
ScottPlot.Renderable.AxisTicks.SnapPx -> bool
ScottPlot.Renderable.AxisTicks.TickLabelRotation -> float
ScottPlot.Renderable.AxisTicks.TickLabelVisible -> bool
ScottPlot.Renderable.AxisTicks.TicksExtendOutward -> bool
ScottPlot.Renderable.BenchmarkMessage
ScottPlot.Renderable.BenchmarkMessage.BenchmarkMessage() -> void
ScottPlot.Renderable.BenchmarkMessage.Hz.get -> double
ScottPlot.Renderable.BenchmarkMessage.MSec.get -> double
ScottPlot.Renderable.BenchmarkMessage.Restart() -> void
ScottPlot.Renderable.BenchmarkMessage.Stop() -> void
ScottPlot.Renderable.DataBackground
ScottPlot.Renderable.DataBackground.Color.get -> System.Drawing.Color
ScottPlot.Renderable.DataBackground.Color.set -> void
ScottPlot.Renderable.DataBackground.DataBackground() -> void
ScottPlot.Renderable.DataBackground.IsVisible.get -> bool
ScottPlot.Renderable.DataBackground.IsVisible.set -> void
ScottPlot.Renderable.DefaultBottomAxis
ScottPlot.Renderable.DefaultBottomAxis.DefaultBottomAxis() -> void
ScottPlot.Renderable.DefaultLeftAxis
ScottPlot.Renderable.DefaultLeftAxis.DefaultLeftAxis() -> void
ScottPlot.Renderable.DefaultRightAxis
ScottPlot.Renderable.DefaultRightAxis.DefaultRightAxis() -> void
ScottPlot.Renderable.DefaultTopAxis
ScottPlot.Renderable.DefaultTopAxis.DefaultTopAxis() -> void
ScottPlot.Renderable.Edge
ScottPlot.Renderable.Edge.Bottom = 2 -> ScottPlot.Renderable.Edge
ScottPlot.Renderable.Edge.Left = 0 -> ScottPlot.Renderable.Edge
ScottPlot.Renderable.Edge.Right = 1 -> ScottPlot.Renderable.Edge
ScottPlot.Renderable.Edge.Top = 3 -> ScottPlot.Renderable.Edge
ScottPlot.Renderable.ErrorMessage
ScottPlot.Renderable.ErrorMessage.ErrorMessage() -> void
ScottPlot.Renderable.FigureBackground
ScottPlot.Renderable.FigureBackground.Color.get -> System.Drawing.Color
ScottPlot.Renderable.FigureBackground.Color.set -> void
ScottPlot.Renderable.FigureBackground.FigureBackground() -> void
ScottPlot.Renderable.FigureBackground.IsVisible.get -> bool
ScottPlot.Renderable.FigureBackground.IsVisible.set -> void
ScottPlot.Renderable.IRenderable
ScottPlot.Renderable.IRenderable.IsVisible.get -> bool
ScottPlot.Renderable.IRenderable.IsVisible.set -> void
ScottPlot.Renderable.Legend
ScottPlot.Renderable.Legend.AntiAlias.get -> bool
ScottPlot.Renderable.Legend.AntiAlias.set -> void
ScottPlot.Renderable.Legend.Count.get -> int
ScottPlot.Renderable.Legend.FillColor.get -> System.Drawing.Color
ScottPlot.Renderable.Legend.FillColor.set -> void
ScottPlot.Renderable.Legend.FixedLineWidth.get -> bool
ScottPlot.Renderable.Legend.FixedLineWidth.set -> void
ScottPlot.Renderable.Legend.FontBold.set -> void
ScottPlot.Renderable.Legend.FontColor.set -> void
ScottPlot.Renderable.Legend.FontSize.set -> void
ScottPlot.Renderable.Legend.HasItems.get -> bool
ScottPlot.Renderable.Legend.IsDetached.get -> bool
ScottPlot.Renderable.Legend.IsDetached.set -> void
ScottPlot.Renderable.Legend.IsVisible.get -> bool
ScottPlot.Renderable.Legend.IsVisible.set -> void
ScottPlot.Renderable.Legend.Legend() -> void
ScottPlot.Renderable.Legend.Location.get -> ScottPlot.Alignment
ScottPlot.Renderable.Legend.Location.set -> void
ScottPlot.Renderable.Legend.Orientation.get -> ScottPlot.Orientation
ScottPlot.Renderable.Legend.Orientation.set -> void
ScottPlot.Renderable.Legend.OutlineColor.get -> System.Drawing.Color
ScottPlot.Renderable.Legend.OutlineColor.set -> void
ScottPlot.Renderable.Legend.Padding.get -> float
ScottPlot.Renderable.Legend.Padding.set -> void
ScottPlot.Renderable.Legend.ReverseOrder.get -> bool
ScottPlot.Renderable.Legend.ReverseOrder.set -> void
ScottPlot.Renderable.Legend.ShadowColor.get -> System.Drawing.Color
ScottPlot.Renderable.Legend.ShadowColor.set -> void
ScottPlot.Renderable.Legend.ShadowOffsetX.get -> float
ScottPlot.Renderable.Legend.ShadowOffsetX.set -> void
ScottPlot.Renderable.Legend.ShadowOffsetY.get -> float
ScottPlot.Renderable.Legend.ShadowOffsetY.set -> void
ScottPlot.Renderable.Message
ScottPlot.Renderable.Message.BorderColor -> System.Drawing.Color
ScottPlot.Renderable.Message.BorderWidth -> float
ScottPlot.Renderable.Message.FillColor -> System.Drawing.Color
ScottPlot.Renderable.Message.FontBold -> bool
ScottPlot.Renderable.Message.FontColor -> System.Drawing.Color
ScottPlot.Renderable.Message.FontSize -> float
ScottPlot.Renderable.Message.HAlign -> ScottPlot.HorizontalAlignment
ScottPlot.Renderable.Message.IsVisible.get -> bool
ScottPlot.Renderable.Message.IsVisible.set -> void
ScottPlot.Renderable.Message.Message() -> void
ScottPlot.Renderable.Message.Padding -> float
ScottPlot.Renderable.Message.VAlign -> ScottPlot.VerticalAlignment
ScottPlot.Renderable.ZoomRectangle
ScottPlot.Renderable.ZoomRectangle.BorderColor.get -> System.Drawing.Color
ScottPlot.Renderable.ZoomRectangle.BorderColor.set -> void
ScottPlot.Renderable.ZoomRectangle.Clear() -> void
ScottPlot.Renderable.ZoomRectangle.FillColor.get -> System.Drawing.Color
ScottPlot.Renderable.ZoomRectangle.FillColor.set -> void
ScottPlot.Renderable.ZoomRectangle.IsVisible.get -> bool
ScottPlot.Renderable.ZoomRectangle.IsVisible.set -> void
ScottPlot.Renderable.ZoomRectangle.Set(float x, float y, float width, float height) -> void
ScottPlot.Renderable.ZoomRectangle.ZoomRectangle() -> void
ScottPlot.RenderType
ScottPlot.RenderType.HighQuality = 1 -> ScottPlot.RenderType
ScottPlot.RenderType.HighQualityDelayed = 2 -> ScottPlot.RenderType
ScottPlot.RenderType.LowQuality = 0 -> ScottPlot.RenderType
ScottPlot.RenderType.LowQualityThenHighQuality = 3 -> ScottPlot.RenderType
ScottPlot.RenderType.LowQualityThenHighQualityDelayed = 4 -> ScottPlot.RenderType
ScottPlot.RenderType.ProcessMouseEventsOnly = 5 -> ScottPlot.RenderType
ScottPlot.Settings
ScottPlot.Settings.AllAxesHaveBeenSet.get -> bool
ScottPlot.Settings.AxesPanPx(float dxPx, float dyPx) -> void
ScottPlot.Settings.AxesZoomPx(float xPx, float yPx, bool lockRatio = false) -> void
ScottPlot.Settings.AxesZoomTo(double xFrac, double yFrac, float xPixel, float yPixel) -> void
ScottPlot.Settings.AxisAutoAll(double? horizontalMargin = null, double? verticalMargin = null) -> void
ScottPlot.Settings.AxisAutoAllX(double? margin = null) -> void
ScottPlot.Settings.AxisAutoAllY(double? margin = null) -> void
ScottPlot.Settings.AxisAutoUnsetAxes(double? horizontalMargin = null, double? verticalMargin = null) -> void
ScottPlot.Settings.AxisAutoX(int xAxisIndex, double? margin = null) -> void
ScottPlot.Settings.AxisAutoY(int yAxisIndex, double? margin = null) -> void
ScottPlot.Settings.AxisLimits(int xAxisIndex, int yAxisIndex) -> ScottPlot.AxisLimits
ScottPlot.Settings.AxisSet(double? xMin, double? xMax, double? yMin, double? yMax, int xAxisIndex = 0, int yAxisIndex = 0) -> void
ScottPlot.Settings.AxisSet(ScottPlot.AxisLimits limits, int xAxisIndex = 0, int yAxisIndex = 0) -> void
ScottPlot.Settings.CopyPrimaryLayoutToAllAxes() -> void
ScottPlot.Settings.DrawGridAbovePlottables.get -> bool
ScottPlot.Settings.DrawGridAbovePlottables.set -> void
ScottPlot.Settings.EnforceEqualAxisScales() -> void
ScottPlot.Settings.EqualScaleMode.get -> ScottPlot.EqualScaleMode
ScottPlot.Settings.EqualScaleMode.set -> void
ScottPlot.Settings.GetNextColor() -> System.Drawing.Color
ScottPlot.Settings.Height.get -> int
ScottPlot.Settings.IgnoreOverflowExceptionsDuringRender -> bool
ScottPlot.Settings.LayoutAuto() -> void
ScottPlot.Settings.ManualDataPadding.get -> ScottPlot.PixelPadding?
ScottPlot.Settings.ManualDataPadding.set -> void
ScottPlot.Settings.MarginsX -> double
ScottPlot.Settings.MarginsY -> double
ScottPlot.Settings.MouseDown(float mouseDownX, float mouseDownY) -> void
ScottPlot.Settings.MouseDownX.get -> float
ScottPlot.Settings.MouseDownY.get -> float
ScottPlot.Settings.MousePan(float mouseNowX, float mouseNowY) -> void
ScottPlot.Settings.MouseZoom(float mouseNowX, float mouseNowY) -> void
ScottPlot.Settings.MouseZoomRect(float mouseNowX, float mouseNowY, bool finalize = false) -> void
ScottPlot.Settings.PlottablesIdentifier.get -> int
ScottPlot.Settings.RecallAxisLimits() -> void
ScottPlot.Settings.RememberAxisLimits() -> void
ScottPlot.Settings.ResetAxisLimits() -> void
ScottPlot.Settings.Resize(float width, float height) -> void
ScottPlot.Settings.Settings() -> void
ScottPlot.Settings.Width.get -> int
ScottPlot.shadowDirection
ScottPlot.SnapLogic.Custom1D
ScottPlot.SnapLogic.Custom1D.Snap(double value) -> double
ScottPlot.SnapLogic.Independent2D
ScottPlot.SnapLogic.Independent2D.Independent2D() -> void
ScottPlot.SnapLogic.Independent2D.Snap(ScottPlot.Coordinate value) -> ScottPlot.Coordinate
ScottPlot.SnapLogic.Integer1D
ScottPlot.SnapLogic.Integer1D.Integer1D() -> void
ScottPlot.SnapLogic.Integer1D.Snap(double value) -> double
ScottPlot.SnapLogic.Integer2D
ScottPlot.SnapLogic.Integer2D.Integer2D() -> void
ScottPlot.SnapLogic.Integer2D.Snap(ScottPlot.Coordinate value) -> ScottPlot.Coordinate
ScottPlot.SnapLogic.ISnap1D
ScottPlot.SnapLogic.ISnap1D.Snap(double value) -> double
ScottPlot.SnapLogic.ISnap2D
ScottPlot.SnapLogic.ISnap2D.Snap(ScottPlot.Coordinate value) -> ScottPlot.Coordinate
ScottPlot.SnapLogic.Nearest1D
ScottPlot.SnapLogic.Nearest1D.Snap(double value) -> double
ScottPlot.SnapLogic.Nearest1D.SnapIndex(double value) -> int
ScottPlot.SnapLogic.Nearest2D
ScottPlot.SnapLogic.Nearest2D.Snap(ScottPlot.Coordinate value) -> ScottPlot.Coordinate
ScottPlot.SnapLogic.Nearest2D.SnapIndex(ScottPlot.Coordinate value) -> int
ScottPlot.SnapLogic.NoSnap1D
ScottPlot.SnapLogic.NoSnap1D.NoSnap1D() -> void
ScottPlot.SnapLogic.NoSnap1D.Snap(double value) -> double
ScottPlot.SnapLogic.NoSnap2D
ScottPlot.SnapLogic.NoSnap2D.NoSnap2D() -> void
ScottPlot.SnapLogic.NoSnap2D.Snap(ScottPlot.Coordinate value) -> ScottPlot.Coordinate
ScottPlot.StarAxis
ScottPlot.StarAxis.AxisType.get -> ScottPlot.RadarAxis
ScottPlot.StarAxis.AxisType.set -> void
ScottPlot.StarAxis.ImagePlacement.get -> ScottPlot.ImagePlacement
ScottPlot.StarAxis.ImagePlacement.set -> void
ScottPlot.StarAxis.LabelEachSpoke.get -> bool
ScottPlot.StarAxis.LabelEachSpoke.set -> void
ScottPlot.StarAxis.LineWidth.get -> int
ScottPlot.StarAxis.LineWidth.set -> void
ScottPlot.StarAxis.NumberOfSpokes.get -> int
ScottPlot.StarAxis.NumberOfSpokes.set -> void
ScottPlot.StarAxis.ShowAxisValues.get -> bool
ScottPlot.StarAxis.ShowAxisValues.set -> void
ScottPlot.StarAxis.ShowCategoryLabels.get -> bool
ScottPlot.StarAxis.ShowCategoryLabels.set -> void
ScottPlot.StarAxis.StarAxis() -> void
ScottPlot.StarAxis.WebColor.get -> System.Drawing.Color
ScottPlot.StarAxis.WebColor.set -> void
ScottPlot.StarAxis.XAxisIndex.get -> int
ScottPlot.StarAxis.XAxisIndex.set -> void
ScottPlot.StarAxis.YAxisIndex.get -> int
ScottPlot.StarAxis.YAxisIndex.set -> void
ScottPlot.StarAxisTick
ScottPlot.StarAxisTick.StarAxisTick() -> void
ScottPlot.StarAxisTick.StarAxisTick(double location, double max) -> void
ScottPlot.Statistics.BasicStats
ScottPlot.Statistics.Common
ScottPlot.Statistics.Finance
ScottPlot.Statistics.Histogram
ScottPlot.Statistics.Interpolation.Bezier
ScottPlot.Statistics.Interpolation.Bezier.Bezier() -> void
ScottPlot.Statistics.Interpolation.CatmullRom
ScottPlot.Statistics.Interpolation.Chaikin
ScottPlot.Statistics.Interpolation.Cubic
ScottPlot.Statistics.Interpolation.EndSlopeSpline
ScottPlot.Statistics.Interpolation.EndSlopeSpline.CalcParameters(double alpha, double beta) -> void
ScottPlot.Statistics.Interpolation.Matrix
ScottPlot.Statistics.Interpolation.Matrix.Matrix(int size) -> void
ScottPlot.Statistics.Interpolation.MatrixSolver
ScottPlot.Statistics.Interpolation.MatrixSolver.calcError -> bool
ScottPlot.Statistics.Interpolation.MatrixSolver.Eliminate() -> bool
ScottPlot.Statistics.Interpolation.MatrixSolver.Solve() -> void
ScottPlot.Statistics.Interpolation.NaturalSpline
ScottPlot.Statistics.Interpolation.NaturalSpline.CalcParameters() -> void
ScottPlot.Statistics.Interpolation.PeriodicSpline
ScottPlot.Statistics.Interpolation.PeriodicSpline.CalcParameters() -> void
ScottPlot.Statistics.Interpolation.SplineInterpolator
ScottPlot.Statistics.Interpolation.SplineInterpolator.Integrate() -> double
ScottPlot.Statistics.Interpolation.SplineInterpolator.Interpolate() -> void
ScottPlot.Statistics.LinearRegressionLine
ScottPlot.Statistics.LinearRegressionLine.GetValueAt(double x) -> double
ScottPlot.Statistics.Population
ScottPlot.Statistics.Population.count.get -> int
ScottPlot.Statistics.Population.IQR.get -> double
ScottPlot.Statistics.Population.max.get -> double
ScottPlot.Statistics.Population.maxNonOutlier.get -> double
ScottPlot.Statistics.Population.mean.get -> double
ScottPlot.Statistics.Population.median.get -> double
ScottPlot.Statistics.Population.min.get -> double
ScottPlot.Statistics.Population.minNonOutlier.get -> double
ScottPlot.Statistics.Population.minus2stDev.get -> double
ScottPlot.Statistics.Population.minus3stDev.get -> double
ScottPlot.Statistics.Population.n.get -> int
ScottPlot.Statistics.Population.plus2stDev.get -> double
ScottPlot.Statistics.Population.plus3stDev.get -> double
ScottPlot.Statistics.Population.Q1.get -> double
ScottPlot.Statistics.Population.Q3.get -> double
ScottPlot.Statistics.Population.Recalculate() -> void
ScottPlot.Statistics.Population.span.get -> double
ScottPlot.Statistics.Population.stdErr.get -> double
ScottPlot.Statistics.Population.stDev.get -> double
ScottPlot.Statistics.Population.sum.get -> double
ScottPlot.Statistics.PopulationMultiSeries
ScottPlot.Statistics.PopulationMultiSeries.groupCount.get -> int
ScottPlot.Statistics.PopulationMultiSeries.seriesCount.get -> int
ScottPlot.Statistics.PopulationSeries
ScottPlot.Statistics.PopulationSeries.color -> System.Drawing.Color
ScottPlot.Statistics.Vector2
ScottPlot.Statistics.Vector2.Length() -> double
ScottPlot.Statistics.Vector2.LengthSquared() -> double
ScottPlot.Statistics.Vector2.Vector2() -> void
ScottPlot.Statistics.Vector2.Vector2(double x, double y) -> void
ScottPlot.Statistics.Vector2.X -> double
ScottPlot.Statistics.Vector2.Y -> double
ScottPlot.Style
ScottPlot.Styles.Black
ScottPlot.Styles.Black.Black() -> void
ScottPlot.Styles.Blue1
ScottPlot.Styles.Blue1.Blue1() -> void
ScottPlot.Styles.Burgundy
ScottPlot.Styles.Burgundy.Burgundy() -> void
ScottPlot.Styles.Default
ScottPlot.Styles.Default.Default() -> void
ScottPlot.Styles.Gray1
ScottPlot.Styles.Gray1.Gray1() -> void
ScottPlot.Styles.Hazel
ScottPlot.Styles.Hazel.Hazel() -> void
ScottPlot.Styles.IStyle
ScottPlot.Styles.IStyle.AxisLabelColor.get -> System.Drawing.Color
ScottPlot.Styles.IStyle.DataBackgroundColor.get -> System.Drawing.Color
ScottPlot.Styles.IStyle.FigureBackgroundColor.get -> System.Drawing.Color
ScottPlot.Styles.IStyle.FrameColor.get -> System.Drawing.Color
ScottPlot.Styles.IStyle.GridLineColor.get -> System.Drawing.Color
ScottPlot.Styles.IStyle.TickLabelColor.get -> System.Drawing.Color
ScottPlot.Styles.IStyle.TickMajorColor.get -> System.Drawing.Color
ScottPlot.Styles.IStyle.TickMinorColor.get -> System.Drawing.Color
ScottPlot.Styles.IStyle.TitleFontColor.get -> System.Drawing.Color
ScottPlot.Styles.Monospace
ScottPlot.Styles.Monospace.Monospace() -> void
ScottPlot.TextAlignment
ScottPlot.Ticks.AxisOrientation
ScottPlot.Ticks.AxisOrientation.Horizontal = 1 -> ScottPlot.Ticks.AxisOrientation
ScottPlot.Ticks.AxisOrientation.Vertical = 0 -> ScottPlot.Ticks.AxisOrientation
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickCentisecond
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickDay
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickHour
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickHundredYear
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMillisecond
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMinute
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMonth
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickTenYear
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickThousandYear
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickUnitBase
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickUnitBase.kind -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickUnitBase.maxTickCount -> int
ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickYear
ScottPlot.Ticks.DateTimeTickUnits.DateTimeUnitFactory
ScottPlot.Ticks.DateTimeTickUnits.DateTimeUnitFactory.DateTimeUnitFactory() -> void
ScottPlot.Ticks.DateTimeTickUnits.IDateTimeUnit
ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeUnit.Centisecond = 10 -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeUnit.Day = 5 -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeUnit.Decisecond = 9 -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeUnit.Hour = 6 -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeUnit.HundredYear = 1 -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeUnit.Millisecond = 11 -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeUnit.Minute = 7 -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeUnit.Month = 4 -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeUnit.Second = 8 -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeUnit.TenYear = 2 -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeUnit.ThousandYear = 0 -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.DateTimeUnit.Year = 3 -> ScottPlot.Ticks.DateTimeUnit
ScottPlot.Ticks.MinorTickDistribution
ScottPlot.Ticks.MinorTickDistribution.even = 0 -> ScottPlot.Ticks.MinorTickDistribution
ScottPlot.Ticks.MinorTickDistribution.log = 1 -> ScottPlot.Ticks.MinorTickDistribution
ScottPlot.Ticks.Tick
ScottPlot.Ticks.Tick.DateTime.get -> System.DateTime
ScottPlot.Ticks.Tick.Tick() -> void
ScottPlot.Ticks.TickCollection
ScottPlot.Ticks.TickCollection.IntegerPositionsOnly -> bool
ScottPlot.Ticks.TickCollection.LabelFormat -> ScottPlot.Ticks.TickLabelFormat
ScottPlot.Ticks.TickCollection.LabelUsingInvertedSign -> bool
ScottPlot.Ticks.TickCollection.LargestLabelHeight.get -> float
ScottPlot.Ticks.TickCollection.LargestLabelWidth.get -> float
ScottPlot.Ticks.TickCollection.LogScaleMinorTickCount -> int
ScottPlot.Ticks.TickCollection.manualDateTimeSpacingUnitX -> ScottPlot.Ticks.DateTimeUnit?
ScottPlot.Ticks.TickCollection.manualDateTimeSpacingUnitY -> ScottPlot.Ticks.DateTimeUnit?
ScottPlot.Ticks.TickCollection.manualSpacingX -> double
ScottPlot.Ticks.TickCollection.manualSpacingY -> double
ScottPlot.Ticks.TickCollection.MeasureStringManually -> bool
ScottPlot.Ticks.TickCollection.MinimumTickSpacing -> double
ScottPlot.Ticks.TickCollection.MinorTickCount -> int
ScottPlot.Ticks.TickCollection.MinorTickDistribution -> ScottPlot.Ticks.MinorTickDistribution
ScottPlot.Ticks.TickCollection.Orientation -> ScottPlot.Ticks.AxisOrientation
ScottPlot.Ticks.TickCollection.radix -> int
ScottPlot.Ticks.TickCollection.TickCollection() -> void
ScottPlot.Ticks.TickCollection.TickDensity -> float
ScottPlot.Ticks.TickCollection.useExponentialNotation -> bool
ScottPlot.Ticks.TickCollection.useMultiplierNotation -> bool
ScottPlot.Ticks.TickCollection.useOffsetNotation -> bool
ScottPlot.Ticks.TickLabelFormat
ScottPlot.Ticks.TickLabelFormat.DateTime = 1 -> ScottPlot.Ticks.TickLabelFormat
ScottPlot.Ticks.TickLabelFormat.Numeric = 0 -> ScottPlot.Ticks.TickLabelFormat
ScottPlot.Tools
ScottPlot.Validate
ScottPlot.VerticalAlignment
ScottPlot.VerticalAlignment.Lower = 1 -> ScottPlot.VerticalAlignment
ScottPlot.VerticalAlignment.Middle = 2 -> ScottPlot.VerticalAlignment
ScottPlot.VerticalAlignment.Upper = 0 -> ScottPlot.VerticalAlignment
static ScottPlot.AxisLimits.HorizontalLimitsOnly(double xMin, double xMax) -> ScottPlot.AxisLimits
static ScottPlot.AxisLimits.NoLimits.get -> ScottPlot.AxisLimits
static ScottPlot.AxisLimits.VerticalLimitsOnly(double yMin, double yMax) -> ScottPlot.AxisLimits
static ScottPlot.Coordinate.FromGeneric<T>(T x, T y) -> ScottPlot.Coordinate
static ScottPlot.CoordinateVector.operator +(ScottPlot.Coordinate coordinate, ScottPlot.CoordinateVector vector) -> ScottPlot.Coordinate
static ScottPlot.CoordinateVector.operator -(ScottPlot.Coordinate coordinate, ScottPlot.CoordinateVector vector) -> ScottPlot.Coordinate
static ScottPlot.Drawing.GDI.ClearType(bool enable) -> void
static ScottPlot.Drawing.GDI.ConvertToSDHatchStyle(ScottPlot.Drawing.HatchStyle pattern) -> System.Drawing.Drawing2D.HatchStyle?
static ScottPlot.Drawing.GDI.GetScaleRatio() -> float
static ScottPlot.Drawing.GDI.Mix(System.Drawing.Color colorA, System.Drawing.Color colorB, double fracA) -> System.Drawing.Color
static ScottPlot.Drawing.GDI.Semitransparent(System.Drawing.Color color, double alpha) -> System.Drawing.Color
static ScottPlot.Marker.Random() -> ScottPlot.MarkerShape
static ScottPlot.NumericConversion.AddBytes(byte a, byte b) -> byte
static ScottPlot.NumericConversion.DoubleToGeneric<T>(double value, out T v) -> void
static ScottPlot.NumericConversion.GenericToDouble<T>(ref T value) -> double
static ScottPlot.NumericConversion.LessThanOrEqualBytes(byte a, byte b) -> bool
static ScottPlot.NumericConversion.SubtractBytes(byte a, byte b) -> byte
static ScottPlot.Pixel.Clamp(float value, float min, float max) -> float
static ScottPlot.Pixel.operator !=(ScottPlot.Pixel a, ScottPlot.Pixel b) -> bool
static ScottPlot.Pixel.operator ==(ScottPlot.Pixel a, ScottPlot.Pixel b) -> bool
static ScottPlot.Statistics.Common.GetRandomInt(int min, int max) -> int
static ScottPlot.Statistics.Vector2.Multiply(ScottPlot.Statistics.Vector2 left, double right) -> ScottPlot.Statistics.Vector2
static ScottPlot.Tools.Blend(this System.Drawing.Color colorA, System.Drawing.Color colorB, double fractionA) -> System.Drawing.Color
virtual ScottPlot.MinMaxSearchStrategies.LinearMinMaxSearchStrategy<T>.MinMaxRangeQuery(int l, int r, out double lowestValue, out double highestValue) -> void
virtual ScottPlot.MinMaxSearchStrategies.LinearMinMaxSearchStrategy<T>.SourceElement(int index) -> double
virtual ScottPlot.Plottable.BarPlotBase.GetAxisLimits() -> ScottPlot.AxisLimits
virtual ScottPlot.Plottable.Heatmap.GetAxisLimits() -> ScottPlot.AxisLimits
virtual ScottPlot.Plottable.SignalPlotBase<T>.GetAxisLimits() -> ScottPlot.AxisLimits
virtual ScottPlot.Plottable.SignalPlotBase<T>.ValidateData(bool deep = false) -> void
virtual ScottPlot.Styles.Default.AxisLabelColor.get -> System.Drawing.Color
virtual ScottPlot.Styles.Default.DataBackgroundColor.get -> System.Drawing.Color
virtual ScottPlot.Styles.Default.FigureBackgroundColor.get -> System.Drawing.Color
virtual ScottPlot.Styles.Default.FrameColor.get -> System.Drawing.Color
virtual ScottPlot.Styles.Default.GridLineColor.get -> System.Drawing.Color
virtual ScottPlot.Styles.Default.TickLabelColor.get -> System.Drawing.Color
virtual ScottPlot.Styles.Default.TickMajorColor.get -> System.Drawing.Color
virtual ScottPlot.Styles.Default.TickMinorColor.get -> System.Drawing.Color
virtual ScottPlot.Styles.Default.TitleFontColor.get -> System.Drawing.Color
virtual ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickUnitBase.Floor(System.DateTime value) -> System.DateTime
virtual ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickUnitBase.Increment(System.DateTime value, int delta) -> System.DateTime
~override ScottPlot.AxisLimits.ToString() -> string
~override ScottPlot.Coordinate.ToString() -> string
~override ScottPlot.CoordinateRect.ToString() -> string
~override ScottPlot.Drawing.Colormap.ToString() -> string
~override ScottPlot.MinMaxSearchStrategies.LinearFastDoubleMinMaxSearchStrategy<T>.SourceArray.get -> T[]
~override ScottPlot.MinMaxSearchStrategies.LinearFastDoubleMinMaxSearchStrategy<T>.SourceArray.set -> void
~override ScottPlot.OHLC.ToString() -> string
~override ScottPlot.Palettes.Amber.Description.get -> string
~override ScottPlot.Palettes.Amber.Name.get -> string
~override ScottPlot.Palettes.Aurora.Description.get -> string
~override ScottPlot.Palettes.Aurora.Name.get -> string
~override ScottPlot.Palettes.Building.Description.get -> string
~override ScottPlot.Palettes.Building.Name.get -> string
~override ScottPlot.Palettes.Category10.Description.get -> string
~override ScottPlot.Palettes.Category10.Name.get -> string
~override ScottPlot.Palettes.Category20.Description.get -> string
~override ScottPlot.Palettes.Category20.Name.get -> string
~override ScottPlot.Palettes.ColorblindFriendly.Description.get -> string
~override ScottPlot.Palettes.ColorblindFriendly.Name.get -> string
~override ScottPlot.Palettes.Dark.Description.get -> string
~override ScottPlot.Palettes.Dark.Name.get -> string
~override ScottPlot.Palettes.DarkPastel.Description.get -> string
~override ScottPlot.Palettes.DarkPastel.Name.get -> string
~override ScottPlot.Palettes.Frost.Description.get -> string
~override ScottPlot.Palettes.Frost.Name.get -> string
~override ScottPlot.Palettes.LightOcean.Description.get -> string
~override ScottPlot.Palettes.LightOcean.Name.get -> string
~override ScottPlot.Palettes.LightSpectrum.Description.get -> string
~override ScottPlot.Palettes.LightSpectrum.Name.get -> string
~override ScottPlot.Palettes.Microcharts.Description.get -> string
~override ScottPlot.Palettes.Microcharts.Name.get -> string
~override ScottPlot.Palettes.Nero.Description.get -> string
~override ScottPlot.Palettes.Nero.Name.get -> string
~override ScottPlot.Palettes.Nord.Description.get -> string
~override ScottPlot.Palettes.Nord.Name.get -> string
~override ScottPlot.Palettes.Normal.Description.get -> string
~override ScottPlot.Palettes.Normal.Name.get -> string
~override ScottPlot.Palettes.OneHalf.Description.get -> string
~override ScottPlot.Palettes.OneHalf.Name.get -> string
~override ScottPlot.Palettes.OneHalfDark.Description.get -> string
~override ScottPlot.Palettes.OneHalfDark.Name.get -> string
~override ScottPlot.Palettes.PastelWheel.Description.get -> string
~override ScottPlot.Palettes.PastelWheel.Name.get -> string
~override ScottPlot.Palettes.Penumbra.Description.get -> string
~override ScottPlot.Palettes.Penumbra.Name.get -> string
~override ScottPlot.Palettes.PolarNight.Description.get -> string
~override ScottPlot.Palettes.PolarNight.Name.get -> string
~override ScottPlot.Palettes.Redness.Description.get -> string
~override ScottPlot.Palettes.Redness.Name.get -> string
~override ScottPlot.Palettes.SnowStorm.Description.get -> string
~override ScottPlot.Palettes.SnowStorm.Name.get -> string
~override ScottPlot.Palettes.SummerSplash.Description.get -> string
~override ScottPlot.Palettes.SummerSplash.Name.get -> string
~override ScottPlot.Palettes.Tsitsulin.Description.get -> string
~override ScottPlot.Palettes.Tsitsulin.Name.get -> string
~override ScottPlot.Pixel.Equals(object obj) -> bool
~override ScottPlot.Pixel.ToString() -> string
~override ScottPlot.Plot.Equals(object obj) -> bool
~override ScottPlot.Plot.ToString() -> string
~override ScottPlot.PlotDimensions.ToString() -> string
~override ScottPlot.Plottable.Annotation.ToString() -> string
~override ScottPlot.Plottable.BarPlot.ToString() -> string
~override ScottPlot.Plottable.BubblePlot.ToString() -> string
~override ScottPlot.Plottable.CoordinatedHeatmap.RenderHeatmap(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality) -> void
~override ScottPlot.Plottable.CoxcombPlot.ToString() -> string
~override ScottPlot.Plottable.FinancePlot.ToString() -> string
~override ScottPlot.Plottable.FunctionPlot.ToString() -> string
~override ScottPlot.Plottable.Heatmap.ToString() -> string
~override ScottPlot.Plottable.HLine.ToString() -> string
~override ScottPlot.Plottable.HLineVector.ToString() -> string
~override ScottPlot.Plottable.HSpan.ToString() -> string
~override ScottPlot.Plottable.Image.ToString() -> string
~override ScottPlot.Plottable.PiePlot.ToString() -> string
~override ScottPlot.Plottable.Polygon.ToString() -> string
~override ScottPlot.Plottable.Polygons.ToString() -> string
~override ScottPlot.Plottable.PopulationPlot.ToString() -> string
~override ScottPlot.Plottable.RadarPlot.ToString() -> string
~override ScottPlot.Plottable.RadialGaugePlot.ToString() -> string
~override ScottPlot.Plottable.RepeatingHLine.ToString() -> string
~override ScottPlot.Plottable.RepeatingVLine.ToString() -> string
~override ScottPlot.Plottable.ScaleBar.ToString() -> string
~override ScottPlot.Plottable.ScatterPlot.ToString() -> string
~override ScottPlot.Plottable.SignalPlot.ToString() -> string
~override ScottPlot.Plottable.SignalPlotBase<T>.ToString() -> string
~override ScottPlot.Plottable.SignalPlotConst<T>.ToString() -> string
~override ScottPlot.Plottable.SignalPlotGeneric<T>.ToString() -> string
~override ScottPlot.Plottable.SignalPlotXY.ToString() -> string
~override ScottPlot.Plottable.SignalPlotXYConst<TX, TY>.ToString() -> string
~override ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~override ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>.ToString() -> string
~override ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>.Ys.get -> TY[]
~override ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>.Ys.set -> void
~override ScottPlot.Plottable.Text.ToString() -> string
~override ScottPlot.Plottable.VectorField.ToString() -> string
~override ScottPlot.Plottable.VectorFieldList.ToString() -> string
~override ScottPlot.Plottable.VLine.ToString() -> string
~override ScottPlot.Plottable.VLineVector.ToString() -> string
~override ScottPlot.Plottable.VSpan.ToString() -> string
~override ScottPlot.Renderable.Axis.ToString() -> string
~override ScottPlot.Renderable.AxisDimensions.ToString() -> string
~override ScottPlot.Statistics.LinearRegressionLine.ToString() -> string
~override ScottPlot.Styles.Monospace.AxisLabelFontName.get -> string
~override ScottPlot.Styles.Monospace.TickLabelFontName.get -> string
~override ScottPlot.Styles.Monospace.TitleFontName.get -> string
~override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickCentisecond.GetTickLabel(System.DateTime value) -> string
~override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickDay.GetTickLabel(System.DateTime value) -> string
~override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickHour.GetTickLabel(System.DateTime value) -> string
~override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickHundredYear.GetTickLabel(System.DateTime value) -> string
~override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMillisecond.GetTickLabel(System.DateTime value) -> string
~override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMinute.GetTickLabel(System.DateTime value) -> string
~override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMonth.GetTickLabel(System.DateTime value) -> string
~override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickTenYear.GetTickLabel(System.DateTime value) -> string
~override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickThousandYear.GetTickLabel(System.DateTime value) -> string
~override ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickYear.GetTickLabel(System.DateTime value) -> string
~override ScottPlot.Ticks.Tick.ToString() -> string
~override ScottPlot.Ticks.TickCollection.ToString() -> string
~readonly ScottPlot.Control.Configuration.QualityConfiguration -> ScottPlot.Control.QualityConfiguration
~readonly ScottPlot.Control.ControlBackEnd.Configuration -> ScottPlot.Control.Configuration
~readonly ScottPlot.Control.ControlBackEnd.ControlName -> string
~readonly ScottPlot.Control.EventProcess.UIEventFactory.Configuration -> ScottPlot.Control.Configuration
~readonly ScottPlot.Control.EventProcess.UIEventFactory.Plot -> ScottPlot.Plot
~readonly ScottPlot.Control.EventProcess.UIEventFactory.Settings -> ScottPlot.Settings
~readonly ScottPlot.MultiPlot.subplots -> ScottPlot.Plot[]
~readonly ScottPlot.Plottable.Annotation.Font -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.AxisLine.PositionLabelFont -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.AxisLineVector.PositionLabelFont -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.Bar.Font -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.BarPlotBase.Font -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.BarSeries.Bars -> System.Collections.Generic.List<ScottPlot.Plottable.Bar>
~readonly ScottPlot.Plottable.Bracket.Font -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.Colorbar.TickLabelFont -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.FinancePlot.OHLCs -> System.Collections.Generic.List<ScottPlot.OHLC>
~readonly ScottPlot.Plottable.LegendItem.Parent -> ScottPlot.Plottable.IPlottable
~readonly ScottPlot.Plottable.PiePlot.CenterFont -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.PiePlot.SliceFont -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.Polygons.Polys -> System.Collections.Generic.List<System.Collections.Generic.List<(double x, double y)>>
~readonly ScottPlot.Plottable.PopulationPlot.MultiSeries -> ScottPlot.Statistics.PopulationMultiSeries
~readonly ScottPlot.Plottable.RadarPlot.Font -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.RadialGaugePlot.Font -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.RepeatingAxisLine.PositionLabelFont -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.ScaleBar.Font -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.ScatterPlotList<T>.Xs -> System.Collections.Generic.List<T>
~readonly ScottPlot.Plottable.ScatterPlotList<T>.Ys -> System.Collections.Generic.List<T>
~readonly ScottPlot.Plottable.Tooltip.Font -> ScottPlot.Drawing.Font
~readonly ScottPlot.Plottable.VectorFieldList.ArrowStyle -> ScottPlot.Renderable.ArrowStyle
~readonly ScottPlot.Plottable.VectorFieldList.RootedVectors -> System.Collections.Generic.List<(ScottPlot.Coordinate coordinate, ScottPlot.CoordinateVector vector)>
~readonly ScottPlot.Renderable.Axis.Dims -> ScottPlot.Renderable.AxisDimensions
~readonly ScottPlot.Renderable.AxisTicks.TickCollection -> ScottPlot.Ticks.TickCollection
~readonly ScottPlot.Settings.BenchmarkMessage -> ScottPlot.Renderable.BenchmarkMessage
~readonly ScottPlot.Settings.CornerLegend -> ScottPlot.Renderable.Legend
~readonly ScottPlot.Settings.DataBackground -> ScottPlot.Renderable.DataBackground
~readonly ScottPlot.Settings.ErrorMessage -> ScottPlot.Renderable.ErrorMessage
~readonly ScottPlot.Settings.FigureBackground -> ScottPlot.Renderable.FigureBackground
~readonly ScottPlot.Settings.Plottables -> System.Collections.ObjectModel.ObservableCollection<ScottPlot.Plottable.IPlottable>
~readonly ScottPlot.Settings.ZoomRectangle -> ScottPlot.Renderable.ZoomRectangle
~readonly ScottPlot.StarAxisTick.Labels -> double[]
~readonly ScottPlot.Statistics.Histogram.bins -> double[]
~readonly ScottPlot.Statistics.Histogram.counts -> double[]
~readonly ScottPlot.Statistics.Histogram.countsFrac -> double[]
~readonly ScottPlot.Statistics.Histogram.countsFracCurve -> double[]
~readonly ScottPlot.Statistics.Histogram.cumulativeCounts -> double[]
~readonly ScottPlot.Statistics.Histogram.cumulativeFrac -> double[]
~readonly ScottPlot.Statistics.Histogram.probability -> double[]
~readonly ScottPlot.Statistics.Interpolation.MatrixSolver.m -> ScottPlot.Statistics.Interpolation.Matrix
~readonly ScottPlot.Ticks.Tick.Label -> string
~ScottPlot.Control.ControlBackEnd.ControlBackEnd(float width, float height, string name = "UnamedControl") -> void
~ScottPlot.Control.ControlBackEnd.GetLatestBitmap() -> System.Drawing.Bitmap
~ScottPlot.Control.ControlBackEnd.MouseDown(ScottPlot.Control.InputState input) -> void
~ScottPlot.Control.ControlBackEnd.MouseMove(ScottPlot.Control.InputState input) -> void
~ScottPlot.Control.ControlBackEnd.MouseUp(ScottPlot.Control.InputState input) -> void
~ScottPlot.Control.ControlBackEnd.MouseWheel(ScottPlot.Control.InputState input) -> void
~ScottPlot.Control.ControlBackEnd.Plot.get -> ScottPlot.Plot
~ScottPlot.Control.ControlBackEnd.Reset(float width, float height, ScottPlot.Plot newPlot) -> void
~ScottPlot.Control.EventProcess.Events.ApplyZoomRectangleEvent.ApplyZoomRectangleEvent(float x, float y, ScottPlot.Control.Configuration config, ScottPlot.Settings settings, ScottPlot.Plot plt) -> void
~ScottPlot.Control.EventProcess.Events.BenchmarkToggleEvent.BenchmarkToggleEvent(ScottPlot.Plot plt, ScottPlot.Control.Configuration config) -> void
~ScottPlot.Control.EventProcess.Events.MouseAxisAutoEvent.MouseAxisAutoEvent(ScottPlot.Control.Configuration config, ScottPlot.Settings settings, ScottPlot.Plot plt) -> void
~ScottPlot.Control.EventProcess.Events.MouseMovedToZoomRectangle.MouseMovedToZoomRectangle(float x, float y, ScottPlot.Settings settings, ScottPlot.Control.Configuration configuration) -> void
~ScottPlot.Control.EventProcess.Events.MousePanEvent.MousePanEvent(ScottPlot.Control.InputState input, ScottPlot.Control.Configuration config, ScottPlot.Settings settings) -> void
~ScottPlot.Control.EventProcess.Events.MouseScrollEvent.MouseScrollEvent(float x, float y, bool scrolledUp, ScottPlot.Control.Configuration config, ScottPlot.Settings settings) -> void
~ScottPlot.Control.EventProcess.Events.MouseUpClearRenderEvent.MouseUpClearRenderEvent(ScottPlot.Control.Configuration config) -> void
~ScottPlot.Control.EventProcess.Events.MouseZoomEvent.MouseZoomEvent(ScottPlot.Control.InputState input, ScottPlot.Control.Configuration config, ScottPlot.Settings settings, ScottPlot.Plot plt) -> void
~ScottPlot.Control.EventProcess.Events.PlottableDragEvent.PlottableDragEvent(float x, float y, bool shiftDown, ScottPlot.Plottable.IDraggable plottable, ScottPlot.Plot plt, ScottPlot.Control.Configuration config) -> void
~ScottPlot.Control.EventProcess.EventsProcessor.EventsProcessor(System.Action<bool> renderAction, int renderDelay) -> void
~ScottPlot.Control.EventProcess.EventsProcessor.ProcessAsync(ScottPlot.Control.EventProcess.IUIEvent uiEvent) -> System.Threading.Tasks.Task
~ScottPlot.Control.EventProcess.EventsProcessor.RenderAction.get -> System.Action<bool>
~ScottPlot.Control.EventProcess.EventsProcessor.RenderAction.set -> void
~ScottPlot.Control.EventProcess.UIEventFactory.CreateApplyZoomRectangleEvent(float x, float y) -> ScottPlot.Control.EventProcess.IUIEvent
~ScottPlot.Control.EventProcess.UIEventFactory.CreateBenchmarkToggle() -> ScottPlot.Control.EventProcess.IUIEvent
~ScottPlot.Control.EventProcess.UIEventFactory.CreateManualDelayedHighQualityRender() -> ScottPlot.Control.EventProcess.IUIEvent
~ScottPlot.Control.EventProcess.UIEventFactory.CreateManualHighQualityRender() -> ScottPlot.Control.EventProcess.IUIEvent
~ScottPlot.Control.EventProcess.UIEventFactory.CreateManualLowQualityRender() -> ScottPlot.Control.EventProcess.IUIEvent
~ScottPlot.Control.EventProcess.UIEventFactory.CreateMouseAutoAxis() -> ScottPlot.Control.EventProcess.IUIEvent
~ScottPlot.Control.EventProcess.UIEventFactory.CreateMouseMovedToZoomRectangle(float x, float y) -> ScottPlot.Control.EventProcess.IUIEvent
~ScottPlot.Control.EventProcess.UIEventFactory.CreateMousePan(ScottPlot.Control.InputState input) -> ScottPlot.Control.EventProcess.IUIEvent
~ScottPlot.Control.EventProcess.UIEventFactory.CreateMouseScroll(float x, float y, bool scroolUp) -> ScottPlot.Control.EventProcess.IUIEvent
~ScottPlot.Control.EventProcess.UIEventFactory.CreateMouseUpClearRender() -> ScottPlot.Control.EventProcess.IUIEvent
~ScottPlot.Control.EventProcess.UIEventFactory.CreateMouseZoom(ScottPlot.Control.InputState input) -> ScottPlot.Control.EventProcess.IUIEvent
~ScottPlot.Control.EventProcess.UIEventFactory.CreatePlottableDrag(float x, float y, bool shiftDown, ScottPlot.Plottable.IDraggable draggable) -> ScottPlot.Control.EventProcess.IUIEvent
~ScottPlot.Control.EventProcess.UIEventFactory.UIEventFactory(ScottPlot.Control.Configuration config, ScottPlot.Settings settings, ScottPlot.Plot plt) -> void
~ScottPlot.Coordinate.ToPixel(ScottPlot.PlotDimensions dims) -> ScottPlot.Pixel
~ScottPlot.DataSet.DataSet(string label, double[] values, double[] errors = null) -> void
~ScottPlot.DataSet.errors -> double[]
~ScottPlot.DataSet.label -> string
~ScottPlot.DataSet.values -> double[]
~ScottPlot.DataStructures.SegmentedTree<T>
~ScottPlot.DataStructures.SegmentedTree<T>.SegmentedTree(T[] data) -> void
~ScottPlot.DataStructures.SegmentedTree<T>.SetSourceAsync(T[] data) -> System.Threading.Tasks.Task
~ScottPlot.DataStructures.SegmentedTree<T>.SourceArray.get -> T[]
~ScottPlot.DataStructures.SegmentedTree<T>.SourceArray.set -> void
~ScottPlot.DataStructures.SegmentedTree<T>.updateData(int from, T[] newData) -> void
~ScottPlot.DataStructures.SegmentedTree<T>.updateData(T[] newData) -> void
~ScottPlot.DataStructures.SegmentedTree<T>.updateRange(int from, int to, T[] newData, int fromData = 0) -> void
~ScottPlot.Drawing.Colormap.Apply(System.Drawing.Bitmap bmp) -> void
~ScottPlot.Drawing.Colormap.Colormap(ScottPlot.Drawing.IColormap colormap) -> void
~ScottPlot.Drawing.Colormap.Name.get -> string
~ScottPlot.Drawing.Colormap.RandomColor(System.Random rand, double alpha = 1) -> System.Drawing.Color
~ScottPlot.Drawing.ColormapFactory.CreateOrDefault(string Name) -> ScottPlot.Drawing.Colormap
~ScottPlot.Drawing.ColormapFactory.CreateOrThrow(string Name) -> ScottPlot.Drawing.Colormap
~ScottPlot.Drawing.ColormapFactory.GetAvailableColormaps() -> System.Collections.Generic.IEnumerable<ScottPlot.Drawing.Colormap>
~ScottPlot.Drawing.ColormapFactory.GetAvailableNames() -> System.Collections.Generic.IEnumerable<string>
~ScottPlot.Drawing.ColormapFactory.GetDefaultColormap() -> ScottPlot.Drawing.IColormap
~ScottPlot.Drawing.Colormaps.Algae.Name.get -> string
~ScottPlot.Drawing.Colormaps.Amp.Name.get -> string
~ScottPlot.Drawing.Colormaps.Balance.Name.get -> string
~ScottPlot.Drawing.Colormaps.Blues.Name.get -> string
~ScottPlot.Drawing.Colormaps.Curl.Name.get -> string
~ScottPlot.Drawing.Colormaps.Deep.Name.get -> string
~ScottPlot.Drawing.Colormaps.Delta.Name.get -> string
~ScottPlot.Drawing.Colormaps.Dense.Name.get -> string
~ScottPlot.Drawing.Colormaps.Diff.Name.get -> string
~ScottPlot.Drawing.Colormaps.Grayscale.Name.get -> string
~ScottPlot.Drawing.Colormaps.GrayscaleR.Name.get -> string
~ScottPlot.Drawing.Colormaps.Greens.Name.get -> string
~ScottPlot.Drawing.Colormaps.Haline.Name.get -> string
~ScottPlot.Drawing.Colormaps.Ice.Name.get -> string
~ScottPlot.Drawing.Colormaps.Inferno.Name.get -> string
~ScottPlot.Drawing.Colormaps.Jet.Name.get -> string
~ScottPlot.Drawing.Colormaps.Magma.Name.get -> string
~ScottPlot.Drawing.Colormaps.Matter.Name.get -> string
~ScottPlot.Drawing.Colormaps.Oxy.Name.get -> string
~ScottPlot.Drawing.Colormaps.Phase.Name.get -> string
~ScottPlot.Drawing.Colormaps.Plasma.Name.get -> string
~ScottPlot.Drawing.Colormaps.Rain.Name.get -> string
~ScottPlot.Drawing.Colormaps.Solar.Name.get -> string
~ScottPlot.Drawing.Colormaps.Speed.Name.get -> string
~ScottPlot.Drawing.Colormaps.Tarn.Name.get -> string
~ScottPlot.Drawing.Colormaps.Tempo.Name.get -> string
~ScottPlot.Drawing.Colormaps.Thermal.Name.get -> string
~ScottPlot.Drawing.Colormaps.Topo.Name.get -> string
~ScottPlot.Drawing.Colormaps.Turbid.Name.get -> string
~ScottPlot.Drawing.Colormaps.Turbo.Name.get -> string
~ScottPlot.Drawing.Colormaps.Viridis.Name.get -> string
~ScottPlot.Drawing.Font.Family.get -> System.Drawing.FontFamily
~ScottPlot.Drawing.Font.Family.set -> void
~ScottPlot.Drawing.Font.Name.get -> string
~ScottPlot.Drawing.Font.Name.set -> void
~ScottPlot.Drawing.IColormap.Name.get -> string
~ScottPlot.Histogram.Histogram(double[] values, double? min = null, double? max = null, double? binSize = null, double? binCount = null, bool ignoreOutOfBounds = true) -> void
~ScottPlot.IMarker.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float radius, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.IPalette.Colors.get -> System.Drawing.Color[]
~ScottPlot.IPalette.Description.get -> string
~ScottPlot.IPalette.GetColors(int count, int offset = 0, double alpha = 1) -> System.Drawing.Color[]
~ScottPlot.IPalette.Name.get -> string
~ScottPlot.MarkerShapes.Asterisk.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float radius, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.Cross.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float radius, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.Eks.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.FilledCircle.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float radius, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.FilledDiamond.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.FilledSquare.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float radius, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.FilledTriangleDown.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.FilledTriangleUp.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.Hashtag.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float radius, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.HorizontalBar.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.None.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.OpenCircle.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float radius, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.OpenDiamond.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.OpenSquare.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float radius, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.OpenTriangleDown.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.OpenTriangleUp.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.TriStarDown.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.TriStarUp.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MarkerShapes.VerticalBar.Draw(System.Drawing.Graphics gfx, System.Drawing.PointF center, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~ScottPlot.MinMaxSearchStrategies.IMinMaxSearchStrategy<T>.SourceArray.get -> T[]
~ScottPlot.MinMaxSearchStrategies.IMinMaxSearchStrategy<T>.SourceArray.set -> void
~ScottPlot.MinMaxSearchStrategies.IMinMaxSearchStrategy<T>.updateRange(int from, int to, T[] newData, int fromData = 0) -> void
~ScottPlot.MinMaxSearchStrategies.LinearDoubleOnlyMinMaxStrategy.SourceArray.get -> double[]
~ScottPlot.MinMaxSearchStrategies.LinearDoubleOnlyMinMaxStrategy.SourceArray.set -> void
~ScottPlot.MinMaxSearchStrategies.LinearDoubleOnlyMinMaxStrategy.updateRange(int from, int to, double[] newData, int fromData = 0) -> void
~ScottPlot.MinMaxSearchStrategies.LinearFastDoubleMinMaxSearchStrategy<T>
~ScottPlot.MinMaxSearchStrategies.LinearMinMaxSearchStrategy<T>
~ScottPlot.MinMaxSearchStrategies.LinearMinMaxSearchStrategy<T>.updateRange(int from, int to, T[] newData, int fromData = 0) -> void
~ScottPlot.MinMaxSearchStrategies.SegmentedTreeMinMaxSearchStrategy<T>
~ScottPlot.MinMaxSearchStrategies.SegmentedTreeMinMaxSearchStrategy<T>.SegmentedTreeMinMaxSearchStrategy(T[] data) -> void
~ScottPlot.MinMaxSearchStrategies.SegmentedTreeMinMaxSearchStrategy<T>.SourceArray.get -> T[]
~ScottPlot.MinMaxSearchStrategies.SegmentedTreeMinMaxSearchStrategy<T>.SourceArray.set -> void
~ScottPlot.MinMaxSearchStrategies.SegmentedTreeMinMaxSearchStrategy<T>.updateRange(int from, int to, T[] newData, int fromData = 0) -> void
~ScottPlot.MultiPlot.GetBitmap() -> System.Drawing.Bitmap
~ScottPlot.MultiPlot.GetSubplot(int rowIndex, int columnIndex) -> ScottPlot.Plot
~ScottPlot.MultiPlot.SaveFig(string filePath) -> void
~ScottPlot.Palettes.Custom.Custom(string[] hexColors, string name = "", string description = "") -> void
~ScottPlot.Palettes.PaletteBase.Colors.get -> System.Drawing.Color[]
~ScottPlot.Palettes.PaletteBase.GetColors(int count, int offset = 0, double alpha = 1) -> System.Drawing.Color[]
~ScottPlot.Palettes.PaletteBase.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Drawing.Color>
~ScottPlot.Pixel.Clamp(ScottPlot.PixelRect rect) -> ScottPlot.Pixel
~ScottPlot.Plot.Add(ScottPlot.Plottable.IPlottable plottable) -> void
~ScottPlot.Plot.AddAnnotation(string label, double x, double y) -> ScottPlot.Plottable.Annotation
~ScottPlot.Plot.AddArrow(double xTip, double yTip, double xBase, double yBase, float lineWidth = 5, System.Drawing.Color? color = null) -> ScottPlot.Plottable.ArrowCoordinated
~ScottPlot.Plot.AddAxis(ScottPlot.Renderable.Edge edge, int? axisIndex = null, string title = null, System.Drawing.Color? color = null) -> ScottPlot.Renderable.Axis
~ScottPlot.Plot.AddBar(double[] values, double[] errors, double[] positions, System.Drawing.Color? color = null) -> ScottPlot.Plottable.BarPlot
~ScottPlot.Plot.AddBar(double[] values, double[] positions, System.Drawing.Color? color = null) -> ScottPlot.Plottable.BarPlot
~ScottPlot.Plot.AddBar(double[] values, System.Drawing.Color? color = null) -> ScottPlot.Plottable.BarPlot
~ScottPlot.Plot.AddBarGroups(string[] groupLabels, string[] seriesLabels, double[][] ys, double[][] yErr) -> ScottPlot.Plottable.BarPlot[]
~ScottPlot.Plot.AddBarSeries() -> ScottPlot.Plottable.BarSeries
~ScottPlot.Plot.AddBarSeries(ScottPlot.Plottable.Bar[] bars) -> ScottPlot.Plottable.BarSeries
~ScottPlot.Plot.AddBarSeries(System.Collections.Generic.List<ScottPlot.Plottable.Bar> bars) -> ScottPlot.Plottable.BarSeries
~ScottPlot.Plot.AddBracket(double x1, double y1, double x2, double y2, string label = null) -> ScottPlot.Plottable.Bracket
~ScottPlot.Plot.AddBracket(ScottPlot.Coordinate point1, ScottPlot.Coordinate point2, string label = null) -> ScottPlot.Plottable.Bracket
~ScottPlot.Plot.AddBubblePlot() -> ScottPlot.Plottable.BubblePlot
~ScottPlot.Plot.AddBubblePlot(double[] xs, double[] ys, double radius = 10, System.Drawing.Color? fillColor = null, double edgeWidth = 1, System.Drawing.Color? edgeColor = null) -> ScottPlot.Plottable.BubblePlot
~ScottPlot.Plot.AddCandlesticks(ScottPlot.OHLC[] ohlcs) -> ScottPlot.Plottable.FinancePlot
~ScottPlot.Plot.AddClevelandDot(double[] ys1, double[] ys2) -> ScottPlot.Plottable.ClevelandDotPlot
~ScottPlot.Plot.AddClevelandDot(double[] ys1, double[] ys2, double[] positions) -> ScottPlot.Plottable.ClevelandDotPlot
~ScottPlot.Plot.AddColorbar(ScottPlot.Drawing.Colormap colormap = null, int space = 100, bool rightSide = true) -> ScottPlot.Plottable.Colorbar
~ScottPlot.Plot.AddColorbar(ScottPlot.Plottable.IHasColormap heatmap, int space = 100) -> ScottPlot.Plottable.Colorbar
~ScottPlot.Plot.AddCoxcomb(double[] values, bool hideGridAndFrame = true) -> ScottPlot.Plottable.CoxcombPlot
~ScottPlot.Plot.AddCrosshair(double x, double y) -> ScottPlot.Plottable.Crosshair
~ScottPlot.Plot.AddErrorBars(double[] xs, double[] ys, double[] xErrors, double[] yErrors, System.Drawing.Color? color = null, float markerSize = 0) -> ScottPlot.Plottable.ErrorBar
~ScottPlot.Plot.AddErrorBars(double[] xs, double[] ys, double[] xErrorsPositive, double[] xErrorsNegative, double[] yErrorsPositive, double[] yErrorsNegative, System.Drawing.Color? color = null, float markerSize = 0) -> ScottPlot.Plottable.ErrorBar
~ScottPlot.Plot.AddFill(double[] xs, double[] ys, double baseline = 0, System.Drawing.Color? color = null, double lineWidth = 0, System.Drawing.Color? lineColor = null) -> ScottPlot.Plottable.Polygon
~ScottPlot.Plot.AddFill(double[] xs, double[] ys1, double[] ys2, System.Drawing.Color? color = null, double lineWidth = 0, System.Drawing.Color? lineColor = null) -> ScottPlot.Plottable.Polygon
~ScottPlot.Plot.AddFill(double[] xs1, double[] ys1, double[] xs2, double[] ys2, System.Drawing.Color? color = null, double lineWidth = 0, System.Drawing.Color? lineColor = null) -> ScottPlot.Plottable.Polygon
~ScottPlot.Plot.AddFillAboveAndBelow(double[] xs, double[] ys, double baseline = 0, System.Drawing.Color? colorAbove = null, System.Drawing.Color? colorBelow = null, double lineWidth = 0, System.Drawing.Color? lineColor = null) -> (ScottPlot.Plottable.Polygon polyAbove, ScottPlot.Plottable.Polygon polyBelow)
~ScottPlot.Plot.AddFillError(double[] xs, double[] ys, double[] yError, System.Drawing.Color? color = null, double lineWidth = 0, System.Drawing.Color? lineColor = null) -> ScottPlot.Plottable.Polygon
~ScottPlot.Plot.AddFunction(System.Func<double, double?> function, System.Drawing.Color? color = null, double lineWidth = 1, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid) -> ScottPlot.Plottable.FunctionPlot
~ScottPlot.Plot.AddHeatmap(double?[,] intensities, ScottPlot.Drawing.Colormap colormap = null, bool? lockScales = true) -> ScottPlot.Plottable.Heatmap
~ScottPlot.Plot.AddHeatmap(double[,] intensities, ScottPlot.Drawing.Colormap colormap = null, bool? lockScales = null) -> ScottPlot.Plottable.Heatmap
~ScottPlot.Plot.AddHeatmap(System.Drawing.Color color, double?[,] opacity, bool? lockScales = true) -> ScottPlot.Plottable.Heatmap
~ScottPlot.Plot.AddHeatMapCoordinated(double?[,] intensities, double? xMin = null, double? xMax = null, double? yMin = null, double? yMax = null, ScottPlot.Drawing.Colormap colormap = null) -> ScottPlot.Plottable.CoordinatedHeatmap
~ScottPlot.Plot.AddHeatmapCoordinated(double?[,] intensities, double? xMin = null, double? xMax = null, double? yMin = null, double? yMax = null, ScottPlot.Drawing.Colormap colormap = null) -> ScottPlot.Plottable.CoordinatedHeatmap
~ScottPlot.Plot.AddHeatMapCoordinated(double[,] intensities, double? xMin = null, double? xMax = null, double? yMin = null, double? yMax = null, ScottPlot.Drawing.Colormap colormap = null) -> ScottPlot.Plottable.CoordinatedHeatmap
~ScottPlot.Plot.AddHeatmapCoordinated(double[,] intensities, double? xMin = null, double? xMax = null, double? yMin = null, double? yMax = null, ScottPlot.Drawing.Colormap colormap = null) -> ScottPlot.Plottable.CoordinatedHeatmap
~ScottPlot.Plot.AddHorizontalLine(double y, System.Drawing.Color? color = null, float width = 1, ScottPlot.LineStyle style = ScottPlot.LineStyle.Solid, string label = null) -> ScottPlot.Plottable.HLine
~ScottPlot.Plot.AddHorizontalSpan(double xMin, double xMax, System.Drawing.Color? color = null, string label = null) -> ScottPlot.Plottable.HSpan
~ScottPlot.Plot.AddImage(System.Drawing.Bitmap bitmap, double x, double y, double rotation = 0, double scale = 1, ScottPlot.Alignment anchor = ScottPlot.Alignment.UpperLeft) -> ScottPlot.Plottable.Image
~ScottPlot.Plot.AddLine(double slope, double offset, (double x1, double x2) xLimits, System.Drawing.Color? color = null, float lineWidth = 1) -> ScottPlot.Plottable.ScatterPlot
~ScottPlot.Plot.AddLine(double x1, double y1, double x2, double y2, System.Drawing.Color? color = null, float lineWidth = 1) -> ScottPlot.Plottable.ScatterPlot
~ScottPlot.Plot.AddLollipop(double[] values, double[] positions, System.Drawing.Color? color = null) -> ScottPlot.Plottable.LollipopPlot
~ScottPlot.Plot.AddLollipop(double[] values, System.Drawing.Color? color = null) -> ScottPlot.Plottable.LollipopPlot
~ScottPlot.Plot.AddMarker(double x, double y, ScottPlot.MarkerShape shape = ScottPlot.MarkerShape.filledCircle, double size = 10, System.Drawing.Color? color = null, string label = null) -> ScottPlot.Plottable.MarkerPlot
~ScottPlot.Plot.AddMarkerDraggable(double x, double y, ScottPlot.MarkerShape shape = ScottPlot.MarkerShape.filledCircle, double size = 10, System.Drawing.Color? color = null, string label = null) -> ScottPlot.Plottable.DraggableMarkerPlot
~ScottPlot.Plot.AddOHLCs(ScottPlot.OHLC[] ohlcs) -> ScottPlot.Plottable.FinancePlot
~ScottPlot.Plot.AddPie(double[] values, bool hideGridAndFrame = true) -> ScottPlot.Plottable.PiePlot
~ScottPlot.Plot.AddPoint(double x, double y, System.Drawing.Color? color = null, float size = 5, ScottPlot.MarkerShape shape = ScottPlot.MarkerShape.filledCircle, string label = null) -> ScottPlot.Plottable.MarkerPlot
~ScottPlot.Plot.AddPolygon(double[] xs, double[] ys, System.Drawing.Color? fillColor = null, double lineWidth = 0, System.Drawing.Color? lineColor = null) -> ScottPlot.Plottable.Polygon
~ScottPlot.Plot.AddPolygons(System.Collections.Generic.List<System.Collections.Generic.List<(double x, double y)>> polys, System.Drawing.Color? fillColor = null, double lineWidth = 0, System.Drawing.Color? lineColor = null) -> ScottPlot.Plottable.Polygons
~ScottPlot.Plot.AddPopulation(ScottPlot.Statistics.Population population, string label = null) -> ScottPlot.Plottable.PopulationPlot
~ScottPlot.Plot.AddPopulations(ScottPlot.Statistics.PopulationMultiSeries multiSeries) -> ScottPlot.Plottable.PopulationPlot
~ScottPlot.Plot.AddPopulations(ScottPlot.Statistics.Population[] populations, string label = null) -> ScottPlot.Plottable.PopulationPlot
~ScottPlot.Plot.AddRadar(double[,] values, bool independentAxes = false, double[] maxValues = null, bool disableFrameAndGrid = true) -> ScottPlot.Plottable.RadarPlot
~ScottPlot.Plot.AddRadialGauge(double[] values, bool disableFrameAndGrid = true) -> ScottPlot.Plottable.RadialGaugePlot
~ScottPlot.Plot.AddScaleBar(double width, double height, string xLabel = null, string yLabel = null) -> ScottPlot.Plottable.ScaleBar
~ScottPlot.Plot.AddScatter(double[] xs, double[] ys, System.Drawing.Color? color = null, float lineWidth = 1, float markerSize = 5, ScottPlot.MarkerShape markerShape = ScottPlot.MarkerShape.filledCircle, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid, string label = null) -> ScottPlot.Plottable.ScatterPlot
~ScottPlot.Plot.AddScatterLines(double[] xs, double[] ys, System.Drawing.Color? color = null, float lineWidth = 1, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid, string label = null) -> ScottPlot.Plottable.ScatterPlot
~ScottPlot.Plot.AddScatterList(System.Drawing.Color? color = null, float lineWidth = 1, float markerSize = 5, string label = null, ScottPlot.MarkerShape markerShape = ScottPlot.MarkerShape.filledCircle, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid) -> ScottPlot.Plottable.ScatterPlotList<double>
~ScottPlot.Plot.AddScatterList<T>(System.Drawing.Color? color = null, float lineWidth = 1, float markerSize = 5, string label = null, ScottPlot.MarkerShape markerShape = ScottPlot.MarkerShape.filledCircle, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid) -> ScottPlot.Plottable.ScatterPlotList<T>
~ScottPlot.Plot.AddScatterPoints(double[] xs, double[] ys, System.Drawing.Color? color = null, float markerSize = 5, ScottPlot.MarkerShape markerShape = ScottPlot.MarkerShape.filledCircle, string label = null) -> ScottPlot.Plottable.ScatterPlot
~ScottPlot.Plot.AddScatterStep(double[] xs, double[] ys, System.Drawing.Color? color = null, float lineWidth = 1, string label = null) -> ScottPlot.Plottable.ScatterPlot
~ScottPlot.Plot.AddSignal(double[] ys, double sampleRate = 1, System.Drawing.Color? color = null, string label = null) -> ScottPlot.Plottable.SignalPlot
~ScottPlot.Plot.AddSignal<T>(T[] ys, double sampleRate = 1, System.Drawing.Color? color = null, string label = null) -> ScottPlot.Plottable.SignalPlotGeneric<T>
~ScottPlot.Plot.AddSignalConst<T>(T[] ys, double sampleRate = 1, System.Drawing.Color? color = null, string label = null) -> ScottPlot.Plottable.SignalPlotConst<T>
~ScottPlot.Plot.AddSignalXY(double[] xs, double[] ys, System.Drawing.Color? color = null, string label = null) -> ScottPlot.Plottable.SignalPlotXY
~ScottPlot.Plot.AddSignalXYConst<TX, TY>(TX[] xs, TY[] ys, System.Drawing.Color? color = null, string label = null) -> ScottPlot.Plottable.SignalPlotXYConst<TX, TY>
~ScottPlot.Plot.AddText(string label, double x, double y, float size = 12, System.Drawing.Color? color = null) -> ScottPlot.Plottable.Text
~ScottPlot.Plot.AddText(string label, double x, double y, ScottPlot.Drawing.Font font) -> ScottPlot.Plottable.Text
~ScottPlot.Plot.AddTooltip(string label, double x, double y) -> ScottPlot.Plottable.Tooltip
~ScottPlot.Plot.AddVectorField(ScottPlot.Statistics.Vector2[,] vectors, double[] xs, double[] ys, string label = null, System.Drawing.Color? color = null, ScottPlot.Drawing.Colormap colormap = null, double scaleFactor = 1) -> ScottPlot.Plottable.VectorField
~ScottPlot.Plot.AddVectorFieldList() -> ScottPlot.Plottable.VectorFieldList
~ScottPlot.Plot.AddVerticalLine(double x, System.Drawing.Color? color = null, float width = 1, ScottPlot.LineStyle style = ScottPlot.LineStyle.Solid, string label = null) -> ScottPlot.Plottable.VLine
~ScottPlot.Plot.AddVerticalSpan(double yMin, double yMax, System.Drawing.Color? color = null, string label = null) -> ScottPlot.Plottable.VSpan
~ScottPlot.Plot.AutoAxis() -> double[]
~ScottPlot.Plot.AutoScale() -> double[]
~ScottPlot.Plot.Axis(double? x1 = null, double? x2 = null, double? y1 = null, double? y2 = null, double? _ = null) -> double[]
~ScottPlot.Plot.Axis(double[] axisLimits) -> double[]
~ScottPlot.Plot.Axis(double[] axisLimits, int xAxisIndex = 0, int yAxisIndex = 0) -> void
~ScottPlot.Plot.BenchmarkTimes() -> double[]
~ScottPlot.Plot.Clear(System.Type plottableType) -> void
~ScottPlot.Plot.Copy() -> ScottPlot.Plot
~ScottPlot.Plot.GetAxesMatching(int? axisIndex = null, bool? isVertical = null) -> System.Collections.Generic.IEnumerable<ScottPlot.Renderable.Axis>
~ScottPlot.Plot.GetBitmap(bool lowQuality = false, double scale = 1) -> System.Drawing.Bitmap
~ScottPlot.Plot.GetDraggable(double xPixel, double yPixel, int snapDistancePixels = 5) -> ScottPlot.Plottable.IDraggable
~ScottPlot.Plot.GetGuid() -> string
~ScottPlot.Plot.GetHittable(double xPixel, double yPixel) -> ScottPlot.Plottable.IPlottable
~ScottPlot.Plot.GetImageBase64(bool lowQuality = false, double scale = 1) -> string
~ScottPlot.Plot.GetImageBytes(bool lowQuality = false, double scale = 1) -> byte[]
~ScottPlot.Plot.GetImageHTML(bool lowQuality = false, double scale = 1) -> string
~ScottPlot.Plot.GetLegendBitmap(bool lowQuality = false) -> System.Drawing.Bitmap
~ScottPlot.Plot.GetPlottables() -> ScottPlot.Plottable.IPlottable[]
~ScottPlot.Plot.GetSettings(bool showWarning = true) -> ScottPlot.Settings
~ScottPlot.Plot.Legend(bool? enable = true, ScottPlot.Alignment? location = 7) -> ScottPlot.Renderable.Legend
~ScottPlot.Plot.MatchAxis(ScottPlot.Plot sourcePlot, bool horizontal = true, bool vertical = true) -> void
~ScottPlot.Plot.MatchLayout(ScottPlot.Plot sourcePlot, bool horizontal = true, bool vertical = true) -> void
~ScottPlot.Plot.MoveFirst(ScottPlot.Plottable.IPlottable plottable) -> void
~ScottPlot.Plot.MoveLast(ScottPlot.Plottable.IPlottable plottable) -> void
~ScottPlot.Plot.Palette.get -> ScottPlot.IPalette
~ScottPlot.Plot.Palette.set -> void
~ScottPlot.Plot.PlotAnnotation(string label, double xPixel = 10, double yPixel = 10, double fontSize = 12, string fontName = "Segoe UI", System.Drawing.Color? fontColor = null, double fontAlpha = 1, bool fill = true, System.Drawing.Color? fillColor = null, double fillAlpha = 0.2, double lineWidth = 1, System.Drawing.Color? lineColor = null, double lineAlpha = 1, bool shadow = false) -> ScottPlot.Plottable.Annotation
~ScottPlot.Plot.PlotArrow(double tipX, double tipY, double baseX, double baseY, double lineWidth = 5, float arrowheadWidth = 3, float arrowheadLength = 3, System.Drawing.Color? color = null, string label = null) -> ScottPlot.Plottable.ScatterPlot
~ScottPlot.Plot.PlotBar(double[] xs, double[] ys, double[] errorY = null, string label = null, double barWidth = 0.8, double xOffset = 0, bool fill = true, System.Drawing.Color? fillColor = null, double outlineWidth = 1, System.Drawing.Color? outlineColor = null, double errorLineWidth = 1, double errorCapSize = 0.38, System.Drawing.Color? errorColor = null, bool horizontal = false, bool showValues = false, System.Drawing.Color? valueColor = null, bool autoAxis = true, double[] yOffsets = null, System.Drawing.Color? negativeColor = null) -> ScottPlot.Plottable.BarPlot
~ScottPlot.Plot.PlotBarGroups(string[] groupLabels, string[] seriesLabels, double[][] ys, double[][] yErr = null, double groupWidthFraction = 0.8, double barWidthFraction = 0.8, double errorCapSize = 0.38, bool showValues = false) -> ScottPlot.Plottable.BarPlot[]
~ScottPlot.Plot.PlotBitmap(System.Drawing.Bitmap bitmap, double x, double y, string label = null, ScottPlot.Alignment alignment = ScottPlot.Alignment.MiddleLeft, double rotation = 0, System.Drawing.Color? frameColor = null, int frameSize = 0) -> ScottPlot.Plottable.Image
~ScottPlot.Plot.PlotCandlestick(ScottPlot.OHLC[] ohlcs, System.Drawing.Color? colorUp = null, System.Drawing.Color? colorDown = null, bool autoWidth = true, bool sequential = false) -> ScottPlot.Plottable.FinancePlot
~ScottPlot.Plot.PlotErrorBars(double[] xs, double[] ys, double[] xPositiveError = null, double[] xNegativeError = null, double[] yPositiveError = null, double[] yNegativeError = null, System.Drawing.Color? color = null, double lineWidth = 1, double capWidth = 3, string label = null) -> void
~ScottPlot.Plot.PlotFill(double[] xs, double[] ys, string label = null, double lineWidth = 0, System.Drawing.Color? lineColor = null, bool fill = true, System.Drawing.Color? fillColor = null, double fillAlpha = 1, double baseline = 0) -> ScottPlot.Plottable.Polygon
~ScottPlot.Plot.PlotFill(double[] xs1, double[] ys1, double[] xs2, double[] ys2, string label = null, double lineWidth = 0, System.Drawing.Color? lineColor = null, bool fill = true, System.Drawing.Color? fillColor = null, double fillAlpha = 1, double baseline = 0) -> ScottPlot.Plottable.Polygon
~ScottPlot.Plot.PlotFillAboveBelow(double[] xs, double[] ys, string labelAbove = null, string labelBelow = null, double lineWidth = 1, System.Drawing.Color? lineColor = null, bool fill = true, System.Drawing.Color? fillColorAbove = null, System.Drawing.Color? fillColorBelow = null, double fillAlpha = 1, double baseline = 0) -> (ScottPlot.Plottable.Polygon, ScottPlot.Plottable.Polygon)
~ScottPlot.Plot.PlotFillRightLeft(double[] xs, double[] ys, string labelRight = null, string labelLeft = null, double lineWidth = 1, System.Drawing.Color? lineColor = null, bool fill = true, System.Drawing.Color? fillColorRight = null, System.Drawing.Color? fillColorLeft = null, double fillAlpha = 1, double baseline = 0) -> (ScottPlot.Plottable.Polygon, ScottPlot.Plottable.Polygon)
~ScottPlot.Plot.PlotFunction(System.Func<double, double?> function, System.Drawing.Color? color = null, double lineWidth = 1, double markerSize = 0, string label = "f(x)", ScottPlot.MarkerShape markerShape = ScottPlot.MarkerShape.none, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid) -> ScottPlot.Plottable.FunctionPlot
~ScottPlot.Plot.PlotHeatmap(double?[,] intensities, ScottPlot.Drawing.Colormap colormap = null, string label = null, double[] axisOffsets = null, double[] axisMultipliers = null, double? scaleMin = null, double? scaleMax = null, double? transparencyThreshold = null, System.Drawing.Bitmap backgroundImage = null, bool displayImageAbove = false, bool drawAxisLabels = true) -> ScottPlot.Plottable.Heatmap
~ScottPlot.Plot.PlotHeatmap(double[,] intensities, ScottPlot.Drawing.Colormap colormap = null, string label = null, double[] axisOffsets = null, double[] axisMultipliers = null, double? scaleMin = null, double? scaleMax = null, double? transparencyThreshold = null, System.Drawing.Bitmap backgroundImage = null, bool displayImageAbove = false, bool drawAxisLabels = true) -> ScottPlot.Plottable.Heatmap
~ScottPlot.Plot.PlotHLine(double y, System.Drawing.Color? color = null, double lineWidth = 1, string label = null, bool draggable = false, double dragLimitLower = -Infinity, double dragLimitUpper = Infinity, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid) -> ScottPlot.Plottable.HLine
~ScottPlot.Plot.PlotHSpan(double x1, double x2, System.Drawing.Color? color = null, double alpha = 0.5, string label = null, bool draggable = false, bool dragFixedSize = false, double dragLimitLower = -Infinity, double dragLimitUpper = Infinity) -> ScottPlot.Plottable.HSpan
~ScottPlot.Plot.PlotLine(double slope, double offset, (double x1, double x2) xLimits, System.Drawing.Color? color = null, double lineWidth = 1, string label = null, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid) -> ScottPlot.Plottable.ScatterPlot
~ScottPlot.Plot.PlotLine(double x1, double y1, double x2, double y2, System.Drawing.Color? color = null, double lineWidth = 1, string label = null, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid) -> ScottPlot.Plottable.ScatterPlot
~ScottPlot.Plot.PlotOHLC(ScottPlot.OHLC[] ohlcs, System.Drawing.Color? colorUp = null, System.Drawing.Color? colorDown = null, bool autoWidth = true, bool sequential = false) -> ScottPlot.Plottable.FinancePlot
~ScottPlot.Plot.PlotPie(double[] values, string[] sliceLabels = null, System.Drawing.Color[] colors = null, bool explodedChart = false, bool showValues = false, bool showPercentages = false, bool showLabels = true, string label = null) -> ScottPlot.Plottable.PiePlot
~ScottPlot.Plot.PlotPoint(double x, double y, System.Drawing.Color? color = null, double markerSize = 5, string label = null, double? errorX = null, double? errorY = null, double errorLineWidth = 1, double errorCapSize = 3, ScottPlot.MarkerShape markerShape = ScottPlot.MarkerShape.filledCircle, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid) -> ScottPlot.Plottable.ScatterPlot
~ScottPlot.Plot.PlotPolygon(double[] xs, double[] ys, string label = null, double lineWidth = 0, System.Drawing.Color? lineColor = null, bool fill = true, System.Drawing.Color? fillColor = null, double fillAlpha = 1) -> ScottPlot.Plottable.Polygon
~ScottPlot.Plot.PlotPolygons(System.Collections.Generic.List<System.Collections.Generic.List<(double x, double y)>> polys, string label = null, double lineWidth = 0, System.Drawing.Color? lineColor = null, bool fill = true, System.Drawing.Color? fillColor = null, double fillAlpha = 1) -> ScottPlot.Plottable.Polygons
~ScottPlot.Plot.PlotPopulations(ScottPlot.Statistics.Population population, string label = null) -> ScottPlot.Plottable.PopulationPlot
~ScottPlot.Plot.PlotPopulations(ScottPlot.Statistics.PopulationMultiSeries multiSeries) -> ScottPlot.Plottable.PopulationPlot
~ScottPlot.Plot.PlotPopulations(ScottPlot.Statistics.PopulationSeries series, string label = null) -> ScottPlot.Plottable.PopulationPlot
~ScottPlot.Plot.PlotPopulations(ScottPlot.Statistics.Population[] populations, string label = null) -> ScottPlot.Plottable.PopulationPlot
~ScottPlot.Plot.PlotRadar(double[,] values, string[] categoryNames = null, string[] groupNames = null, System.Drawing.Color[] fillColors = null, double fillAlpha = 0.4, System.Drawing.Color? webColor = null, bool independentAxes = false, double[] maxValues = null) -> ScottPlot.Plottable.RadarPlot
~ScottPlot.Plot.PlotScaleBar(double sizeX, double sizeY, string labelX = null, string labelY = null, double thickness = 2, double fontSize = 12, System.Drawing.Color? color = null, double padPx = 10) -> ScottPlot.Plottable.ScaleBar
~ScottPlot.Plot.PlotScatter(double[] xs, double[] ys, System.Drawing.Color? color = null, double lineWidth = 1, double markerSize = 5, string label = null, double[] errorX = null, double[] errorY = null, double errorLineWidth = 1, double errorCapSize = 3, ScottPlot.MarkerShape markerShape = ScottPlot.MarkerShape.filledCircle, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid) -> ScottPlot.Plottable.ScatterPlot
~ScottPlot.Plot.PlotScatterHighlight(double[] xs, double[] ys, System.Drawing.Color? color = null, double lineWidth = 1, double markerSize = 5, string label = null, double[] errorX = null, double[] errorY = null, double errorLineWidth = 1, double errorCapSize = 3, ScottPlot.MarkerShape markerShape = ScottPlot.MarkerShape.filledCircle, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid, ScottPlot.MarkerShape highlightedShape = ScottPlot.MarkerShape.openCircle, System.Drawing.Color? highlightedColor = null, double? highlightedMarkerSize = null) -> ScottPlot.Plottable.ScatterPlotHighlight
~ScottPlot.Plot.PlotSignal(double[] ys, double sampleRate = 1, double xOffset = 0, double yOffset = 0, System.Drawing.Color? color = null, double lineWidth = 1, double markerSize = 5, string label = null, System.Drawing.Color[] colorByDensity = null, int? minRenderIndex = null, int? maxRenderIndex = null, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid, bool useParallel = true) -> ScottPlot.Plottable.SignalPlot
~ScottPlot.Plot.PlotSignalConst<T>(T[] ys, double sampleRate = 1, double xOffset = 0, T yOffset = default(T), System.Drawing.Color? color = null, double lineWidth = 1, double markerSize = 5, string label = null, System.Drawing.Color[] colorByDensity = null, int? minRenderIndex = null, int? maxRenderIndex = null, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid, bool useParallel = true) -> ScottPlot.Plottable.SignalPlotConst<T>
~ScottPlot.Plot.PlotSignalXY(double[] xs, double[] ys, System.Drawing.Color? color = null, double lineWidth = 1, double markerSize = 5, string label = null, int? minRenderIndex = null, int? maxRenderIndex = null, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid, bool useParallel = true) -> ScottPlot.Plottable.SignalPlotXY
~ScottPlot.Plot.PlotSignalXYConst<TX, TY>(TX[] xs, TY[] ys, System.Drawing.Color? color = null, double lineWidth = 1, double markerSize = 5, string label = null, int? minRenderIndex = null, int? maxRenderIndex = null, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid, bool useParallel = true) -> ScottPlot.Plottable.SignalPlotXYConst<TX, TY>
~ScottPlot.Plot.PlotStep(double[] xs, double[] ys, System.Drawing.Color? color = null, double lineWidth = 1, string label = null) -> ScottPlot.Plottable.ScatterPlot
~ScottPlot.Plot.PlotText(string text, double x, double y, System.Drawing.Color? color = null, string fontName = null, double fontSize = 12, bool bold = false, string label = null, ScottPlot.Alignment alignment = ScottPlot.Alignment.MiddleLeft, double rotation = 0, bool frame = false, System.Drawing.Color? frameColor = null) -> ScottPlot.Plottable.Text
~ScottPlot.Plot.PlotVectorField(ScottPlot.Statistics.Vector2[,] vectors, double[] xs, double[] ys, string label = null, System.Drawing.Color? color = null, ScottPlot.Drawing.Colormap colormap = null, double scaleFactor = 1) -> ScottPlot.Plottable.VectorField
~ScottPlot.Plot.PlotVLine(double x, System.Drawing.Color? color = null, double lineWidth = 1, string label = null, bool draggable = false, double dragLimitLower = -Infinity, double dragLimitUpper = Infinity, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid) -> ScottPlot.Plottable.VLine
~ScottPlot.Plot.PlotVSpan(double y1, double y2, System.Drawing.Color? color = null, double alpha = 0.5, string label = null, bool draggable = false, bool dragFixedSize = false, double dragLimitLower = -Infinity, double dragLimitUpper = Infinity) -> ScottPlot.Plottable.VSpan
~ScottPlot.Plot.PlotWaterfall(double[] xs, double[] ys, double[] errorY = null, string label = null, double barWidth = 0.8, double xOffset = 0, bool fill = true, System.Drawing.Color? fillColor = null, double outlineWidth = 1, System.Drawing.Color? outlineColor = null, double errorLineWidth = 1, double errorCapSize = 0.38, System.Drawing.Color? errorColor = null, bool horizontal = false, bool showValues = false, System.Drawing.Color? valueColor = null, bool autoAxis = true, System.Drawing.Color? negativeColor = null) -> ScottPlot.Plottable.BarPlot
~ScottPlot.Plot.Remove(ScottPlot.Plottable.IPlottable plottable) -> void
~ScottPlot.Plot.RemoveAxis(ScottPlot.Renderable.Axis axis) -> void
~ScottPlot.Plot.Render(bool lowQuality = false) -> System.Drawing.Bitmap
~ScottPlot.Plot.Render(int width, int height, bool lowQuality = false, double scale = 1) -> System.Drawing.Bitmap
~ScottPlot.Plot.Render(System.Drawing.Bitmap bmp, bool lowQuality = false, double scale = 1) -> System.Drawing.Bitmap
~ScottPlot.Plot.RenderLegend(bool lowQuality = false, double scale = 1) -> System.Drawing.Bitmap
~ScottPlot.Plot.SaveFig(string filePath, int? width = null, int? height = null, bool lowQuality = false, double scale = 1) -> string
~ScottPlot.Plot.SetCulture(string shortDatePattern = null, string decimalSeparator = null, string numberGroupSeparator = null, int? decimalDigits = null, int? numberNegativePattern = null, int[] numberGroupSizes = null) -> void
~ScottPlot.Plot.SetCulture(System.Globalization.CultureInfo culture) -> void
~ScottPlot.Plot.Style(ScottPlot.Styles.IStyle style) -> void
~ScottPlot.Plot.Style(System.Drawing.Color? figureBackground = null, System.Drawing.Color? dataBackground = null, System.Drawing.Color? grid = null, System.Drawing.Color? tick = null, System.Drawing.Color? axisLabel = null, System.Drawing.Color? titleLabel = null, System.Drawing.Bitmap dataBackgroundImage = null, System.Drawing.Bitmap figureBackgroundImage = null) -> void
~ScottPlot.Plot.Ticks(bool? displayTicksX = null, bool? displayTicksY = null, bool? displayTicksXminor = null, bool? displayTicksYminor = null, bool? displayTickLabelsX = null, bool? displayTickLabelsY = null, System.Drawing.Color? color = null, bool? useMultiplierNotation = null, bool? useOffsetNotation = null, bool? useExponentialNotation = null, bool? dateTimeX = null, bool? dateTimeY = null, bool? rulerModeX = null, bool? rulerModeY = null, bool? invertSignX = null, bool? invertSignY = null, string fontName = null, float? fontSize = null, float? xTickRotation = null, bool? logScaleX = null, bool? logScaleY = null, string numericFormatStringX = null, string numericFormatStringY = null, bool? snapToNearestPixel = null, int? baseX = null, int? baseY = null, string prefixX = null, string prefixY = null, string dateTimeFormatStringX = null, string dateTimeFormatStringY = null) -> void
~ScottPlot.Plot.Title(string label, bool? bold = true, System.Drawing.Color? color = null, float? size = null, string fontName = null) -> void
~ScottPlot.Plot.XAxis.get -> ScottPlot.Renderable.Axis
~ScottPlot.Plot.XAxis2.get -> ScottPlot.Renderable.Axis
~ScottPlot.Plot.XLabel(string label) -> void
~ScottPlot.Plot.XTicks(double[] positions = null, string[] labels = null) -> void
~ScottPlot.Plot.XTicks(string[] labels) -> void
~ScottPlot.Plot.YAxis.get -> ScottPlot.Renderable.Axis
~ScottPlot.Plot.YAxis2.get -> ScottPlot.Renderable.Axis
~ScottPlot.Plot.YLabel(string label) -> void
~ScottPlot.Plot.YTicks(double[] positions = null, string[] labels = null) -> void
~ScottPlot.Plot.YTicks(string[] labels) -> void
~ScottPlot.Plottable.Annotation.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.Annotation.Label.get -> string
~ScottPlot.Plottable.Annotation.Label.set -> void
~ScottPlot.Plottable.Annotation.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.ArrowCoordinated.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.ArrowCoordinated.Label.get -> string
~ScottPlot.Plottable.ArrowCoordinated.Label.set -> void
~ScottPlot.Plottable.ArrowCoordinated.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.AxisLine.DragSnap.get -> ScottPlot.SnapLogic.ISnap2D
~ScottPlot.Plottable.AxisLine.DragSnap.set -> void
~ScottPlot.Plottable.AxisLine.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.AxisLine.Label.get -> string
~ScottPlot.Plottable.AxisLine.Label.set -> void
~ScottPlot.Plottable.AxisLine.PositionFormatter.get -> System.Func<double, string>
~ScottPlot.Plottable.AxisLine.PositionFormatter.set -> void
~ScottPlot.Plottable.AxisLine.PositionLabelAxis.get -> ScottPlot.Renderable.Axis
~ScottPlot.Plottable.AxisLine.PositionLabelAxis.set -> void
~ScottPlot.Plottable.AxisLine.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.AxisLine.RenderLine(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality) -> void
~ScottPlot.Plottable.AxisLineVector.DragSnap.get -> ScottPlot.SnapLogic.ISnap2D
~ScottPlot.Plottable.AxisLineVector.DragSnap.set -> void
~ScottPlot.Plottable.AxisLineVector.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.AxisLineVector.Label.get -> string
~ScottPlot.Plottable.AxisLineVector.Label.set -> void
~ScottPlot.Plottable.AxisLineVector.PositionFormatter.get -> System.Func<double, string>
~ScottPlot.Plottable.AxisLineVector.PositionFormatter.set -> void
~ScottPlot.Plottable.AxisLineVector.Positions -> double[]
~ScottPlot.Plottable.AxisLineVector.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.AxisLineVector.RenderLine(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality) -> void
~ScottPlot.Plottable.AxisSpan.DragSnap.get -> ScottPlot.SnapLogic.ISnap2D
~ScottPlot.Plottable.AxisSpan.DragSnap.set -> void
~ScottPlot.Plottable.AxisSpan.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.AxisSpan.Label.get -> string
~ScottPlot.Plottable.AxisSpan.Label.set -> void
~ScottPlot.Plottable.AxisSpan.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.Bar.Label.get -> string
~ScottPlot.Plottable.Bar.Label.set -> void
~ScottPlot.Plottable.BarPlot.BarPlot(double[] xs, double[] ys, double[] yErr, double[] yOffsets) -> void
~ScottPlot.Plottable.BarPlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.BarPlot.Label.get -> string
~ScottPlot.Plottable.BarPlot.Label.set -> void
~ScottPlot.Plottable.BarPlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.BarPlot.RenderBarFromRect(System.Drawing.RectangleF rect, bool negative, System.Drawing.Graphics gfx) -> void
~ScottPlot.Plottable.BarPlotBase.Positions.get -> double[]
~ScottPlot.Plottable.BarPlotBase.Positions.set -> void
~ScottPlot.Plottable.BarPlotBase.Replace(double[] positions, double[] values) -> void
~ScottPlot.Plottable.BarPlotBase.ValueErrors.get -> double[]
~ScottPlot.Plottable.BarPlotBase.ValueErrors.set -> void
~ScottPlot.Plottable.BarPlotBase.ValueFormatter.get -> System.Func<double, string>
~ScottPlot.Plottable.BarPlotBase.ValueFormatter.set -> void
~ScottPlot.Plottable.BarPlotBase.ValueOffsets.get -> double[]
~ScottPlot.Plottable.BarPlotBase.ValueOffsets.set -> void
~ScottPlot.Plottable.BarPlotBase.Values.get -> double[]
~ScottPlot.Plottable.BarPlotBase.Values.set -> void
~ScottPlot.Plottable.BarPlotBase.Xs.get -> double[]
~ScottPlot.Plottable.BarPlotBase.Xs.set -> void
~ScottPlot.Plottable.BarPlotBase.Ys.get -> double[]
~ScottPlot.Plottable.BarPlotBase.Ys.set -> void
~ScottPlot.Plottable.BarSeries.BarSeries(System.Collections.Generic.List<ScottPlot.Plottable.Bar> bars) -> void
~ScottPlot.Plottable.BarSeries.GetBar(ScottPlot.Coordinate coordinate) -> ScottPlot.Plottable.Bar
~ScottPlot.Plottable.BarSeries.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.BarSeries.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.Bracket.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.Bracket.Label.get -> string
~ScottPlot.Plottable.Bracket.Label.set -> void
~ScottPlot.Plottable.Bracket.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.BubblePlot.Add(double[] xs, double[] ys, double size, System.Drawing.Color fillColor, double edgeWidth, System.Drawing.Color edgeColor) -> void
~ScottPlot.Plottable.BubblePlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.BubblePlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.ClevelandDotPlot.ClevelandDotPlot(double[] xs, double[] ys1, double[] ys2) -> void
~ScottPlot.Plottable.ClevelandDotPlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.ClevelandDotPlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.ClevelandDotPlot.SetPoint1Style(System.Drawing.Color? color = null, ScottPlot.MarkerShape? markerShape = null, string label = null) -> void
~ScottPlot.Plottable.ClevelandDotPlot.SetPoint2Style(System.Drawing.Color? color = null, ScottPlot.MarkerShape? markerShape = null, string label = null) -> void
~ScottPlot.Plottable.ClevelandDotPlot.Ys1.get -> double[]
~ScottPlot.Plottable.ClevelandDotPlot.Ys1.set -> void
~ScottPlot.Plottable.ClevelandDotPlot.Ys2.get -> double[]
~ScottPlot.Plottable.ClevelandDotPlot.Ys2.set -> void
~ScottPlot.Plottable.Colorbar.AddTick(double fraction, string label) -> void
~ScottPlot.Plottable.Colorbar.AddTicks(double[] fractions, string[] labels) -> void
~ScottPlot.Plottable.Colorbar.AutomaticTicks(bool enable = true, int? minimumSpacing = null, System.Func<double, string> formatter = null) -> void
~ScottPlot.Plottable.Colorbar.Colorbar(ScottPlot.Drawing.Colormap colormap = null) -> void
~ScottPlot.Plottable.Colorbar.Colorbar(ScottPlot.Plottable.IHasColormap plottable) -> void
~ScottPlot.Plottable.Colorbar.GetBitmap() -> System.Drawing.Bitmap
~ScottPlot.Plottable.Colorbar.GetBitmap(int width, int height, bool vertical = true) -> System.Drawing.Bitmap
~ScottPlot.Plottable.Colorbar.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.Colorbar.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.Colorbar.SetTicks(double[] fractions, string[] labels) -> void
~ScottPlot.Plottable.Colorbar.SetTicks(double[] values, string[] labels, double min, double max) -> void
~ScottPlot.Plottable.Colorbar.UpdateColormap(ScottPlot.Drawing.Colormap newColormap) -> void
~ScottPlot.Plottable.CoxcombPlot.CategoryImages.get -> System.Drawing.Image[]
~ScottPlot.Plottable.CoxcombPlot.CategoryImages.set -> void
~ScottPlot.Plottable.CoxcombPlot.CoxcombPlot(double[] values, System.Drawing.Color[] fillColors) -> void
~ScottPlot.Plottable.CoxcombPlot.FillColors.get -> System.Drawing.Color[]
~ScottPlot.Plottable.CoxcombPlot.FillColors.set -> void
~ScottPlot.Plottable.CoxcombPlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.CoxcombPlot.HatchOptions.get -> ScottPlot.HatchOptions[]
~ScottPlot.Plottable.CoxcombPlot.HatchOptions.set -> void
~ScottPlot.Plottable.CoxcombPlot.Label.get -> string
~ScottPlot.Plottable.CoxcombPlot.Label.set -> void
~ScottPlot.Plottable.CoxcombPlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.CoxcombPlot.SliceLabels.get -> string[]
~ScottPlot.Plottable.CoxcombPlot.SliceLabels.set -> void
~ScottPlot.Plottable.CoxcombPlot.Values.get -> double[]
~ScottPlot.Plottable.CoxcombPlot.Values.set -> void
~ScottPlot.Plottable.Crosshair.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.Crosshair.HorizontalLine -> ScottPlot.Plottable.HLine
~ScottPlot.Plottable.Crosshair.Label.get -> string
~ScottPlot.Plottable.Crosshair.Label.set -> void
~ScottPlot.Plottable.Crosshair.LabelFont.get -> ScottPlot.Drawing.Font
~ScottPlot.Plottable.Crosshair.LabelFont.set -> void
~ScottPlot.Plottable.Crosshair.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.Crosshair.StringFormatX.get -> string
~ScottPlot.Plottable.Crosshair.StringFormatX.set -> void
~ScottPlot.Plottable.Crosshair.StringFormatY.get -> string
~ScottPlot.Plottable.Crosshair.StringFormatY.set -> void
~ScottPlot.Plottable.Crosshair.VerticalLine -> ScottPlot.Plottable.VLine
~ScottPlot.Plottable.DraggableMarkerPlot.DragSnap.get -> ScottPlot.SnapLogic.ISnap2D
~ScottPlot.Plottable.DraggableMarkerPlot.DragSnap.set -> void
~ScottPlot.Plottable.ErrorBar.ErrorBar(double[] xs, double[] ys, double[] xErrorsPositive, double[] xErrorsNegative, double[] yErrorsPositive, double[] yErrorsNegative) -> void
~ScottPlot.Plottable.ErrorBar.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.ErrorBar.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.ErrorBar.XErrorsNegative.get -> double[]
~ScottPlot.Plottable.ErrorBar.XErrorsNegative.set -> void
~ScottPlot.Plottable.ErrorBar.XErrorsPositive.get -> double[]
~ScottPlot.Plottable.ErrorBar.XErrorsPositive.set -> void
~ScottPlot.Plottable.ErrorBar.Xs.get -> double[]
~ScottPlot.Plottable.ErrorBar.Xs.set -> void
~ScottPlot.Plottable.ErrorBar.YErrorsNegative.get -> double[]
~ScottPlot.Plottable.ErrorBar.YErrorsNegative.set -> void
~ScottPlot.Plottable.ErrorBar.YErrorsPositive.get -> double[]
~ScottPlot.Plottable.ErrorBar.YErrorsPositive.set -> void
~ScottPlot.Plottable.ErrorBar.Ys.get -> double[]
~ScottPlot.Plottable.ErrorBar.Ys.set -> void
~ScottPlot.Plottable.FinancePlot.Add(ScottPlot.OHLC ohlc) -> void
~ScottPlot.Plottable.FinancePlot.AddRange(ScottPlot.OHLC[] ohlcs) -> void
~ScottPlot.Plottable.FinancePlot.FinancePlot(ScottPlot.OHLC[] ohlcs) -> void
~ScottPlot.Plottable.FinancePlot.GetBollingerBands(int N) -> (double[] xs, double[] sma, double[] lower, double[] upper)
~ScottPlot.Plottable.FinancePlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.FinancePlot.GetSMA(int N) -> (double[] xs, double[] ys)
~ScottPlot.Plottable.FinancePlot.Last() -> ScottPlot.OHLC
~ScottPlot.Plottable.FinancePlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.FunctionPlot.Function -> System.Func<double, double?>
~ScottPlot.Plottable.FunctionPlot.FunctionPlot(System.Func<double, double?> function) -> void
~ScottPlot.Plottable.FunctionPlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.FunctionPlot.Label.get -> string
~ScottPlot.Plottable.FunctionPlot.Label.set -> void
~ScottPlot.Plottable.FunctionPlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.Heatmap.BackgroundImage.get -> System.Drawing.Bitmap
~ScottPlot.Plottable.Heatmap.BackgroundImage.set -> void
~ScottPlot.Plottable.Heatmap.BmpHeatmap -> System.Drawing.Bitmap
~ScottPlot.Plottable.Heatmap.ClippingPoints.get -> ScottPlot.Coordinate[]
~ScottPlot.Plottable.Heatmap.ClippingPoints.set -> void
~ScottPlot.Plottable.Heatmap.Colormap.get -> ScottPlot.Drawing.Colormap
~ScottPlot.Plottable.Heatmap.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.Heatmap.Label.get -> string
~ScottPlot.Plottable.Heatmap.Label.set -> void
~ScottPlot.Plottable.Heatmap.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.Heatmap.Update(double?[,] intensities, ScottPlot.Drawing.Colormap colormap = null, double? min = null, double? max = null, double?[,] opacity = null) -> void
~ScottPlot.Plottable.Heatmap.Update(double[,] intensities, ScottPlot.Drawing.Colormap colormap = null, double? min = null, double? max = null, double[,] opacity = null) -> void
~ScottPlot.Plottable.Heatmap.Update(System.Drawing.Color color, double?[,] opacity) -> void
~ScottPlot.Plottable.HLineVector.Ys.get -> double[]
~ScottPlot.Plottable.HLineVector.Ys.set -> void
~ScottPlot.Plottable.IDraggable.DragSnap.get -> ScottPlot.SnapLogic.ISnap2D
~ScottPlot.Plottable.IDraggable.DragSnap.set -> void
~ScottPlot.Plottable.IHasColormap.Colormap.get -> ScottPlot.Drawing.Colormap
~ScottPlot.Plottable.Image.Bitmap.get -> System.Drawing.Image
~ScottPlot.Plottable.Image.Bitmap.set -> void
~ScottPlot.Plottable.Image.ClippingPoints.get -> ScottPlot.Coordinate[]
~ScottPlot.Plottable.Image.ClippingPoints.set -> void
~ScottPlot.Plottable.Image.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.Image.Label.get -> string
~ScottPlot.Plottable.Image.Label.set -> void
~ScottPlot.Plottable.Image.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.IPlottable.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.IPlottable.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.LegendItem.label.get -> string
~ScottPlot.Plottable.LegendItem.label.set -> void
~ScottPlot.Plottable.LegendItem.LegendItem(ScottPlot.Plottable.IPlottable parent) -> void
~ScottPlot.Plottable.LegendItem.Render(System.Drawing.Graphics gfx, float x, float y, float labelWidth, float labelHeight, System.Drawing.Font labelFont, float symbolWidth, float symbolPad, System.Drawing.Pen outlinePen, System.Drawing.SolidBrush textBrush, System.Drawing.Brush legendItemHideBrush) -> void
~ScottPlot.Plottable.LollipopPlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.LollipopPlot.Label.get -> string
~ScottPlot.Plottable.LollipopPlot.Label.set -> void
~ScottPlot.Plottable.LollipopPlot.LollipopPlot(double[] positions, double[] values) -> void
~ScottPlot.Plottable.LollipopPlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.MarkerPlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.MarkerPlot.Label.get -> string
~ScottPlot.Plottable.MarkerPlot.Label.set -> void
~ScottPlot.Plottable.MarkerPlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.MarkerPlot.Text.get -> string
~ScottPlot.Plottable.MarkerPlot.Text.set -> void
~ScottPlot.Plottable.MarkerPlot.TextFont -> ScottPlot.Drawing.Font
~ScottPlot.Plottable.PiePlot.DonutLabel.get -> string
~ScottPlot.Plottable.PiePlot.DonutLabel.set -> void
~ScottPlot.Plottable.PiePlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.PiePlot.HatchOptions.get -> ScottPlot.HatchOptions[]
~ScottPlot.Plottable.PiePlot.HatchOptions.set -> void
~ScottPlot.Plottable.PiePlot.Label.get -> string
~ScottPlot.Plottable.PiePlot.Label.set -> void
~ScottPlot.Plottable.PiePlot.PiePlot(double[] values, string[] groupNames, System.Drawing.Color[] colors) -> void
~ScottPlot.Plottable.PiePlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.PiePlot.SliceFillColors.get -> System.Drawing.Color[]
~ScottPlot.Plottable.PiePlot.SliceFillColors.set -> void
~ScottPlot.Plottable.PiePlot.SliceLabelColors.get -> System.Drawing.Color[]
~ScottPlot.Plottable.PiePlot.SliceLabelColors.set -> void
~ScottPlot.Plottable.PiePlot.SliceLabels.get -> string[]
~ScottPlot.Plottable.PiePlot.SliceLabels.set -> void
~ScottPlot.Plottable.PiePlot.Values.get -> double[]
~ScottPlot.Plottable.PiePlot.Values.set -> void
~ScottPlot.Plottable.Polygon.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.Polygon.Label.get -> string
~ScottPlot.Plottable.Polygon.Label.set -> void
~ScottPlot.Plottable.Polygon.Polygon(double[] xs, double[] ys) -> void
~ScottPlot.Plottable.Polygon.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.Polygon.Xs.get -> double[]
~ScottPlot.Plottable.Polygon.Xs.set -> void
~ScottPlot.Plottable.Polygon.Ys.get -> double[]
~ScottPlot.Plottable.Polygon.Ys.set -> void
~ScottPlot.Plottable.Polygons.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.Polygons.Label.get -> string
~ScottPlot.Plottable.Polygons.Label.set -> void
~ScottPlot.Plottable.Polygons.Polygons(System.Collections.Generic.List<System.Collections.Generic.List<(double x, double y)>> polys) -> void
~ScottPlot.Plottable.Polygons.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.PopulationPlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.PopulationPlot.PopulationPlot(ScottPlot.Statistics.Population population, string label = null, System.Drawing.Color? color = null) -> void
~ScottPlot.Plottable.PopulationPlot.PopulationPlot(ScottPlot.Statistics.PopulationMultiSeries groupedSeries) -> void
~ScottPlot.Plottable.PopulationPlot.PopulationPlot(ScottPlot.Statistics.PopulationSeries populationSeries) -> void
~ScottPlot.Plottable.PopulationPlot.PopulationPlot(ScottPlot.Statistics.Population[] populations, string label = null, System.Drawing.Color? color = null) -> void
~ScottPlot.Plottable.PopulationPlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.PopulationPlot.SeriesLabels.get -> string[]
~ScottPlot.Plottable.RadarPlot.CategoryImages.get -> System.Drawing.Image[]
~ScottPlot.Plottable.RadarPlot.CategoryImages.set -> void
~ScottPlot.Plottable.RadarPlot.CategoryLabels.get -> string[]
~ScottPlot.Plottable.RadarPlot.CategoryLabels.set -> void
~ScottPlot.Plottable.RadarPlot.FillColors.get -> System.Drawing.Color[]
~ScottPlot.Plottable.RadarPlot.FillColors.set -> void
~ScottPlot.Plottable.RadarPlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.RadarPlot.GroupLabels.get -> string[]
~ScottPlot.Plottable.RadarPlot.GroupLabels.set -> void
~ScottPlot.Plottable.RadarPlot.HatchOptions.get -> ScottPlot.HatchOptions[]
~ScottPlot.Plottable.RadarPlot.HatchOptions.set -> void
~ScottPlot.Plottable.RadarPlot.LineColors.get -> System.Drawing.Color[]
~ScottPlot.Plottable.RadarPlot.LineColors.set -> void
~ScottPlot.Plottable.RadarPlot.RadarPlot(double[,] values, System.Drawing.Color[] lineColors, System.Drawing.Color[] fillColors, bool independentAxes, double[] maxValues = null) -> void
~ScottPlot.Plottable.RadarPlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.RadarPlot.Update(double[,] values, bool independentAxes = false, double[] maxValues = null) -> void
~ScottPlot.Plottable.RadialGaugePlot.Colors.get -> System.Drawing.Color[]
~ScottPlot.Plottable.RadialGaugePlot.Colors.set -> void
~ScottPlot.Plottable.RadialGaugePlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.RadialGaugePlot.Labels.get -> string[]
~ScottPlot.Plottable.RadialGaugePlot.Labels.set -> void
~ScottPlot.Plottable.RadialGaugePlot.Levels.get -> double[]
~ScottPlot.Plottable.RadialGaugePlot.LevelTextFormat.get -> string
~ScottPlot.Plottable.RadialGaugePlot.LevelTextFormat.set -> void
~ScottPlot.Plottable.RadialGaugePlot.RadialGaugePlot(double[] levels, System.Drawing.Color[] colors) -> void
~ScottPlot.Plottable.RadialGaugePlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.RadialGaugePlot.Update(double[] levels, System.Drawing.Color[] colors = null) -> void
~ScottPlot.Plottable.RepeatingAxisLine.DragSnap.get -> ScottPlot.SnapLogic.ISnap2D
~ScottPlot.Plottable.RepeatingAxisLine.DragSnap.set -> void
~ScottPlot.Plottable.RepeatingAxisLine.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.RepeatingAxisLine.Label.get -> string
~ScottPlot.Plottable.RepeatingAxisLine.Label.set -> void
~ScottPlot.Plottable.RepeatingAxisLine.PositionFormatter.get -> System.Func<double, string>
~ScottPlot.Plottable.RepeatingAxisLine.PositionFormatter.set -> void
~ScottPlot.Plottable.RepeatingAxisLine.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.RepeatingAxisLine.RenderLine(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality) -> void
~ScottPlot.Plottable.ScaleBar.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.ScaleBar.HorizontalLabel.get -> string
~ScottPlot.Plottable.ScaleBar.HorizontalLabel.set -> void
~ScottPlot.Plottable.ScaleBar.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.ScaleBar.VerticalLabel.get -> string
~ScottPlot.Plottable.ScaleBar.VerticalLabel.set -> void
~ScottPlot.Plottable.ScatterPlot.DataPointLabelFont.get -> ScottPlot.Drawing.Font
~ScottPlot.Plottable.ScatterPlot.DataPointLabelFont.set -> void
~ScottPlot.Plottable.ScatterPlot.DataPointLabels.get -> string[]
~ScottPlot.Plottable.ScatterPlot.DataPointLabels.set -> void
~ScottPlot.Plottable.ScatterPlot.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.ScatterPlot.Label.get -> string
~ScottPlot.Plottable.ScatterPlot.Label.set -> void
~ScottPlot.Plottable.ScatterPlot.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.ScatterPlot.ScatterPlot(double[] xs, double[] ys, double[] errorX = null, double[] errorY = null) -> void
~ScottPlot.Plottable.ScatterPlot.Update(double[] xs, double[] ys) -> void
~ScottPlot.Plottable.ScatterPlot.UpdateX(double[] xs) -> void
~ScottPlot.Plottable.ScatterPlot.UpdateY(double[] ys) -> void
~ScottPlot.Plottable.ScatterPlot.XError.get -> double[]
~ScottPlot.Plottable.ScatterPlot.XError.set -> void
~ScottPlot.Plottable.ScatterPlot.Xs.get -> double[]
~ScottPlot.Plottable.ScatterPlot.YError.get -> double[]
~ScottPlot.Plottable.ScatterPlot.YError.set -> void
~ScottPlot.Plottable.ScatterPlot.Ys.get -> double[]
~ScottPlot.Plottable.ScatterPlotDraggable.DragSnap.get -> ScottPlot.SnapLogic.ISnap2D
~ScottPlot.Plottable.ScatterPlotDraggable.DragSnap.set -> void
~ScottPlot.Plottable.ScatterPlotDraggable.ScatterPlotDraggable(double[] xs, double[] ys, double[] errorX = null, double[] errorY = null) -> void
~ScottPlot.Plottable.ScatterPlotDraggable.Xs.get -> double[]
~ScottPlot.Plottable.ScatterPlotDraggable.Ys.get -> double[]
~ScottPlot.Plottable.ScatterPlotHighlight.isHighlighted.get -> bool[]
~ScottPlot.Plottable.ScatterPlotHighlight.isHighlighted.set -> void
~ScottPlot.Plottable.ScatterPlotHighlight.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.ScatterPlotHighlight.ScatterPlotHighlight(double[] xs, double[] ys, double[] xErr = null, double[] yErr = null) -> void
~ScottPlot.Plottable.ScatterPlotList<T>.AddRange(T[] xs, T[] ys) -> void
~ScottPlot.Plottable.ScatterPlotList<T>.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.ScatterPlotList<T>.Label.get -> string
~ScottPlot.Plottable.ScatterPlotList<T>.Label.set -> void
~ScottPlot.Plottable.ScatterPlotList<T>.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.ScatterPlotListDraggable.DragSnap.get -> ScottPlot.SnapLogic.ISnap2D
~ScottPlot.Plottable.ScatterPlotListDraggable.DragSnap.set -> void
~ScottPlot.Plottable.ScatterPlotListDraggable.MovePointFunc.get -> System.Func<System.Collections.Generic.List<double>, System.Collections.Generic.List<double>, int, ScottPlot.Coordinate, ScottPlot.Coordinate>
~ScottPlot.Plottable.ScatterPlotListDraggable.MovePointFunc.set -> void
~ScottPlot.Plottable.SignalPlotBase<T>
~ScottPlot.Plottable.SignalPlotBase<T>.DensityColors.set -> void
~ScottPlot.Plottable.SignalPlotBase<T>.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.SignalPlotBase<T>.Label.get -> string
~ScottPlot.Plottable.SignalPlotBase<T>.Label.set -> void
~ScottPlot.Plottable.SignalPlotBase<T>.Strategy -> ScottPlot.MinMaxSearchStrategies.IMinMaxSearchStrategy<T>
~ScottPlot.Plottable.SignalPlotBase<T>.Update(int firstIndex, int lastIndex, T[] newData, int fromData = 0) -> void
~ScottPlot.Plottable.SignalPlotBase<T>.Update(int firstIndex, T[] newData) -> void
~ScottPlot.Plottable.SignalPlotBase<T>.Update(T[] newData) -> void
~ScottPlot.Plottable.SignalPlotBase<T>.ValidatePoints(System.Drawing.PointF[] points) -> void
~ScottPlot.Plottable.SignalPlotBase<T>._Ys -> T[]
~ScottPlot.Plottable.SignalPlotConst<T>
~ScottPlot.Plottable.SignalPlotGeneric<T>
~ScottPlot.Plottable.SignalPlotXYConst<TX, TY>
~ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>
~ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>.ProcessInterval(int x, int from, int length, ScottPlot.PlotDimensions dims) -> System.Collections.Generic.IEnumerable<System.Drawing.PointF>
~ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>.Xs.get -> TX[]
~ScottPlot.Plottable.SignalPlotXYGeneric<TX, TY>.Xs.set -> void
~ScottPlot.Plottable.Text.DragSnap.get -> ScottPlot.SnapLogic.ISnap2D
~ScottPlot.Plottable.Text.DragSnap.set -> void
~ScottPlot.Plottable.Text.Font -> ScottPlot.Drawing.Font
~ScottPlot.Plottable.Text.FontName.get -> string
~ScottPlot.Plottable.Text.FontName.set -> void
~ScottPlot.Plottable.Text.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.Text.Label -> string
~ScottPlot.Plottable.Text.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.Tooltip.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.Tooltip.Label.get -> string
~ScottPlot.Plottable.Tooltip.Label.set -> void
~ScottPlot.Plottable.Tooltip.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.VectorField.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.VectorField.Label.get -> string
~ScottPlot.Plottable.VectorField.Label.set -> void
~ScottPlot.Plottable.VectorField.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.VectorField.VectorField(ScottPlot.Statistics.Vector2[,] vectors, double[] xs, double[] ys, ScottPlot.Drawing.Colormap colormap, double scaleFactor, System.Drawing.Color defaultColor) -> void
~ScottPlot.Plottable.VectorFieldList.Colormap.get -> ScottPlot.Drawing.Colormap
~ScottPlot.Plottable.VectorFieldList.Colormap.set -> void
~ScottPlot.Plottable.VectorFieldList.ColormapScaler -> System.Func<double, double>
~ScottPlot.Plottable.VectorFieldList.GetLegendItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Plottable.VectorFieldList.Label.get -> string
~ScottPlot.Plottable.VectorFieldList.Label.set -> void
~ScottPlot.Plottable.VectorFieldList.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Plottable.VectorFieldList.VectorFieldList(System.Collections.Generic.List<(ScottPlot.Coordinate coordinate, ScottPlot.CoordinateVector vector)> rootedVectors) -> void
~ScottPlot.Plottable.VLineVector.Xs.get -> double[]
~ScottPlot.Plottable.VLineVector.Xs.set -> void
~ScottPlot.Renderable.AdditionalBottomAxis.AdditionalBottomAxis(int xAxisIndex, string title) -> void
~ScottPlot.Renderable.AdditionalLeftAxis.AdditionalLeftAxis(int yAxisIndex, string title) -> void
~ScottPlot.Renderable.AdditionalRightAxis.AdditionalRightAxis(int yAxisIndex, string title) -> void
~ScottPlot.Renderable.AdditionalTopAxis.AdditionalTopAxis(int xAxisIndex, string title) -> void
~ScottPlot.Renderable.ArrowStyle.Render(ScottPlot.PlotDimensions dims, System.Drawing.Graphics gfx, double[] xs, double[] ys, ScottPlot.Statistics.Vector2[,] vectors, System.Drawing.Color[] colors) -> void
~ScottPlot.Renderable.ArrowStyle.RenderArrow(ScottPlot.PlotDimensions dims, System.Drawing.Graphics gfx, ScottPlot.Coordinate pt, ScottPlot.CoordinateVector vec, System.Drawing.Color color) -> void
~ScottPlot.Renderable.Axis.AutomaticTickPositions(double[] additionalTickPositions, string[] additionalTickLabels) -> void
~ScottPlot.Renderable.Axis.CornerLabelFormat(string format) -> void
~ScottPlot.Renderable.Axis.GetSettings(bool showWarning = true) -> (ScottPlot.Renderable.AxisLabel, ScottPlot.Renderable.AxisTicks, ScottPlot.Renderable.AxisLine)
~ScottPlot.Renderable.Axis.GetTicks(double min = -Infinity, double max = Infinity) -> ScottPlot.Ticks.Tick[]
~ScottPlot.Renderable.Axis.ImageLabel(System.Drawing.Bitmap img, float padInside = 5, float padOutside = 5) -> void
~ScottPlot.Renderable.Axis.Label(string label = null, System.Drawing.Color? color = null, float? size = null, bool? bold = null, string fontName = null) -> string
~ScottPlot.Renderable.Axis.LabelStyle(System.Drawing.Color? color = null, string fontName = null, float? fontSize = null, float? rotation = null) -> void
~ScottPlot.Renderable.Axis.ManualTickPositions(double[] positions, string[] labels) -> void
~ScottPlot.Renderable.Axis.RecalculateTickPositions(ScottPlot.PlotDimensions dims) -> void
~ScottPlot.Renderable.Axis.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Renderable.Axis.SetCulture(string shortDatePattern = null, string decimalSeparator = null, string numberGroupSeparator = null, int? decimalDigits = null, int? numberNegativePattern = null, int[] numberGroupSizes = null) -> void
~ScottPlot.Renderable.Axis.SetCulture(System.Globalization.CultureInfo culture) -> void
~ScottPlot.Renderable.Axis.TickLabelFormat(string format, bool dateTimeFormat) -> void
~ScottPlot.Renderable.Axis.TickLabelFormat(System.Func<double, string> tickFormatter) -> void
~ScottPlot.Renderable.Axis.TickLabelNotation(bool? multiplier = null, bool? offset = null, bool? exponential = null, bool? invertSign = null, int? radix = null, string prefix = null) -> void
~ScottPlot.Renderable.Axis.TickLabelStyle(System.Drawing.Color? color = null, string fontName = null, float? fontSize = null, bool? fontBold = null, float? rotation = null) -> void
~ScottPlot.Renderable.AxisLabel.Font -> ScottPlot.Drawing.Font
~ScottPlot.Renderable.AxisLabel.ImageLabel -> System.Drawing.Bitmap
~ScottPlot.Renderable.AxisLabel.Label -> string
~ScottPlot.Renderable.AxisLabel.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Renderable.AxisLine.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Renderable.AxisTicks.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Renderable.AxisTicks.TickLabelFont -> ScottPlot.Drawing.Font
~ScottPlot.Renderable.BenchmarkMessage.GetRenderTimes() -> double[]
~ScottPlot.Renderable.BenchmarkMessage.Message.get -> string
~ScottPlot.Renderable.DataBackground.Bitmap.get -> System.Drawing.Bitmap
~ScottPlot.Renderable.DataBackground.Bitmap.set -> void
~ScottPlot.Renderable.DataBackground.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Renderable.FigureBackground.Bitmap.get -> System.Drawing.Bitmap
~ScottPlot.Renderable.FigureBackground.Bitmap.set -> void
~ScottPlot.Renderable.FigureBackground.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Renderable.IRenderable.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Renderable.Legend.Font.get -> ScottPlot.Drawing.Font
~ScottPlot.Renderable.Legend.FontName.set -> void
~ScottPlot.Renderable.Legend.GetBitmap(bool lowQuality = false, double scale = 1) -> System.Drawing.Bitmap
~ScottPlot.Renderable.Legend.GetItems() -> ScottPlot.Plottable.LegendItem[]
~ScottPlot.Renderable.Legend.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Renderable.Legend.UpdateLegendItems(ScottPlot.Plot plot, bool includeHidden = false) -> void
~ScottPlot.Renderable.Message.FontName -> string
~ScottPlot.Renderable.Message.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Renderable.Message.Text -> string
~ScottPlot.Renderable.ZoomRectangle.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.Settings.Axes -> System.Collections.Generic.List<ScottPlot.Renderable.Axis>
~ScottPlot.Settings.GetPlotDimensions(int xAxisIndex, int yAxisIndex, double scaleFactor) -> ScottPlot.PlotDimensions
~ScottPlot.Settings.GetXAxis(int xAxisIndex) -> ScottPlot.Renderable.Axis
~ScottPlot.Settings.GetYAxis(int yAxisIndex) -> ScottPlot.Renderable.Axis
~ScottPlot.Settings.HorizontalAxes.get -> ScottPlot.Renderable.Axis[]
~ScottPlot.Settings.PlottablePalette -> ScottPlot.IPalette
~ScottPlot.Settings.VerticalAxes.get -> ScottPlot.Renderable.Axis[]
~ScottPlot.Settings.XAxis.get -> ScottPlot.Renderable.Axis
~ScottPlot.Settings.XAxis2.get -> ScottPlot.Renderable.Axis
~ScottPlot.Settings.YAxis.get -> ScottPlot.Renderable.Axis
~ScottPlot.Settings.YAxis2.get -> ScottPlot.Renderable.Axis
~ScottPlot.SnapLogic.Custom1D.Custom1D(System.Func<double, double> snapFunction) -> void
~ScottPlot.SnapLogic.Independent2D.Independent2D(ScottPlot.SnapLogic.ISnap1D x, ScottPlot.SnapLogic.ISnap1D y) -> void
~ScottPlot.SnapLogic.Independent2D.SnapX.get -> ScottPlot.SnapLogic.ISnap1D
~ScottPlot.SnapLogic.Independent2D.SnapX.set -> void
~ScottPlot.SnapLogic.Independent2D.SnapY.get -> ScottPlot.SnapLogic.ISnap1D
~ScottPlot.SnapLogic.Independent2D.SnapY.set -> void
~ScottPlot.SnapLogic.Nearest1D.Nearest1D(double[] positions) -> void
~ScottPlot.SnapLogic.Nearest2D.Nearest2D(double[] xs, double[] ys) -> void
~ScottPlot.SnapLogic.Nearest2D.Nearest2D(ScottPlot.Coordinate[] coordinates) -> void
~ScottPlot.StarAxis.CategoryImages -> System.Drawing.Image[]
~ScottPlot.StarAxis.CategoryLabels -> string[]
~ScottPlot.StarAxis.Font -> ScottPlot.Drawing.Font
~ScottPlot.StarAxis.Graphics.get -> System.Drawing.Graphics
~ScottPlot.StarAxis.Graphics.set -> void
~ScottPlot.StarAxis.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~ScottPlot.StarAxis.Ticks.get -> ScottPlot.StarAxisTick[]
~ScottPlot.StarAxis.Ticks.set -> void
~ScottPlot.StarAxisTick.StarAxisTick(double location, double[] labels) -> void
~ScottPlot.Statistics.BasicStats.BasicStats(double[] values) -> void
~ScottPlot.Statistics.Histogram.Histogram(double[] values, double? min = null, double? max = null, double? binSize = null, double? binCount = null, bool ignoreOutOfBounds = true) -> void
~ScottPlot.Statistics.Interpolation.EndSlopeSpline.EndSlopeSpline(double[] xs, double[] ys, int resolution = 10, double firstSlopeDegrees = 0, double lastSlopeDegrees = 0) -> void
~ScottPlot.Statistics.Interpolation.Matrix.a -> double[,]
~ScottPlot.Statistics.Interpolation.Matrix.x -> double[]
~ScottPlot.Statistics.Interpolation.Matrix.y -> double[]
~ScottPlot.Statistics.Interpolation.MatrixSolver.MatrixSolver(int size, ScottPlot.Statistics.Interpolation.Matrix mi) -> void
~ScottPlot.Statistics.Interpolation.NaturalSpline.NaturalSpline(double[] xs, double[] ys, int resolution = 10) -> void
~ScottPlot.Statistics.Interpolation.PeriodicSpline.PeriodicSpline(double[] xs, double[] ys, int resolution = 10) -> void
~ScottPlot.Statistics.Interpolation.SplineInterpolator.a -> double[]
~ScottPlot.Statistics.Interpolation.SplineInterpolator.b -> double[]
~ScottPlot.Statistics.Interpolation.SplineInterpolator.c -> double[]
~ScottPlot.Statistics.Interpolation.SplineInterpolator.d -> double[]
~ScottPlot.Statistics.Interpolation.SplineInterpolator.gauss -> ScottPlot.Statistics.Interpolation.MatrixSolver
~ScottPlot.Statistics.Interpolation.SplineInterpolator.givenXs -> double[]
~ScottPlot.Statistics.Interpolation.SplineInterpolator.givenYs -> double[]
~ScottPlot.Statistics.Interpolation.SplineInterpolator.h -> double[]
~ScottPlot.Statistics.Interpolation.SplineInterpolator.interpolatedXs -> double[]
~ScottPlot.Statistics.Interpolation.SplineInterpolator.interpolatedYs -> double[]
~ScottPlot.Statistics.Interpolation.SplineInterpolator.m -> ScottPlot.Statistics.Interpolation.Matrix
~ScottPlot.Statistics.Interpolation.SplineInterpolator.SplineInterpolator(double[] xs, double[] ys, int resolution = 10) -> void
~ScottPlot.Statistics.LinearRegressionLine.GetResiduals() -> double[]
~ScottPlot.Statistics.LinearRegressionLine.GetValues() -> double[]
~ScottPlot.Statistics.LinearRegressionLine.LinearRegressionLine(double[] xs, double[] ys) -> void
~ScottPlot.Statistics.LinearRegressionLine.LinearRegressionLine(double[] ys, double firstX, double xSpacing) -> void
~ScottPlot.Statistics.Population.GetDistribution(double[] xs, bool normalize) -> double[]
~ScottPlot.Statistics.Population.highOutliers.get -> double[]
~ScottPlot.Statistics.Population.lowOutliers.get -> double[]
~ScottPlot.Statistics.Population.Population(double[] values) -> void
~ScottPlot.Statistics.Population.Population(double[] values, bool fullAnalysis = true) -> void
~ScottPlot.Statistics.Population.Population(System.Random rand, int pointCount, double mean = 0.5, double stdDev = 0.5) -> void
~ScottPlot.Statistics.Population.sortedValues.get -> double[]
~ScottPlot.Statistics.Population.values.get -> double[]
~ScottPlot.Statistics.PopulationMultiSeries.multiSeries -> ScottPlot.Statistics.PopulationSeries[]
~ScottPlot.Statistics.PopulationMultiSeries.PopulationMultiSeries(ScottPlot.Statistics.PopulationSeries[] multiSeries) -> void
~ScottPlot.Statistics.PopulationMultiSeries.seriesLabels.get -> string[]
~ScottPlot.Statistics.PopulationSeries.populations -> ScottPlot.Statistics.Population[]
~ScottPlot.Statistics.PopulationSeries.PopulationSeries(ScottPlot.Statistics.Population[] populations, string seriesLabel = null, System.Drawing.Color? color = null) -> void
~ScottPlot.Statistics.PopulationSeries.seriesLabel -> string
~ScottPlot.Styles.IStyle.AxisLabelFontName.get -> string
~ScottPlot.Styles.IStyle.TickLabelFontName.get -> string
~ScottPlot.Styles.IStyle.TitleFontName.get -> string
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickCentisecond.DateTimeTickCentisecond(System.Globalization.CultureInfo culture, int maxTickCount, int? manualSpacing) -> void
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickDay.DateTimeTickDay(System.Globalization.CultureInfo culture, int maxTickCount, int? manualSpacing) -> void
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickHour.DateTimeTickHour(System.Globalization.CultureInfo culture, int maxTickCount, int? manualSpacing) -> void
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickHundredYear.DateTimeTickHundredYear(System.Globalization.CultureInfo culture, int maxTickCount, int? manualSpacing) -> void
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMillisecond.DateTimeTickMillisecond(System.Globalization.CultureInfo culture, int maxTickCount, int? manualSpacing) -> void
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMinute.DateTimeTickMinute(System.Globalization.CultureInfo culture, int maxTickCount, int? manualSpacing) -> void
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickMonth.DateTimeTickMonth(System.Globalization.CultureInfo culture, int maxTickCount, int? manualSpacing) -> void
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickTenYear.DateTimeTickTenYear(System.Globalization.CultureInfo culture, int maxTickCount, int? manualSpacing) -> void
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickThousandYear.DateTimeTickThousandYear(System.Globalization.CultureInfo culture, int maxTickCount, int? manualSpacing) -> void
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickUnitBase.culture -> System.Globalization.CultureInfo
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickUnitBase.DateTimeTickUnitBase(System.Globalization.CultureInfo culture, int maxTickCount, int? manualSpacing) -> void
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickUnitBase.deltas -> int[]
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickUnitBase.GetTicks(System.DateTime from, System.DateTime to, int[] deltas, int maxTickCount) -> System.DateTime[]
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickUnitBase.GetTicksAndLabels(System.DateTime from, System.DateTime to, string format) -> (double[] Ticks, string[] Labels)
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickYear.DateTimeTickYear(System.Globalization.CultureInfo culture, int maxTickCount, int? manualSpacing) -> void
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeUnitFactory.Create(ScottPlot.Ticks.DateTimeUnit kind, System.Globalization.CultureInfo culture, int maxTickCount, int? manualSpacing) -> ScottPlot.Ticks.DateTimeTickUnits.IDateTimeUnit
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeUnitFactory.CreateBestUnit(System.DateTime from, System.DateTime to, System.Globalization.CultureInfo culture, int maxTickCount) -> ScottPlot.Ticks.DateTimeTickUnits.IDateTimeUnit
~ScottPlot.Ticks.DateTimeTickUnits.DateTimeUnitFactory.CreateUnit(System.DateTime from, System.DateTime to, System.Globalization.CultureInfo culture, int maxTickCount, ScottPlot.Ticks.DateTimeUnit? manualUnits, int? manualSpacing) -> ScottPlot.Ticks.DateTimeTickUnits.IDateTimeUnit
~ScottPlot.Ticks.DateTimeTickUnits.IDateTimeUnit.GetTicksAndLabels(System.DateTime from, System.DateTime to, string format) -> (double[] Ticks, string[] Labels)
~ScottPlot.Ticks.Tick.Tick(double position, string label, bool isMajor, bool isDateTime) -> void
~ScottPlot.Ticks.TickCollection.additionalTickLabels -> string[]
~ScottPlot.Ticks.TickCollection.additionalTickPositions -> double[]
~ScottPlot.Ticks.TickCollection.CornerLabel.get -> string
~ScottPlot.Ticks.TickCollection.CornerLabelFormat.get -> string
~ScottPlot.Ticks.TickCollection.CornerLabelFormat.set -> void
~ScottPlot.Ticks.TickCollection.Culture -> System.Globalization.CultureInfo
~ScottPlot.Ticks.TickCollection.dateTimeFormatString -> string
~ScottPlot.Ticks.TickCollection.GetPrettyTickLabels(double[] positions, bool useMultiplierNotation, bool useOffsetNotation, bool useExponentialNotation, bool invertSign, System.Globalization.CultureInfo culture) -> (string[], string)
~ScottPlot.Ticks.TickCollection.GetTicks(double min, double max) -> ScottPlot.Ticks.Tick[]
~ScottPlot.Ticks.TickCollection.GetVisibleMajorTicks(ScottPlot.PlotDimensions dims) -> ScottPlot.Ticks.Tick[]
~ScottPlot.Ticks.TickCollection.GetVisibleMinorTicks(ScottPlot.PlotDimensions dims) -> ScottPlot.Ticks.Tick[]
~ScottPlot.Ticks.TickCollection.GetVisibleTicks(ScottPlot.PlotDimensions dims) -> ScottPlot.Ticks.Tick[]
~ScottPlot.Ticks.TickCollection.ManualTickFormatter -> System.Func<double, string>
~ScottPlot.Ticks.TickCollection.manualTickLabels -> string[]
~ScottPlot.Ticks.TickCollection.manualTickPositions -> double[]
~ScottPlot.Ticks.TickCollection.MinorFromMajor(double[] majorTicks, double minorTicksPerMajorTick, double lowerLimit, double upperLimit) -> double[]
~ScottPlot.Ticks.TickCollection.MinorFromMajorLog(double[] majorTickPositions, double min, double max, int divisions) -> double[]
~ScottPlot.Ticks.TickCollection.numericFormatString -> string
~ScottPlot.Ticks.TickCollection.prefix -> string
~ScottPlot.Ticks.TickCollection.Recalculate(ScottPlot.PlotDimensions dims, ScottPlot.Drawing.Font tickFont) -> void
~ScottPlot.Ticks.TickCollection.SetCulture(string shortDatePattern = null, string decimalSeparator = null, string numberGroupSeparator = null, int? decimalDigits = null, int? numberNegativePattern = null, int[] numberGroupSizes = null) -> void
~ScottPlot.Ticks.TickCollection.tickLabels -> string[]
~ScottPlot.Ticks.TickCollection.tickPositionsMajor -> double[]
~ScottPlot.Ticks.TickCollection.tickPositionsMinor -> double[]
~static ScottPlot.Control.ControlBackEnd.GetHelpMessage() -> string
~static ScottPlot.CoordinateRect.BoundingBox(ScottPlot.Coordinate[] coordinates) -> ScottPlot.CoordinateRect
~static ScottPlot.DataGen.ActionPotential() -> double[]
~static ScottPlot.DataGen.BitmapFrom2dArray(double[,] data, ScottPlot.Drawing.Colormap cmap) -> System.Drawing.Bitmap
~static ScottPlot.DataGen.Consecutive(int pointCount, double spacing = 1, double offset = 0) -> double[]
~static ScottPlot.DataGen.Consecutive2D(int rows, int columns, double spacing = 1, double offset = 0) -> double[,]
~static ScottPlot.DataGen.Consecutive<T>(int pointCount, T spacing, T offset) -> T[]
~static ScottPlot.DataGen.Cos(double[] xs, double mult = 1) -> double[]
~static ScottPlot.DataGen.Cos(int pointCount, double oscillations = 1, double offset = 0, double mult = 1, double phase = 0) -> double[]
~static ScottPlot.DataGen.Full(int length, double fillValue) -> double[]
~static ScottPlot.DataGen.FullGeneric<T>(int length, T fillValue) -> T[]
~static ScottPlot.DataGen.InsertNanRanges(double[] values, System.Random rand, int stability = 10) -> double[]
~static ScottPlot.DataGen.NoisyBellCurve(System.Random rand, int count, double mult = 1, double noiseFraction = 0.1) -> double[]
~static ScottPlot.DataGen.NoisyLinear(System.Random rand, int pointCount = 100, double slope = 1, double offset = 0, double noise = 0.1) -> double[]
~static ScottPlot.DataGen.NoisySin(System.Random rand, int pointCount, double oscillations = 1, double noiseLevel = 0.5, double mult = 1) -> double[]
~static ScottPlot.DataGen.Ones(int pointCount) -> double[]
~static ScottPlot.DataGen.Ramp2D(int width, int height, double min = 0, double max = 1) -> double[,]
~static ScottPlot.DataGen.Random(System.Random rand, int pointCount, double multiplier = 1, double offset = 0) -> double[]
~static ScottPlot.DataGen.Random2D(System.Random rand, int rows, int columns, double multiplier = 1, double offset = 0) -> double[,]
~static ScottPlot.DataGen.Random<T>(System.Random rand, int pointCount, T multiplier, T offset) -> T[]
~static ScottPlot.DataGen.RandomColor(System.Random rand, int min = 0, int max = 255) -> System.Drawing.Color
~static ScottPlot.DataGen.RandomInts(System.Random rand, int pointCount, double multiplier = 1, double offset = 0) -> int[]
~static ScottPlot.DataGen.RandomNormal(int seed, int pointCount, double mean = 0.5, double stdDev = 0.5, double maxSdMultiple = 10) -> double[]
~static ScottPlot.DataGen.RandomNormal(System.Random rand, int pointCount, double mean = 0.5, double stdDev = 0.5, double maxSdMultiple = 10) -> double[]
~static ScottPlot.DataGen.RandomNormalValue(System.Random rand, double mean, double stdDev, double maxSdMultiple = 10) -> double
~static ScottPlot.DataGen.RandomSpan(System.Random rand = null, double low = 0, double high = 100, double minimumSpacing = 10) -> (double, double)
~static ScottPlot.DataGen.RandomStockPrices(System.Random rand, int pointCount, double mult = 10, double startingPrice = 123.45, int deltaMinutes = 0, int deltaDays = 1, bool sequential = true) -> ScottPlot.OHLC[]
~static ScottPlot.DataGen.RandomStockPrices(System.Random rand, int pointCount, System.TimeSpan delta, double mult = 10, double startingPrice = 123.45) -> ScottPlot.OHLC[]
~static ScottPlot.DataGen.RandomWalk(int pointCount, double mult = 1, double offset = 0) -> double[]
~static ScottPlot.DataGen.RandomWalk(System.Random rand, int pointCount, double mult = 1, double offset = 0) -> double[]
~static ScottPlot.DataGen.RandomWalk2D(System.Random rand, int pointCount) -> (double[] xs, double[] ys)
~static ScottPlot.DataGen.RandomWalk<T>(System.Random rand, int pointCount, T mult, T offset) -> T[]
~static ScottPlot.DataGen.Range(double start, double stop, double step, bool includeStop = false) -> double[]
~static ScottPlot.DataGen.Range(int start, int stop) -> double[]
~static ScottPlot.DataGen.Range(int stop) -> double[]
~static ScottPlot.DataGen.SampleImage() -> System.Drawing.Bitmap
~static ScottPlot.DataGen.SampleImageData() -> double[,]
~static ScottPlot.DataGen.SampleImageDataNullable() -> double?[,]
~static ScottPlot.DataGen.Sin(double[] xs, double mult = 1) -> double[]
~static ScottPlot.DataGen.Sin(int pointCount, double oscillations = 1, double offset = 0, double mult = 1, double phase = 0) -> double[]
~static ScottPlot.DataGen.Sin2D(int width, int height, double xPeriod = 0.2, double yPeriod = 0.2, double multiple = 100) -> double[,]
~static ScottPlot.DataGen.SinSweep(int pointCount, double density = 50) -> double[]
~static ScottPlot.DataGen.Tan(double[] xs, double mult = 1) -> double[]
~static ScottPlot.DataGen.Zeros(int pointCount) -> double[]
~static ScottPlot.Drawing.Colormap.Algae.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Amp.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Balance.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Blues.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Colorbar(ScottPlot.Drawing.Colormap cmap, int width, int height, bool vertical = false, double min = 0, double max = 1) -> System.Drawing.Bitmap
~static ScottPlot.Drawing.Colormap.Curl.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Deep.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Delta.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Dense.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Diff.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.GetColormapByName(string name, bool throwIfNotFound = true) -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.GetColormapNames() -> string[]
~static ScottPlot.Drawing.Colormap.GetColormaps() -> ScottPlot.Drawing.Colormap[]
~static ScottPlot.Drawing.Colormap.GetColors(double[] intensities, ScottPlot.Drawing.Colormap colorMap) -> System.Drawing.Color[]
~static ScottPlot.Drawing.Colormap.GetRGBAs(double?[] intensities, double?[] opacity, ScottPlot.Drawing.Colormap colorMap) -> int[]
~static ScottPlot.Drawing.Colormap.GetRGBAs(double?[] intensities, ScottPlot.Drawing.Colormap colorMap, double minimumIntensity = 0) -> int[]
~static ScottPlot.Drawing.Colormap.GetRGBAs(double?[] opacity, System.Drawing.Color color) -> int[]
~static ScottPlot.Drawing.Colormap.GetRGBAs(double[] intensities, double[] opacity, ScottPlot.Drawing.Colormap colorMap) -> int[]
~static ScottPlot.Drawing.Colormap.GetRGBAs(double[] intensities, ScottPlot.Drawing.Colormap colorMap, double minimumIntensity = 0) -> int[]
~static ScottPlot.Drawing.Colormap.GetRGBAs(double[] opacity, System.Drawing.Color color) -> int[]
~static ScottPlot.Drawing.Colormap.Grayscale.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.GrayscaleR.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Greens.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Haline.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Ice.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Inferno.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.IntenstitiesToRGB(double[] intensities, ScottPlot.Drawing.IColormap cmap) -> byte[,]
~static ScottPlot.Drawing.Colormap.Jet.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Magma.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Matter.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Oxy.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Phase.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Plasma.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Rain.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Solar.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Speed.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Tarn.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Tempo.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Thermal.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Topo.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Turbid.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Turbo.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.Colormap.Viridis.get -> ScottPlot.Drawing.Colormap
~static ScottPlot.Drawing.GDI.Brush(System.Drawing.Color color, double alpha) -> System.Drawing.Brush
~static ScottPlot.Drawing.GDI.Brush(System.Drawing.Color color, System.Drawing.Color? hatchColor = null, ScottPlot.Drawing.HatchStyle hatchStyle = ScottPlot.Drawing.HatchStyle.None) -> System.Drawing.Brush
~static ScottPlot.Drawing.GDI.ClipIntersection(System.Drawing.Graphics gfx, ScottPlot.PlotDimensions dims, ScottPlot.Coordinate[] coordinates) -> void
~static ScottPlot.Drawing.GDI.DrawLabel(System.Drawing.Graphics gfx, string text, float x, float y, string fontName, float fontSize, bool bold, ScottPlot.HorizontalAlignment h, ScottPlot.VerticalAlignment v, System.Drawing.Color fontColor, System.Drawing.Color fillColor) -> void
~static ScottPlot.Drawing.GDI.FillToInfinity(ScottPlot.PlotDimensions dims, System.Drawing.Graphics gfx, float pxLeft, float pxRight, System.Drawing.PointF[] points, bool fillAbove, System.Drawing.Color color1, System.Drawing.Color color2) -> void
~static ScottPlot.Drawing.GDI.Font(ScottPlot.Drawing.Font font) -> System.Drawing.Font
~static ScottPlot.Drawing.GDI.Font(string fontName = null, float fontSize = 12, bool bold = false, System.Drawing.FontFamily fontFamily = null) -> System.Drawing.Font
~static ScottPlot.Drawing.GDI.Graphics(System.Drawing.Bitmap bmp, bool lowQuality = false, double scale = 1) -> System.Drawing.Graphics
~static ScottPlot.Drawing.GDI.Graphics(System.Drawing.Bitmap bmp, ScottPlot.PlotDimensions dims, bool lowQuality = false, bool clipToDataArea = true) -> System.Drawing.Graphics
~static ScottPlot.Drawing.GDI.HatchBrush(ScottPlot.Drawing.HatchStyle pattern, System.Drawing.Color fillColor, System.Drawing.Color hatchColor) -> System.Drawing.Brush
~static ScottPlot.Drawing.GDI.MeasureString(System.Drawing.Graphics gfx, string text, ScottPlot.Drawing.Font font) -> System.Drawing.SizeF
~static ScottPlot.Drawing.GDI.MeasureString(System.Drawing.Graphics gfx, string text, string fontName, double fontSize, bool bold = false, System.Drawing.FontFamily fontFamily = null) -> System.Drawing.SizeF
~static ScottPlot.Drawing.GDI.MeasureString(System.Drawing.Graphics gfx, string text, System.Drawing.Font font) -> System.Drawing.SizeF
~static ScottPlot.Drawing.GDI.MeasureStringUsingTemporaryGraphics(string text, ScottPlot.Drawing.Font font) -> System.Drawing.SizeF
~static ScottPlot.Drawing.GDI.Mix(string hexA, string hexB, double fracA) -> System.Drawing.Color
~static ScottPlot.Drawing.GDI.Pen(System.Drawing.Color color, double width = 1, ScottPlot.LineStyle lineStyle = ScottPlot.LineStyle.Solid, bool rounded = false) -> System.Drawing.Pen
~static ScottPlot.Drawing.GDI.ResetTransformPreservingScale(System.Drawing.Graphics gfx, ScottPlot.PlotDimensions dims) -> void
~static ScottPlot.Drawing.GDI.Resize(System.Drawing.Image bmp, int width, int height) -> System.Drawing.Bitmap
~static ScottPlot.Drawing.GDI.Semitransparent(string htmlColor, double alpha) -> System.Drawing.Color
~static ScottPlot.Drawing.GDI.StringFormat(ScottPlot.Alignment algnment) -> System.Drawing.StringFormat
~static ScottPlot.Drawing.GDI.StringFormat(ScottPlot.HorizontalAlignment h = ScottPlot.HorizontalAlignment.Left, ScottPlot.VerticalAlignment v = ScottPlot.VerticalAlignment.Lower) -> System.Drawing.StringFormat
~static ScottPlot.Drawing.GDI.TranslateString(System.Drawing.Graphics gfx, string text, ScottPlot.Drawing.Font font) -> (float dX, float dY)
~static ScottPlot.Drawing.InstalledFont.Default() -> string
~static ScottPlot.Drawing.InstalledFont.Monospace() -> string
~static ScottPlot.Drawing.InstalledFont.Names() -> string[]
~static ScottPlot.Drawing.InstalledFont.Sans() -> string
~static ScottPlot.Drawing.InstalledFont.Serif() -> string
~static ScottPlot.Drawing.InstalledFont.ValidFontFamily(string fontName) -> System.Drawing.FontFamily
~static ScottPlot.Drawing.InstalledFont.ValidFontFamily(string[] fontNames) -> System.Drawing.FontFamily
~static ScottPlot.Drawing.InstalledFont.ValidFontName(string fontName) -> string
~static ScottPlot.Drawing.InstalledFont.ValidFontName(string[] fontNames) -> string
~static ScottPlot.Drawing.Palette.Amber.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.Aurora.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.Category10.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.Category20.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.ColorblindFriendly.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.Dark.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.DarkPastel.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.Frost.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.Microcharts.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.Nero.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.Nord.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.OneHalf.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.OneHalfDark.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.PolarNight.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.Redness.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.SnowStorm.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Palette.Tsitsulin.get -> ScottPlot.IPalette
~static ScottPlot.Drawing.Tools.PolyAboveAndBelow(double[] xs, double[] ys, double baseline) -> (double[] xs, double[] ysAbove, double[] ysBelow)
~static ScottPlot.Marker.Create(ScottPlot.MarkerShape shape) -> ScottPlot.IMarker
~static ScottPlot.Marker.GetMarkers() -> ScottPlot.MarkerShape[]
~static ScottPlot.Marker.Random(System.Random rand) -> ScottPlot.MarkerShape
~static ScottPlot.MarkerTools.DrawMarker(System.Drawing.Graphics gfx, System.Drawing.PointF pixelLocation, ScottPlot.IMarker marker, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~static ScottPlot.MarkerTools.DrawMarker(System.Drawing.Graphics gfx, System.Drawing.PointF pixelLocation, ScottPlot.MarkerShape shape, float size, System.Drawing.Brush brush, System.Drawing.Pen pen) -> void
~static ScottPlot.MarkerTools.DrawMarker(System.Drawing.Graphics gfx, System.Drawing.PointF pixelLocation, ScottPlot.MarkerShape shape, float size, System.Drawing.Color color, float linewidth = 1) -> void
~static ScottPlot.MarkerTools.DrawMarkers(System.Drawing.Graphics gfx, System.Collections.Generic.ICollection<System.Drawing.PointF> pixelLocations, ScottPlot.MarkerShape shape, float size, System.Drawing.Color color, float linewidth = 1) -> void
~static ScottPlot.NumericConversion.CreateAddFunction<T>() -> System.Func<T, T, T>
~static ScottPlot.NumericConversion.CreateLessThanOrEqualFunction<T>() -> System.Func<T, T, bool>
~static ScottPlot.NumericConversion.CreateSubtractFunction<T>() -> System.Func<T, T, T>
~static ScottPlot.NumericConversion.DoubleToGeneric<T>(this double[] input) -> T[]
~static ScottPlot.NumericConversion.GenericToDouble<T>(System.Collections.Generic.List<T> list, int i) -> double
~static ScottPlot.NumericConversion.GenericToDouble<T>(T[] array, int i) -> double
~static ScottPlot.NumericConversion.ToGenericArray<T>(this double[] input) -> T[]
~static ScottPlot.Palette.Amber.get -> ScottPlot.IPalette
~static ScottPlot.Palette.Aurora.get -> ScottPlot.IPalette
~static ScottPlot.Palette.Category10.get -> ScottPlot.IPalette
~static ScottPlot.Palette.Category20.get -> ScottPlot.IPalette
~static ScottPlot.Palette.ColorblindFriendly.get -> ScottPlot.IPalette
~static ScottPlot.Palette.Dark.get -> ScottPlot.IPalette
~static ScottPlot.Palette.DarkPastel.get -> ScottPlot.IPalette
~static ScottPlot.Palette.FromHtmlColors(string[] htmlColors) -> ScottPlot.IPalette
~static ScottPlot.Palette.Frost.get -> ScottPlot.IPalette
~static ScottPlot.Palette.GetPalettes() -> ScottPlot.IPalette[]
~static ScottPlot.Palette.Microcharts.get -> ScottPlot.IPalette
~static ScottPlot.Palette.Nero.get -> ScottPlot.IPalette
~static ScottPlot.Palette.Nord.get -> ScottPlot.IPalette
~static ScottPlot.Palette.OneHalf.get -> ScottPlot.IPalette
~static ScottPlot.Palette.OneHalfDark.get -> ScottPlot.IPalette
~static ScottPlot.Palette.PolarNight.get -> ScottPlot.IPalette
~static ScottPlot.Palette.Redness.get -> ScottPlot.IPalette
~static ScottPlot.Palette.SnowStorm.get -> ScottPlot.IPalette
~static ScottPlot.Palette.Tsitsulin.get -> ScottPlot.IPalette
~static ScottPlot.Plot.Version.get -> string
~static ScottPlot.Plottable.LegendItem.SingleItem(ScottPlot.Plottable.IPlottable parent, string label) -> ScottPlot.Plottable.LegendItem[]
~static ScottPlot.Plottable.ScatterPlot.GetStepDisplayPoints(System.Drawing.PointF[] points, bool right) -> System.Drawing.PointF[]
~static ScottPlot.Statistics.Common.CumulativeSum(double[] values) -> double[]
~static ScottPlot.Statistics.Common.Histogram(double[] values, double min, double max, double binSize, bool density = false) -> (double[] hist, double[] binEdges)
~static ScottPlot.Statistics.Common.Histogram(double[] values, int binCount, bool density = false, double min = NaN, double max = NaN) -> (double[] hist, double[] binEdges)
~static ScottPlot.Statistics.Common.Mean(double[] values) -> double
~static ScottPlot.Statistics.Common.Median(double[] values) -> double
~static ScottPlot.Statistics.Common.MinMaxSum(double[] values) -> (double min, double max, double sum)
~static ScottPlot.Statistics.Common.NthOrderStatistic(double[] values, int n) -> double
~static ScottPlot.Statistics.Common.Percentile(double[] values, double percentile) -> double
~static ScottPlot.Statistics.Common.Percentile(double[] values, int percentile) -> double
~static ScottPlot.Statistics.Common.ProbabilityDensity(double[] values, double[] xs, bool percent = false) -> double[]
~static ScottPlot.Statistics.Common.ProbabilityDensityFunction(double[] values) -> System.Func<double, double?>
~static ScottPlot.Statistics.Common.Quantile(double[] values, int n, int quantileCount) -> double
~static ScottPlot.Statistics.Common.Quartile(double[] values, int quartile) -> double
~static ScottPlot.Statistics.Common.StdErr(double[] values) -> double
~static ScottPlot.Statistics.Common.StDev(double[] values) -> double
~static ScottPlot.Statistics.Common.StDev(double[] values, double mean) -> double
~static ScottPlot.Statistics.Finance.Bollinger(double[] prices, int N, double sdCoeff = 2) -> (double[] sma, double[] lower, double[] upper)
~static ScottPlot.Statistics.Finance.Bollinger(ScottPlot.OHLC[] ohlcs, int N, double sdCoeff = 2) -> (double[] sma, double[] lower, double[] upper)
~static ScottPlot.Statistics.Finance.SMA(double[] values, int period, bool trimNan = true) -> double[]
~static ScottPlot.Statistics.Finance.SMA(ScottPlot.OHLC[] ohlcs, int N) -> double[]
~static ScottPlot.Statistics.Finance.SMStDev(double[] values, int period) -> double[]
~static ScottPlot.Statistics.Histogram.BinBySize(double binSize, double min, double max) -> double[]
~static ScottPlot.Statistics.Interpolation.Bezier.InterpolateXY(double[] xs, double[] ys, double stepSize) -> (double[] xs, double[] ys)
~static ScottPlot.Statistics.Interpolation.CatmullRom.InterpolateXY(double[] xs, double[] ys, int multiple) -> (double[] xs, double[] ys)
~static ScottPlot.Statistics.Interpolation.Chaikin.InterpolateXY(double[] xs, double[] ys, int multiple, double tension = 0.5) -> (double[] xs, double[] ys)
~static ScottPlot.Statistics.Interpolation.Cubic.InterpolateXY(double[] xs, double[] ys, int count) -> (double[] xs, double[] ys)
~static ScottPlot.Style.Black.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Blue1.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Blue2.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Blue3.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Burgundy.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Control.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Default.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.GetStyles() -> ScottPlot.Styles.IStyle[]
~static ScottPlot.Style.Gray1.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Gray2.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Hazel.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Light1.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Light2.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Monospace.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Pink.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Style.Seaborn.get -> ScottPlot.Styles.IStyle
~static ScottPlot.Ticks.TickCollection.GetDateLabels(double[] ticksOADate, System.Globalization.CultureInfo culture) -> string[]
~static ScottPlot.Ticks.TickCollection.GetLogDistributedPoints(int count, double min, double max, bool inclusive) -> double[]
~static ScottPlot.Tools.ApplyBaselineSubtraction(double[] data, int index1, int index2) -> void
~static ScottPlot.Tools.BitmapFromBytes(byte[] bytes, System.Drawing.Size size, System.Drawing.Imaging.PixelFormat format = System.Drawing.Imaging.PixelFormat.Format8bppIndexed) -> System.Drawing.Bitmap
~static ScottPlot.Tools.BitmapHash(System.Drawing.Bitmap bmp) -> string
~static ScottPlot.Tools.BitmapToBytes(System.Drawing.Bitmap bmp) -> byte[]
~static ScottPlot.Tools.ConvertPolarCoordinates(double[] rs, double[] thetas) -> (double[] xs, double[] ys)
~static ScottPlot.Tools.DateTimesToDoubles(System.DateTime[] dateTimeArray) -> double[]
~static ScottPlot.Tools.DesignerModeDemoPlot(ScottPlot.Plot plt) -> void
~static ScottPlot.Tools.DoubleArray(byte[] dataIn) -> double[]
~static ScottPlot.Tools.DoubleArray(float[] dataIn) -> double[]
~static ScottPlot.Tools.DoubleArray(int[] dataIn) -> double[]
~static ScottPlot.Tools.GetFrameworkVersionString() -> string
~static ScottPlot.Tools.GetOsName(bool details = true) -> string
~static ScottPlot.Tools.GetRandomBrush() -> System.Drawing.Brush
~static ScottPlot.Tools.GetRandomColor(System.Random rand = null) -> System.Drawing.Color
~static ScottPlot.Tools.GetVersionString(bool justThreeDigits = true) -> string
~static ScottPlot.Tools.LaunchBrowser(string url = "https://ScottPlot.NET") -> void
~static ScottPlot.Tools.Log10(double[] dataIn) -> double[]
~static ScottPlot.Tools.Pad(double[] values, int padCount = 1, double padWithLeft = 0, double padWithRight = 0, bool cloneEdges = false) -> double[]
~static ScottPlot.Tools.Round(double[] data, int decimals = 2) -> double[]
~static ScottPlot.Tools.ScientificNotation(double value, int decimalPlaces = 2, bool preceedWithPlus = true) -> string
~static ScottPlot.Tools.SimpleHash(double[] input) -> int
~static ScottPlot.Tools.ToDifferentBase(double number, int radix = 16, int decimalPlaces = 3, int padInteger = 0, bool dropTrailingZeroes = true, char decimalSymbol = '.') -> string
~static ScottPlot.Tools.Uses24HourClock(System.Globalization.CultureInfo culture) -> bool
~static ScottPlot.Tools.VerifyFont(string fontName) -> string
~static ScottPlot.Tools.XYToIntensities(ScottPlot.IntensityMode mode, int[] xs, int[] ys, int width, int height, int sampleWidth) -> double[,]
~static ScottPlot.Tools.XYToIntensitiesDensity(int[] xs, int[] ys, int width, int height, int sampleWidth) -> double[,]
~static ScottPlot.Tools.XYToIntensitiesGaussian(int[] xs, int[] ys, int width, int height, int sigma) -> double[,]
~static ScottPlot.Validate.AssertAllReal(string label, double[] values) -> void
~static ScottPlot.Validate.AssertAllReal<T>(string label, T[] values) -> void
~static ScottPlot.Validate.AssertDoesNotDescend(double[] values) -> void
~static ScottPlot.Validate.AssertDoesNotDescend<T>(string label, T[] values, int minIndex = 0, int? maxIndex = null) -> void
~static ScottPlot.Validate.AssertDoesNotDescend<T>(T[] values) -> void
~static ScottPlot.Validate.AssertEqualLength(string label, double[] a, double[] b = null, double[] c = null, double[] d = null, double[] e = null, double[] f = null) -> void
~static ScottPlot.Validate.AssertEqualLength<T1, T2>(string label, T1[] a, T2[] b) -> void
~static ScottPlot.Validate.AssertHasElements(string label, double[] values) -> void
~static ScottPlot.Validate.AssertHasElements(string label, string[] values) -> void
~static ScottPlot.Validate.AssertHasElements(string label, System.Drawing.Color[] values) -> void
~static ScottPlot.Validate.AssertHasElements<T>(string label, T[] values) -> void
~static ScottPlot.Validate.AssertHasText(string label, string value) -> void
~static ScottPlot.Validate.AssertIsReal(string label, double value) -> void
~static ScottPlot.Validate.IsEqualLength(double[] a, double[] b = null, double[] c = null, double[] d = null, double[] e = null, double[] f = null) -> bool
~virtual ScottPlot.MinMaxSearchStrategies.LinearMinMaxSearchStrategy<T>.SourceArray.get -> T[]
~virtual ScottPlot.MinMaxSearchStrategies.LinearMinMaxSearchStrategy<T>.SourceArray.set -> void
~virtual ScottPlot.Palettes.PaletteBase.Description.get -> string
~virtual ScottPlot.Palettes.PaletteBase.Name.get -> string
~virtual ScottPlot.Plottable.Heatmap.RenderHeatmap(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~virtual ScottPlot.Plottable.SignalPlotBase<T>.Render(ScottPlot.PlotDimensions dims, System.Drawing.Bitmap bmp, bool lowQuality = false) -> void
~virtual ScottPlot.Plottable.SignalPlotBase<T>.Ys.get -> T[]
~virtual ScottPlot.Plottable.SignalPlotBase<T>.Ys.set -> void
~virtual ScottPlot.Styles.Default.AxisLabelFontName.get -> string
~virtual ScottPlot.Styles.Default.TickLabelFontName.get -> string
~virtual ScottPlot.Styles.Default.TitleFontName.get -> string
~virtual ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickUnitBase.GetTickLabel(System.DateTime value) -> string
~virtual ScottPlot.Ticks.DateTimeTickUnits.DateTimeTickUnitBase.GetTicks(System.DateTime from, System.DateTime to, int delta) -> System.DateTime[]